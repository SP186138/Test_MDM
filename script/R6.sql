.logon $TDPID/$TDUSER,$TDPWD

.SET ERROROUT STDOUT ;
 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
.SET SESSION CHARSET 'UTF8' ;
 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

.GOTO $Step

.LABEL L1
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('NR','New Request',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('CP','1CP Completed',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('RP','Request Processed',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('RA','Request OnHold for Data Deletion Review',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('NM','No Match',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('KS','Contact Us Success',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('IP','In Progress',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('PR','Process Request',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('PH','Process On-hold Request for Deletion',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('PA','Process On-hold request for Data Access',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_STATUS(GDPR_RQST_STATUS_CD,GDPR_RQST_STATUS_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('RR','Review Request',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_TYPE(GDPR_RQST_TYPE_CD,GDPR_RQST_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('DA','Data Access',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_TYPE(GDPR_RQST_TYPE_CD,GDPR_RQST_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('DR','Data Resume',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_TYPE(GDPR_RQST_TYPE_CD,GDPR_RQST_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('DD','Data Delete',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_TYPE(GDPR_RQST_TYPE_CD,GDPR_RQST_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('DH','Data OnHold',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_TYPE(GDPR_RQST_TYPE_CD,GDPR_RQST_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('DP','Data Portability',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_TYPE(GDPR_RQST_TYPE_CD,GDPR_RQST_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('DO','Data Objection',-99,'SYSDBA',-99);
INSERT INTO GDPR_RQST_TYPE(GDPR_RQST_TYPE_CD,GDPR_RQST_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('DM','Data Modification/Rectification',-99,'SYSDBA',-99); 
INSERT INTO GDPR_SRCH_TYPE(GDPR_SRCH_TYPE_CODE,GDPR_SRCH_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('EN','Email&Name',-99,'SYSDBA',-99);
INSERT INTO GDPR_SRCH_TYPE(GDPR_SRCH_TYPE_CODE,GDPR_SRCH_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('E','Email&NoName',-99,'SYSDBA',-99);
INSERT INTO GDPR_SRCH_TYPE(GDPR_SRCH_TYPE_CODE,GDPR_SRCH_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('PN','Phone&Name',-99,'SYSDBA',-99);
INSERT INTO GDPR_SRCH_TYPE(GDPR_SRCH_TYPE_CODE,GDPR_SRCH_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('P','Phone&NoName',-99,'SYSDBA',-99);
INSERT INTO GDPR_SRCH_TYPE(GDPR_SRCH_TYPE_CODE,GDPR_SRCH_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('AN','Address&Name',-99,'SYSDBA',-99);
INSERT INTO GDPR_SRCH_TYPE(GDPR_SRCH_TYPE_CODE,GDPR_SRCH_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('A','Address&NoName',-99,'SYSDBA',-99);
INSERT INTO GDPR_SRCH_TYPE(GDPR_SRCH_TYPE_CODE,GDPR_SRCH_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('NN','NationalId&Name',-99,'SYSDBA',-99);
INSERT INTO GDPR_SRCH_TYPE(GDPR_SRCH_TYPE_CODE,GDPR_SRCH_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('N','NationalId&NoName',-99,'SYSDBA',-99);
INSERT INTO GDPR_SRCH_TYPE(GDPR_SRCH_TYPE_CODE,GDPR_SRCH_TYPE_NAME,LOG_SOURCE_ID,LOG_UPDATE_USER,LOG_LOAD_ID) VALUES('MC','Matched Consumer',-99,'SYSDBA',-99); 
 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

.LABEL L2

INSERT INTO MDM.RTN_DELETE_REF(RTN_RULE_ID,TBL_NAME,DEL_COL,SEQ_NBR) VALUES(0,'ICRM_STAGE.DMC_RDE_LOAD_STG','DMCIdentifier',1);
INSERT INTO MDM.RTN_DELETE_REF(RTN_RULE_ID,TBL_NAME,DEL_COL,SEQ_NBR) VALUES(0,'ICRM_STAGE.DMC_RDE_LOAD_STG_HIST','DMCIdentifier',2);
DEL FROM MDM.RTN_DELETE_REF
WHERE RTN_RULE_ID=0
AND TBL_NAME IN ('ICRM_STAGE.DMC_CAMP_RSP_RDE_STG_R2',
'ICRM_STAGE.DMC_CAMP_RSP_RDE_STG_R2_HIST',
'ICRM_STAGE.DMC_CAMP_RSP_STG_R2',
'ICRM_STAGE.DMC_RDE_STATS_LOAD_STG',
'ICRM_STAGE.DMC_RDE_STATS_LOAD_STG_HIST',
'ICRM_STAGE.DMC_TRANS_RDE_LOAD_STG',
'ICRM_STAGE.DMC_TRANS_RDE_LOAD_STG_HIST');
 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
 
 .LABEL L3
 CREATE SET TABLE mdm.REMATCH_STG ,NO FALLBACK ,
      NO BEFORE JOURNAL,
      NO AFTER JOURNAL,
      CHECKSUM = DEFAULT,
      DEFAULT MERGEBLOCKRATIO
      (
       MKTNG_PGM_NBR INTEGER NOT NULL,
       REGIS_PRSNA_ID INTEGER NOT NULL,
       LEGAL_ENT_NBR INTEGER,
       CNTRY_CODE VARCHAR(3) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ,
       SYS_SOURCE VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC COMPRESS ,
       REGIS_CNSMR_ID_VAL VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC,
       SYS_TARGET_ID INTEGER COMPRESS )
 PRIMARY INDEX REMATCH_STG_NUPI ( MKTNG_PGM_NBR ,REGIS_PRSNA_ID )
 PARTITION BY MKTNG_PGM_NBR 
 INDEX ( CNTRY_CODE )
INDEX ( SYS_SOURCE );
  .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
  

   
 .LABEL L4
 
 CREATE VOLATILE TABLE BRAND_FMLY_VTT AS (
 SELECT 
 STG.CATEG_CODE
 ,STG.BRAND_CODE
 ,B.BRAND_NAME
 FROM
 PROD_ITEM_HIER_ASSOC STG
 JOIN BRAND B
 ON STG.BRAND_CODE=B.BRAND_CODE
 LEFT JOIN
 BRAND_FAMLY_ASSOC BRND_FMLY_ASSO
 ON  (STG.CATEG_CODE =BRND_FMLY_ASSO.CATEG_CODE
 AND STG.CATEG_CODE = BRND_FMLY_ASSO.BRAND_CODE) 
 AND (BRND_FMLY_ASSO.CATEG_CODE IS NULL  AND BRND_FMLY_ASSO.BRAND_CODE IS NULL)
 GROUP BY 1,2,3) 
 WITH DATA
 PRIMARY INDEX (BRAND_CODE)
ON COMMIT PRESERVE ROWS ;
 
   .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
   
 .LABEL L5
 
 INSERT INTO  BRAND_FAMLY_ASSOC 
 (
 BRAND_FAMLY_ID                
 ,CATEG_CODE                    
 ,BRAND_CODE                    
 ,SYS_SOURCE                    
 ,SYS_TARGET_ID                 
 ,SYS_AUTH_ID                     
 ,SYS_CREATED_BY                
 ,SYS_CREATION_DATE             
 ,SYS_LAST_MODIFIED_DATE        
 ,SYS_ENT_STATE                           
 ,SYS_LAST_MODIFIED_BY          
 ,SYS_NC_TYPE                   
 ,SYS_ERR_CODE                  
 ,SYS_ERR_SVRTY                 
 )
 SELECT
 BRAND_CODE
 ,CATEG_CODE
 ,BRAND_CODE
 ,-99
 ,-99
 ,'-99'
 ,'Etl_user'
 ,Current_Timestamp(0)
 ,Current_Timestamp(0)
 ,'ACTIVE'
 ,'Release 6'
 ,'INSERT'         
 ,'-99'
 ,'-99'
 FROM
BRAND_FMLY_VTT;

   .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
   
 .LABEL L6
 
 INSERT INTO BRAND_FAMLY
 
 (
 BRAND_FAMLY_ID                
 ,BRAND_FAMLY_NAME           
 ,SYS_SOURCE                    
 ,SYS_TARGET_ID                 
 ,SYS_AUTH_ID                   
 ,SYS_CREATED_BY                
 ,SYS_CREATION_DATE             
 ,SYS_LAST_MODIFIED_DATE        
 ,SYS_ENT_STATE                 
 ,SYS_LAST_MODIFIED_BY          
 ,SYS_NC_TYPE                   
 ,SYS_ERR_CODE                  
 ,SYS_ERR_SVRTY                 
 )
 
 SELECT
 BRAND_CODE 
 ,BRAND_NAME    
 ,-99
 ,-99
 ,'-99'
 ,'Etl_user'
 ,Current_Timestamp(0)
 ,Current_Timestamp(0)
 ,'ACTIVE'
 ,'Etl_user'
 ,'INSERT'         
 ,'-99'
 ,'-99'
 FROM
 BRAND_FMLY_VTT 
 GROUP BY 1,2
 ;
   .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
   
    .LABEL L7
	
CREATE SET TABLE MDM.out_gdpr_rqst ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
      REGIS_PRSNA_ID INTEGER NOT NULL,
      DMC_EMAIL VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
      GRS_EMAIL VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
      DMC_PHONE VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
      GDPR_CASE_ID VARCHAR(100) CHARACTER SET LATIN NOT CASESPECIFIC NOT NULL,
      GDPR_RQST_TYPE_CD CHAR(2) CHARACTER SET LATIN NOT CASESPECIFIC,
      GDPR_RQST_STATUS_CD CHAR(2) CHARACTER SET LATIN NOT CASESPECIFIC,
      GVN_NAME VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC,
      MID_NAME VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC,
      FAMLY_NAME VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC,
      NAME_SUFFX_TXT CHAR(5) CHARACTER SET UNICODE NOT CASESPECIFIC,
      FULL_NAME VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC,
      MKTNG_PGM_NBR INTEGER,
      REGIS_CNSMR_ID_VAL VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC,
      DATA_SRCE_NBR INTEGER,
      NATIONAL_ID_NBR VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
      EMAIL_ADDR_TXT VARCHAR(200) CHARACTER SET UNICODE NOT CASESPECIFIC,
      FULL_PHONE_NUM VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
      ADDR_LINE_1_TXT VARCHAR(500) CHARACTER SET UNICODE NOT CASESPECIFIC,
      ADDR_LINE_2_TXT VARCHAR(500) CHARACTER SET UNICODE NOT CASESPECIFIC,
      ADDR_LINE_3_TXT VARCHAR(500) CHARACTER SET UNICODE NOT CASESPECIFIC,
      CITY_NAME VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC,
      TERR_NAME VARCHAR(100) CHARACTER SET UNICODE NOT CASESPECIFIC,
      POSTL_AREA_CODE VARCHAR(20) CHARACTER SET LATIN NOT CASESPECIFIC,
      CNTRY_CODE CHAR(5) CHARACTER SET LATIN NOT CASESPECIFIC,
      GDPR_RQST_FULFLMT_DATETM TIMESTAMP(0),
      GDPR_RQST_CRTN_DATETM TIMESTAMP(0),
      GDPR_RQST_IDNTY_VFYD_DATETM TIMESTAMP(0),
      SYS_TARGET_ID INTEGER,
      SYS_AUTH_ID VARCHAR(1000) CHARACTER SET LATIN NOT CASESPECIFIC,
      SYS_SOURCE VARCHAR(256) CHARACTER SET LATIN NOT CASESPECIFIC DEFAULT 'BackEnd',
      SYS_CREATED_BY VARCHAR(70) CHARACTER SET LATIN NOT CASESPECIFIC,
      SYS_CREATION_DATE TIMESTAMP(0),
      SYS_ENT_STATE VARCHAR(25) CHARACTER SET LATIN NOT CASESPECIFIC CHECK ( SYS_ENT_STATE  IN ('ACTIVE','INACTIVE','NEW','DELETED') ),
      SYS_LAST_MODIFIED_BY VARCHAR(70) CHARACTER SET LATIN NOT CASESPECIFIC,
      SYS_LAST_MODIFIED_DATE TIMESTAMP(0),
      SYS_NC_TYPE VARCHAR(25) CHARACTER SET LATIN NOT CASESPECIFIC,
      SYS_ERR_CODE VARCHAR(10000) CHARACTER SET LATIN NOT CASESPECIFIC,
      SYS_ERR_SVRTY VARCHAR(30) CHARACTER SET LATIN NOT CASESPECIFIC CHECK ( SYS_ERR_SVRTY  IN ('SEVERE_ERROR','ERROR','WARNING') ))
PRIMARY INDEX OUT_GDPR_RQST_PK_NUPI ( REGIS_PRSNA_ID );
	
	 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
	 
	 
	    .LABEL L8
		CREATE SET TABLE mdm.GDPR_PROPS ,NO FALLBACK ,
     NO BEFORE JOURNAL,
     NO AFTER JOURNAL,
     CHECKSUM = DEFAULT,
     DEFAULT MERGEBLOCKRATIO
     (
	 ENV_NM VARCHAR(10) CHARACTER SET UNICODE NOT CASESPECIFIC NOT NULL,

	 RESOURCE_URL VARCHAR(200) CHARACTER SET UNICODE NOT CASESPECIFIC , 
	 ENDPOINT VARCHAR(200) CHARACTER SET UNICODE NOT CASESPECIFIC , 
	 EMAIL_SUFFIX VARCHAR(50) CHARACTER SET UNICODE NOT CASESPECIFIC,
	 PHONE_PREFIX VARCHAR(50) CHARACTER SET UNICODE NOT CASESPECIFIC,
	 GRS_RESOURCE_URL VARCHAR(200) CHARACTER SET UNICODE NOT CASESPECIFIC , 
	 GRS_ENDPOINT VARCHAR(200) CHARACTER SET UNICODE NOT CASESPECIFIC , 
	 GRS_EMAIL_SUFFIX VARCHAR(50) CHARACTER SET UNICODE NOT CASESPECIFIC,
	 GRS_PHONE_PREFIX VARCHAR(50) CHARACTER SET UNICODE NOT CASESPECIFIC,
	 
	 
      CONSTRAINT GDPR_PROPS_PK PRIMARY KEY ( ENV_NM)
	  )
 Insert into GDPR_PROPS (ENV_NM , RESOURCE_URL,EMAIL_SUFFIX,PHONE_PREFIX,ENDPOINT,GRS_RESOURCE_URL,GRS_ENDPOINT,GRS_EMAIL_SUFFIX,GRS_PHONE_PREFIX) values ('PROD' , 'pgglobal_ecm', '@email.descubrapg.com.br.invalid','8030000','https://sslc.teradatadmc.com','stage.grs-pg.com','https://stage.grs-pg.com','','')	  
		
		 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
		 
		   .LABEL L9
  
  INS ATTRIBUTE_types
  (ATTRIBUTE_TYPE_ID             ,
  ATTRIBUTE_TYPE                ,
  DISPLAY_NAME                  ,
  DATA_TYPE                     ,
  DATA_FORMAT                   ,
  DATA_LENGTH                   ,
  SELECTION_METHOD              ,
  AV_CODE_FLAG                  ,
  AV_SHORT_NAME_FLAG            ,
  USER_MANAGED_FLAG             ,
  API                           ,
  SYS_TARGET_ID                 ,
  SYS_AUTH_ID                   ,
  SYS_SOURCE                    ,
  SYS_CREATED_BY                ,
  SYS_CREATION_DATE             ,
  SYS_ENT_STATE                 ,
  SYS_LAST_MODIFIED_BY          ,
  SYS_LAST_MODIFIED_DATE        ,
  SYS_NC_TYPE                   ,
  SYS_ERR_CODE                  ,
  SYS_ERR_SVRTY                 )
  SEL
  38,
  'GDPR Review Specialists',
  'GDPR Review Specialists',
  'Text',
  'YYYY-MM-DD',
  5,
  'Default',
  'Y',
  'Y',
  'C',
  NULL,
  NULL,
  NULL,
  'BackEnd',
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL,
  NULL
  FROM ATTRIBUTE_types;
 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
 
  .LABEL L10
 
INSERT INTO MDM.ATTRIBUTE_VALUES (AV_ID, ATTRIBUTE_TYPE_ID, ACTIVE_FLAG, AV_DESCRIPTION, AV_CODE, AV_SHORT_NAME, SYS_ENT_STATE)
VALUES
(913,38,'Y', 'tokarski.m.1@pg.com', 'RS1','RS1','ACTIVE');

 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
 
   .LABEL L11
 
INSERT INTO MDM.ATTRIBUTE_VALUES (AV_ID, ATTRIBUTE_TYPE_ID, ACTIVE_FLAG, AV_DESCRIPTION, AV_CODE, AV_SHORT_NAME, SYS_ENT_STATE)
VALUES
(914,38,'Y', 'rytlewski.l@pg.com', 'RS2','RS2','ACTIVE');

 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
 
   .LABEL L12
 
INSERT INTO MDM.ATTRIBUTE_VALUES (AV_ID, ATTRIBUTE_TYPE_ID, ACTIVE_FLAG, AV_DESCRIPTION, AV_CODE, AV_SHORT_NAME, SYS_ENT_STATE)
VALUES
(915,38,'Y', 'janaviciute.r@pg.com', 'RS3','RS3','ACTIVE');

 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

  .LABEL L13
 
 UPDATE MDM.ID_SQR
 FROM (SEL MAX(AV_ID)+1 AS SEQ_NBR FROM MDM.ATTRIBUTE_VALUES) B
 SET SEQ_NR=B.SEQ_NBR
 WHERE DOC_NAME='AVID_SEQ_ID'
  ;
 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
 
 .LABEL L14
 
 UPDATE ICRM_TBL.REGIS_PRSNA
SET CNSMR_HASH_ID='H_'||SHA256(TRIM(MKTNG_PGM_NBR)||TRIM(LOWER(REGIS_CNSMR_ID_VAL))||TRIM(SYS_TARGET_ID)), DATA_SRCE_NBR =SYS_TARGET_ID
WHERE    MKTNG_PGM_NBR IN (7,20)
AND DATA_SRCE_NBR IS NULL;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


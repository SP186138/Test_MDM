/***********************************************************************************************************
SCRIPT:               BUILD_OPT_OUT_PHL_LIST.BTEQ 
DESCRIPTION:          THIS SCRIPT LOADS EDW TABLES -- This scripts creates opt out list
                                                      after the respective REGIS_PRSNA tables have been populated
                                                      and loads MDM.REG_OPT_OUT_MDM_TEMP
DEPENDENCY:           
INPUT:                TRILLIUM OUTPUT CNTRY TABLES
OUTPUT:               EDW
ERRORS:
SPECIAL INSTRUCTIONS:

CHANGE LOG:
VERSION              DATE                 AUTHOR                          CHANGES
1.00                 10/31/2011           TERADATA                        INITIAL VERSION
4.00                 03/26/2012           TERADATA                        1. UPDATE NATIONAL ID INTO REGIS PRSNA 
                                                                          FROM PRSNA TRT.
                                                                          2. ADD STATE VALIDATION FOR US
									  3. ADD OPT OUT MODULE
R2O                  05/11/2012           TERADATA                        REMOVE ERROR PROCESSING
4.1                  06/13/2012           TERADATA                        MODULARIZE AND TUNING
***********************************************************************************************************/

.logon $TDPID/$TDUSER,$TDPWD


.SET ERROROUT STDOUT;
.SET SESSION CHARSET 'UTF8';
.SET ERRORLEVEL 3624 SEVERITY 0

DATABASE $DATABASENAME;


/*****************************************************************************
OPT_OUT_PHL_LIST_TEMP is a temporary table to consolidate the negative REGIS_PRSNA_IDs from 
REGIS_PRSNA_OPT_OUT_HIST to be checked for during wrapper processing
******************************************************************************/
DELETE FROM $DATABASENAME.OPT_OUT_PHL_LIST_TEMP ALL;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DELETE FROM $DATABASENAME.OPT_OUT_PHL_LIST_DCS ALL;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DELETE FROM $DATABASENAME.OPT_OUT_PHL_LIST_DMA ALL;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DELETE FROM $DATABASENAME.OPT_OUT_PHL_LIST_SIDS ALL;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE TABLE REG_OPT_OUT_TIME
AS 
(

SEL MIN(CNSMR_CHCE_DATETM) CNSMR_CHCE_DATETM
FROM
(SELECT	
MIN(ADJ.CNSMR_CHCE_DATETM) CNSMR_CHCE_DATETM
FROM 
REGIS_PRSNA_EMAIL_ADDR ADJ 
WHERE CAST(ADJ.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM  LOAD_INFO 
WHERE PROCESS_NAME = 'Wrapper' and cntry_name='PHL' and status='In Progress')
UNION
SELECT	
MIN(ADJ.CNSMR_CHCE_DATETM) CNSMR_CHCE_DATETM
FROM 
REGIS_PRSNA_POSTL_ADDR ADJ 
WHERE CAST(ADJ.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM  LOAD_INFO 
WHERE PROCESS_NAME = 'Wrapper' and cntry_name='PHL' and status='In Progress')
UNION
SELECT	
MIN(ADJ.CNSMR_CHCE_DATETM) CNSMR_CHCE_DATETM
FROM 
REGIS_PRSNA_PHONE ADJ 
WHERE CAST(ADJ.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM  LOAD_INFO 
WHERE PROCESS_NAME = 'Wrapper' and cntry_name='PHL' and status='In Progress')
) A
)
WITH DATA
PRIMARY INDEX ( CNSMR_CHCE_DATETM )
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE TABLE POSTL AS (
SELECT	
ADJ.CNTRY_CODE CNTRY_NAME, 
ADJ.ADDR_LINE_1_TXT, 
ADJ.ADDR_LINE_2_TXT,
ADJ.ADDR_LINE_3_TXT,
ADJ.CITY_NAME,
ADJ.TERR_NAME,
ADJ.POSTL_AREA_CODE,
ADJ.MKTNG_PGM_NBR, 
ADJ.SUBSCRPTN_OPT_NBR, 
ADJ.LEGAL_ENT_NBR,
ADJ.DATA_SRCE_NBR,
ADJ.REGIS_PRSNA_ID,
ADJ.CNSMR_CHCE_DATETM
FROM $DATABASENAME.REGIS_PRSNA_POSTL_ADDR  ADJ
WHERE CAST(ADJ.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM  LOAD_INFO 
WHERE PROCESS_NAME = 'Wrapper' and cntry_name='PHL' and status='In Progress')
)
WITH DATA
PRIMARY INDEX (CNTRY_NAME,ADDR_LINE_1_TXT,ADDR_LINE_2_TXT,ADDR_LINE_3_TXT,
CITY_NAME,TERR_NAME,POSTL_AREA_CODE,MKTNG_PGM_NBR,CNSMR_CHCE_DATETM)
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE TABLE PHONE AS (
SELECT	
ADJ.FULL_PHONE_NUM,
ADJ.MKTNG_PGM_NBR, 
ADJ.SUBSCRPTN_OPT_NBR, 
ADJ.LEGAL_ENT_NBR,
ADJ.DATA_SRCE_NBR,
ADJ.REGIS_PRSNA_ID,
ADJ.CNSMR_CHCE_DATETM
FROM 
$DATABASENAME.REGIS_PRSNA_PHONE ADJ 
WHERE CAST(ADJ.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM  LOAD_INFO 
WHERE PROCESS_NAME = 'Wrapper' and cntry_name='PHL' and status='In Progress')
)
WITH DATA
PRIMARY INDEX (FULL_PHONE_NUM,MKTNG_PGM_NBR,CNSMR_CHCE_DATETM)
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE TABLE EMAIL AS (
SELECT	
ADJ.EMAIL_ADDR_TXT,
ADJ.MKTNG_PGM_NBR, 
ADJ.SUBSCRPTN_OPT_NBR, 
ADJ.LEGAL_ENT_NBR,
ADJ.DATA_SRCE_NBR,
ADJ.REGIS_PRSNA_ID,
ADJ.CNSMR_CHCE_DATETM
FROM 
$DATABASENAME.REGIS_PRSNA_EMAIL_ADDR ADJ 
WHERE CAST(ADJ.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM  LOAD_INFO 
WHERE PROCESS_NAME = 'Wrapper' and cntry_name='PHL' and status='In Progress')
)
WITH DATA
PRIMARY INDEX (EMAIL_ADDR_TXT,MKTNG_PGM_NBR,CNSMR_CHCE_DATETM)
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE TABLE OPT_OUT_HIST AS (
SELECT
REGIS_PRSNA_ID                ,
MKTNG_PGM_NBR                 ,
LEGAL_ENT_NBR                 ,
DATA_SRCE_NBR                 ,
SUBSCRIPTION_NBR              ,
FIRST_NAME                    ,
LAST_NAME                     ,
EMAIL_ADDR_TEXT               ,
CONTACT_PHONE_NBR             ,
SRC_ADDR_LINE_1_TXT           ,
SRC_ADDR_LINE_2_TXT           ,
SRC_ADDR_LINE_3_TXT           ,
SRC_CITY_NAME                 ,
SRC_STATE                     ,
SRC_ZIP                       ,
SRC_CNTRY_NAME                ,
ADDR_LINE_1_TXT               ,
ADDR_LINE_2_TXT               ,
ADDR_LINE_3_TXT               ,
CITY_NAME                     ,
TERR_NAME                     ,
POSTL_AREA_CODE               ,
CNTRY_NAME                    ,
OPT_IND                       ,
OPT_TIME                  ,
OPT_REASN_TXT             ,
OPT_TYPE_CODE,
LAST_ACTIVITY_TM              ,
LOG_SOURCE_ID                 ,
LOG_UPDATE_USER               ,
LOG_LOAD_ID             
FROM $DATABASENAME.REGIS_PRSNA_OPT_OUT_HIST  
WHERE REGIS_PRSNA_ID < 0 
AND OPT_TIME>=(SEL CNSMR_CHCE_DATETM FROM REG_OPT_OUT_TIME)
)
WITH DATA
PRIMARY INDEX (EMAIL_ADDR_TEXT,CONTACT_PHONE_NBR,CNTRY_NAME,ADDR_LINE_1_TXT,ADDR_LINE_2_TXT,
ADDR_LINE_3_TXT,CITY_NAME,TERR_NAME,POSTL_AREA_CODE,MKTNG_PGM_NBR,CNSMR_CHCE_DATETM)
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


/*****************************************************************************
Populate OPT_OUT_PHL_LIST_TEMP with data having negative REGIS_PRSNA_IDs from 
REGIS_PRSNA_OPT_OUT_HIST and having a match to the channel tables 
REGIS_PRSNA_POSTL_ADDR, EMAIL_ADDR or PHONE and having a match on NAME to
REGIS_PRSNA.

Populate REGIS_PRSNA_ID either based on NAME. If not available, populate it from
REGIS_PRSNA using the REGIS_PRSNA_ID in the channel tables. Else populate it with
negative value from REGIS_PRSNA_OPT_OUT_HIST.

This is done for all marketing programs except for universal optout. Universal
Optout is marketing program 9999.
******************************************************************************/
INSERT	INTO $DATABASENAME.OPT_OUT_PHL_LIST_TEMP
 (MKTNG_PGM_NBR
 ,EMAIL
 ,PHONE
 ,SUBSCRIPTION_NBR
 ,REGIS_PRSNA_ID
 ,OPT_OUT_DTTIME
 ,ADDR_LINE_1_TXT
 ,ADDR_LINE_2_TXT
 ,ADDR_LINE_3_TXT
 ,CITY_NAME
 ,TERR_NAME
 ,POSTL_AREA_CODE
 ,CNTRY_NAME
 ,LEGAL_ENT_NBR
 ,DATA_SRCE_NBR
 ,MATCHD_CNSMR_PRSNA_ID
 ,FNAME
 ,LNAME
 ,LOAD_ID
 ,EDW_MKTNG_PGM_NBR
 ,HIST_REGIS_PRSNA_ID
 ,CNTRY_CODE)
 
SELECT	
STG.MKTNG_PGM_NBR STG_MKTNG_PGM_NBR,
STG.EMAIL_ADDR_TEXT EMAIL,
STG.CONTACT_PHONE_NBR PHONE,
COALESCE(CN.SUBSCRPTN_OPT_NBR,STG.SUBSCRIPTION_NBR) SUBSCRPTN_OPT_NBR,
COALESCE(RP.REGIS_PRSNA_ID,STG.REGIS_PRSNA_ID) AS REGIS_PRSNA_ID ,
STG.OPT_TIME,
STG.ADDR_LINE_1_TXT,
STG.ADDR_LINE_2_TXT,
STG.ADDR_LINE_3_TXT,
STG.CITY_NAME,STG.TERR_NAME,
STG.POSTL_AREA_CODE,
STG.CNTRY_NAME,
RP.LEGAL_ENT_NBR,
RP.DATA_SRCE_NBR,
RP.MATCHD_CNSMR_PRSNA_ID,
STG.FIRST_NAME FNAME,
STG.LAST_NAME LNAME,
LOG_SOURCE_ID,
RP.MKTNG_PGM_NBR AS EDW_MKTNG_PGM_NBR,
STG.REGIS_PRSNA_ID AS HIST_REGIS_PRSNA_ID,
'PHL'
FROM	 

POSTL AS CN

INNER JOIN $DATABASENAME.OPT_OUT_HIST STG 
	ON	  coalesce(STG.ADDR_LINE_1_TXT,'')=  coalesce(CN.ADDR_LINE_1_TXT,'')
 	AND	 coalesce(STG.ADDR_LINE_2_TXT,'')= coalesce(CN.ADDR_LINE_2_TXT,'')
 	AND	 coalesce(STG.ADDR_LINE_3_TXT,'')= coalesce(CN.ADDR_LINE_3_TXT,'')
 	AND	  coalesce(STG.CITY_NAME,'')= coalesce(CN.CITY_NAME,'')
    	AND	 coalesce(STG.TERR_NAME,'')= coalesce(CN.TERR_NAME,'')
 	AND	  coalesce(STG.POSTL_AREA_CODE,'')= coalesce(CN.POSTL_AREA_CODE,'')
 	AND	 coalesce(STG.CNTRY_NAME,'')= coalesce(CN.CNTRY_NAME,'')
	AND	 STG.MKTNG_PGM_NBR= CN.MKTNG_PGM_NBR
	AND	STG.OPT_TIME>=CN.CNSMR_CHCE_DATETM
	AND     STG.MKTNG_PGM_NBR <>9999 
	AND (STG.ADDR_LINE_1_TXT IS NOT NULL 
	 OR STG.ADDR_LINE_2_TXT IS NOT NULL
	 OR STG.ADDR_LINE_3_TXT IS NOT NULL
	 OR STG.CITY_NAME IS NOT NULL
	 OR STG.TERR_NAME IS NOT NULL
	 OR STG.POSTL_AREA_CODE IS NOT NULL
	 OR STG.CNTRY_NAME IS NOT NULL)

INNER JOIN $DATABASENAME.REGIS_PRSNA RP
	ON	
CN.REGIS_PRSNA_ID=RP.REGIS_PRSNA_ID 
AND	CN.MKTNG_PGM_NBR = RP.MKTNG_PGM_NBR
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


INSERT	INTO $DATABASENAME.OPT_OUT_PHL_LIST_TEMP
 (MKTNG_PGM_NBR
 ,EMAIL
 ,PHONE
 ,SUBSCRIPTION_NBR
 ,REGIS_PRSNA_ID
 ,OPT_OUT_DTTIME
 ,ADDR_LINE_1_TXT
 ,ADDR_LINE_2_TXT
 ,ADDR_LINE_3_TXT
 ,CITY_NAME
 ,TERR_NAME
 ,POSTL_AREA_CODE
 ,CNTRY_NAME
 ,LEGAL_ENT_NBR
 ,DATA_SRCE_NBR
 ,MATCHD_CNSMR_PRSNA_ID
 ,FNAME
 ,LNAME
 ,LOAD_ID
 ,EDW_MKTNG_PGM_NBR
 ,HIST_REGIS_PRSNA_ID
 ,CNTRY_CODE)

SELECT	
STG.MKTNG_PGM_NBR STG_MKTNG_PGM_NBR,
STG.EMAIL_ADDR_TEXT EMAIL,
STG.CONTACT_PHONE_NBR PHONE,
COALESCE(PH.SUBSCRPTN_OPT_NBR,STG.SUBSCRIPTION_NBR) SUBSCRPTN_OPT_NBR,
COALESCE(RP.REGIS_PRSNA_ID,STG.REGIS_PRSNA_ID) AS REGIS_PRSNA_ID ,
STG.OPT_TIME,
STG.ADDR_LINE_1_TXT,
STG.ADDR_LINE_2_TXT,
STG.ADDR_LINE_3_TXT,
STG.CITY_NAME,STG.TERR_NAME,
STG.POSTL_AREA_CODE,
STG.CNTRY_NAME,
RP.LEGAL_ENT_NBR,
RP.DATA_SRCE_NBR,
RP.MATCHD_CNSMR_PRSNA_ID,
STG.FIRST_NAME FNAME,
STG.LAST_NAME LNAME,
LOG_SOURCE_ID,
RP.MKTNG_PGM_NBR AS EDW_MKTNG_PGM_NBR,
STG.REGIS_PRSNA_ID AS HIST_REGIS_PRSNA_ID,
'PHL'
FROM	 

PHONE PH
INNER JOIN $DATABASENAME.OPT_OUT_HIST STG 
ON STG.CONTACT_PHONE_NBR=PH.FULL_PHONE_NUM
AND STG.MKTNG_PGM_NBR=PH.MKTNG_PGM_NBR
AND STG.OPT_TIME>=PH.CNSMR_CHCE_DATETM
AND     STG.MKTNG_PGM_NBR <>9999 

INNER JOIN $DATABASENAME.REGIS_PRSNA RP
	ON	
PH.REGIS_PRSNA_ID=RP.REGIS_PRSNA_ID 
AND	PH.MKTNG_PGM_NBR = RP.MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT	INTO $DATABASENAME.OPT_OUT_PHL_LIST_TEMP
 (MKTNG_PGM_NBR
 ,EMAIL
 ,PHONE
 ,SUBSCRIPTION_NBR
 ,REGIS_PRSNA_ID
 ,OPT_OUT_DTTIME
 ,ADDR_LINE_1_TXT
 ,ADDR_LINE_2_TXT
 ,ADDR_LINE_3_TXT
 ,CITY_NAME
 ,TERR_NAME
 ,POSTL_AREA_CODE
 ,CNTRY_NAME
 ,LEGAL_ENT_NBR
 ,DATA_SRCE_NBR
 ,MATCHD_CNSMR_PRSNA_ID
 ,FNAME
 ,LNAME
 ,LOAD_ID
 ,EDW_MKTNG_PGM_NBR
 ,HIST_REGIS_PRSNA_ID
 ,CNTRY_CODE)

SELECT	
STG.MKTNG_PGM_NBR STG_MKTNG_PGM_NBR,
STG.EMAIL_ADDR_TEXT EMAIL,
STG.CONTACT_PHONE_NBR PHONE,
COALESCE(EA.SUBSCRPTN_OPT_NBR,STG.SUBSCRIPTION_NBR) SUBSCRPTN_OPT_NBR,
COALESCE(RP.REGIS_PRSNA_ID,STG.REGIS_PRSNA_ID) AS REGIS_PRSNA_ID ,
STG.OPT_TIME,
STG.ADDR_LINE_1_TXT,
STG.ADDR_LINE_2_TXT,
STG.ADDR_LINE_3_TXT,
STG.CITY_NAME,STG.TERR_NAME,
STG.POSTL_AREA_CODE,
STG.CNTRY_NAME,
RP.LEGAL_ENT_NBR,
RP.DATA_SRCE_NBR,
RP.MATCHD_CNSMR_PRSNA_ID,
STG.FIRST_NAME FNAME,
STG.LAST_NAME LNAME,
LOG_SOURCE_ID,
RP.MKTNG_PGM_NBR AS EDW_MKTNG_PGM_NBR,
STG.REGIS_PRSNA_ID AS HIST_REGIS_PRSNA_ID,
'PHL'
FROM	
EMAIL EA
INNER JOIN $DATABASENAME.OPT_OUT_HIST STG 
ON STG.EMAIL_ADDR_TEXT=EA.EMAIL_ADDR_TXT
AND STG.MKTNG_PGM_NBR=EA.MKTNG_PGM_NBR
AND STG.OPT_TIME>=EA.CNSMR_CHCE_DATETM
AND     STG.MKTNG_PGM_NBR <>9999 

INNER JOIN $DATABASENAME.REGIS_PRSNA RP
	ON	
EA.REGIS_PRSNA_ID=RP.REGIS_PRSNA_ID 
AND	EA.MKTNG_PGM_NBR = RP.MKTNG_PGM_NBR
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*****************************************************************************
Populate REG_OPT_OUT_MDM_TEMP with data having negative REGIS_PRSNA_IDs from 
REGIS_PRSNA_OPT_OUT_HIST and having a match to the channel tables 
REGIS_PRSNA_POSTL_ADDR, EMAIL_ADDR or PHONE and having a match on NAME to
REGIS_PRSNA.

Populate REGIS_PRSNA_ID either based on NAME. If not available, populate it from
REGIS_PRSNA using the REGIS_PRSNA_ID in the channel tables. Else populate it with
negative value from REGIS_PRSNA_OPT_OUT_HIST.

This is done for universal optout. Universal Optout is marketing program 9999.
******************************************************************************/

INSERT	INTO $DATABASENAME.OPT_OUT_PHL_LIST_TEMP
 (MKTNG_PGM_NBR
 ,EMAIL
 ,PHONE
 ,SUBSCRIPTION_NBR
 ,REGIS_PRSNA_ID
 ,OPT_OUT_DTTIME
 ,ADDR_LINE_1_TXT
 ,ADDR_LINE_2_TXT
 ,ADDR_LINE_3_TXT
 ,CITY_NAME
 ,TERR_NAME
 ,POSTL_AREA_CODE
 ,CNTRY_NAME
 ,LEGAL_ENT_NBR
 ,DATA_SRCE_NBR
 ,MATCHD_CNSMR_PRSNA_ID
 ,FNAME
 ,LNAME
 ,LOAD_ID
 ,EDW_MKTNG_PGM_NBR
 ,HIST_REGIS_PRSNA_ID
 ,CNTRY_CODE)


SELECT	
STG.MKTNG_PGM_NBR STG_MKTNG_PGM_NBR,
STG.EMAIL_ADDR_TEXT EMAIL,
STG.CONTACT_PHONE_NBR PHONE,
COALESCE(CN.SUBSCRPTN_OPT_NBR,STG.SUBSCRIPTION_NBR) SUBSCRPTN_OPT_NBR,
COALESCE(RP.REGIS_PRSNA_ID,STG.REGIS_PRSNA_ID) AS REGIS_PRSNA_ID ,
STG.OPT_TIME,
STG.ADDR_LINE_1_TXT,
STG.ADDR_LINE_2_TXT,
STG.ADDR_LINE_3_TXT,
STG.CITY_NAME,STG.TERR_NAME,
STG.POSTL_AREA_CODE,
STG.CNTRY_NAME,
RP.LEGAL_ENT_NBR,
RP.DATA_SRCE_NBR,
RP.MATCHD_CNSMR_PRSNA_ID,
STG.FIRST_NAME FNAME,
STG.LAST_NAME LNAME,
LOG_SOURCE_ID,
RP.MKTNG_PGM_NBR AS EDW_MKTNG_PGM_NBR,
STG.REGIS_PRSNA_ID AS HIST_REGIS_PRSNA_ID,
'PHL'
FROM	 

POSTL AS CN

INNER JOIN $DATABASENAME.OPT_OUT_HIST STG 
	ON	  coalesce(STG.ADDR_LINE_1_TXT,'')=  coalesce(CN.ADDR_LINE_1_TXT,'')
 	AND	 coalesce(STG.ADDR_LINE_2_TXT,'')= coalesce(CN.ADDR_LINE_2_TXT,'')
 	AND	 coalesce(STG.ADDR_LINE_3_TXT,'')= coalesce(CN.ADDR_LINE_3_TXT,'')
 	AND	  coalesce(STG.CITY_NAME,'')= coalesce(CN.CITY_NAME,'')
    	AND	 coalesce(STG.TERR_NAME,'')= coalesce(CN.TERR_NAME,'')
 	AND	  coalesce(STG.POSTL_AREA_CODE,'')= coalesce(CN.POSTL_AREA_CODE,'')
 	AND	 coalesce(STG.CNTRY_NAME,'')= coalesce(CN.CNTRY_NAME,'')
	AND     STG.MKTNG_PGM_NBR =9999 
	AND (STG.ADDR_LINE_1_TXT IS NOT NULL 
	 OR STG.ADDR_LINE_2_TXT IS NOT NULL
	 OR STG.ADDR_LINE_3_TXT IS NOT NULL
	 OR STG.CITY_NAME IS NOT NULL
	 OR STG.TERR_NAME IS NOT NULL
	 OR STG.POSTL_AREA_CODE IS NOT NULL
	 OR STG.CNTRY_NAME IS NOT NULL) 	

INNER JOIN $DATABASENAME.REGIS_PRSNA RP
	ON	
CN.REGIS_PRSNA_ID=RP.REGIS_PRSNA_ID 
AND	CN.MKTNG_PGM_NBR = RP.MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT	INTO $DATABASENAME.OPT_OUT_PHL_LIST_TEMP
 (MKTNG_PGM_NBR
 ,EMAIL
 ,PHONE
 ,SUBSCRIPTION_NBR
 ,REGIS_PRSNA_ID
 ,OPT_OUT_DTTIME
 ,ADDR_LINE_1_TXT
 ,ADDR_LINE_2_TXT
 ,ADDR_LINE_3_TXT
 ,CITY_NAME
 ,TERR_NAME
 ,POSTL_AREA_CODE
 ,CNTRY_NAME
 ,LEGAL_ENT_NBR
 ,DATA_SRCE_NBR
 ,MATCHD_CNSMR_PRSNA_ID
 ,FNAME
 ,LNAME
 ,LOAD_ID
 ,EDW_MKTNG_PGM_NBR
 ,HIST_REGIS_PRSNA_ID
 ,CNTRY_CODE)

SELECT	
STG.MKTNG_PGM_NBR STG_MKTNG_PGM_NBR,
STG.EMAIL_ADDR_TEXT EMAIL,
STG.CONTACT_PHONE_NBR PHONE,
COALESCE(PH.SUBSCRPTN_OPT_NBR,STG.SUBSCRIPTION_NBR) SUBSCRPTN_OPT_NBR,
COALESCE(RP.REGIS_PRSNA_ID,STG.REGIS_PRSNA_ID) AS REGIS_PRSNA_ID ,
STG.OPT_TIME,
STG.ADDR_LINE_1_TXT,
STG.ADDR_LINE_2_TXT,
STG.ADDR_LINE_3_TXT,
STG.CITY_NAME,STG.TERR_NAME,
STG.POSTL_AREA_CODE,
STG.CNTRY_NAME,
RP.LEGAL_ENT_NBR,
RP.DATA_SRCE_NBR,
RP.MATCHD_CNSMR_PRSNA_ID,
STG.FIRST_NAME FNAME,
STG.LAST_NAME LNAME,
LOG_SOURCE_ID,
RP.MKTNG_PGM_NBR AS EDW_MKTNG_PGM_NBR,
STG.REGIS_PRSNA_ID AS HIST_REGIS_PRSNA_ID,
'PHL'
FROM	 

PHONE PH

INNER JOIN $DATABASENAME.OPT_OUT_HIST STG 
ON STG.CONTACT_PHONE_NBR=PH.FULL_PHONE_NUM	
AND STG.MKTNG_PGM_NBR =9999 

INNER JOIN $DATABASENAME.REGIS_PRSNA RP
	ON	
PH.REGIS_PRSNA_ID=RP.REGIS_PRSNA_ID 
AND	PH.MKTNG_PGM_NBR = RP.MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT	INTO $DATABASENAME.OPT_OUT_PHL_LIST_TEMP
 (MKTNG_PGM_NBR
 ,EMAIL
 ,PHONE
 ,SUBSCRIPTION_NBR
 ,REGIS_PRSNA_ID
 ,OPT_OUT_DTTIME
 ,ADDR_LINE_1_TXT
 ,ADDR_LINE_2_TXT
 ,ADDR_LINE_3_TXT
 ,CITY_NAME
 ,TERR_NAME
 ,POSTL_AREA_CODE
 ,CNTRY_NAME
 ,LEGAL_ENT_NBR
 ,DATA_SRCE_NBR
 ,MATCHD_CNSMR_PRSNA_ID
 ,FNAME
 ,LNAME
 ,LOAD_ID
 ,EDW_MKTNG_PGM_NBR
 ,HIST_REGIS_PRSNA_ID
 ,CNTRY_CODE)
SELECT	
STG.MKTNG_PGM_NBR STG_MKTNG_PGM_NBR,
STG.EMAIL_ADDR_TEXT EMAIL,
STG.CONTACT_PHONE_NBR PHONE,
COALESCE(EA.SUBSCRPTN_OPT_NBR,STG.SUBSCRIPTION_NBR) SUBSCRPTN_OPT_NBR,
COALESCE(RP.REGIS_PRSNA_ID,STG.REGIS_PRSNA_ID) AS REGIS_PRSNA_ID ,
STG.OPT_TIME,
STG.ADDR_LINE_1_TXT,
STG.ADDR_LINE_2_TXT,
STG.ADDR_LINE_3_TXT,
STG.CITY_NAME,STG.TERR_NAME,
STG.POSTL_AREA_CODE,
STG.CNTRY_NAME,
RP.LEGAL_ENT_NBR,
RP.DATA_SRCE_NBR,
RP.MATCHD_CNSMR_PRSNA_ID,
STG.FIRST_NAME FNAME,
STG.LAST_NAME LNAME,
LOG_SOURCE_ID,
RP.MKTNG_PGM_NBR AS EDW_MKTNG_PGM_NBR,
STG.REGIS_PRSNA_ID AS HIST_REGIS_PRSNA_ID,
'PHL'
FROM	
EMAIL EA
INNER JOIN $DATABASENAME.OPT_OUT_HIST STG 
ON STG.EMAIL_ADDR_TEXT=EA.EMAIL_ADDR_TXT	
AND STG.MKTNG_PGM_NBR =9999 

INNER JOIN $DATABASENAME.REGIS_PRSNA RP
	ON	
EA.REGIS_PRSNA_ID=RP.REGIS_PRSNA_ID 
AND	EA.MKTNG_PGM_NBR = RP.MKTNG_PGM_NBR
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS OPT_OUT_PHL_LIST_TEMP;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*****************************************************************************
OPT_OUT_PHL_LIST_DCS is a temporary table to consolidate the negative REGIS_PRSNA_IDs from 
REGIS_PRSNA_OPT_OUT_HIST to be checked for during wrapper processing for the deceased list.
******************************************************************************/

INSERT INTO $DATABASENAME.OPT_OUT_PHL_LIST_DCS
(
REGIS_PRSNA_ID
,MATCHD_REGIS_PRSNA_ID
,LEGAL_ENT_NBR
,DATA_SRCE_NBR
,E_OPT_OUT
,P_OPT_OUT
,A_OPT_OUT
,LOAD_ID
,OPT_OUT_DTTIME	      
,HIST_REGIS_PRSNA_ID
,CNTRY_CODE
)
SELECT
RP.REGIS_PRSNA_ID
,RP.MATCHD_CNSMR_PRSNA_ID
,RP.LEGAL_ENT_NBR
,RP.DATA_SRCE_NBR
,CASE WHEN CN.REGIS_PRSNA_ID IS NOT NULL THEN 'Y' END
,CASE WHEN CN.REGIS_PRSNA_ID IS NOT NULL THEN 'Y' END
,CASE WHEN CN.REGIS_PRSNA_ID IS NOT NULL THEN 'Y' END
,STG.LOG_SOURCE_ID
,STG.OPT_TIME
,stg.regis_prsna_id
,'PHL'
FROM  $DATABASENAME.OPT_OUT_HIST STG
INNER JOIN
POSTL CN

ON  COALESCE(STG.ADDR_LINE_1_TXT,'')=  COALESCE(CN.ADDR_LINE_1_TXT,'')
AND  COALESCE(STG.ADDR_LINE_2_TXT,'')= COALESCE(CN.ADDR_LINE_2_TXT,'')
AND  COALESCE(STG.ADDR_LINE_3_TXT,'')= COALESCE(CN.ADDR_LINE_3_TXT,'')
AND  COALESCE(STG.CITY_NAME,'')= COALESCE(CN.CITY_NAME,'')
AND  COALESCE(STG.TERR_NAME,'')= COALESCE(CN.TERR_NAME,'')
AND  COALESCE(STG.POSTL_AREA_CODE,'')= COALESCE(CN.POSTL_AREA_CODE,'')
AND  COALESCE(STG.CNTRY_NAME,'')= COALESCE(CN.CNTRY_CODE,'')
AND OPT_TYPE_CODE='DU'

INNER JOIN $DATABASENAME.REGIS_PRSNA RP
ON 
CN.REGIS_PRSNA_ID=RP.REGIS_PRSNA_ID 

WHERE (STG.ADDR_LINE_1_TXT IS  NOT NULL 
OR STG.ADDR_LINE_2_TXT IS  NOT NULL 
OR STG.ADDR_LINE_3_TXT IS  NOT NULL 
OR STG.CITY_NAME   IS  NOT NULL 
OR STG.TERR_NAME IS  NOT NULL 
OR  STG.POSTL_AREA_CODE IS  NOT NULL
);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*****************************************************************************
OPT_OUT_PHL_LIST_DMA is a temporary table to consolidate the negative REGIS_PRSNA_IDs from 
REGIS_PRSNA_OPT_OUT_HIST to be checked for during wrapper processing for the DMA list.
******************************************************************************/

INSERT INTO $DATABASENAME.OPT_OUT_PHL_LIST_DMA
(
REGIS_PRSNA_ID
,MATCHD_REGIS_PRSNA_ID
,LEGAL_ENT_NBR
,DATA_SRCE_NBR
,E_OPT_OUT
,P_OPT_OUT
,A_OPT_OUT
,LOAD_ID
,OPT_OUT_DTTIME	      
,HIST_REGIS_PRSNA_ID
,CNTRY_CODE
,MKTNG_PGM_NBR
)
SELECT
RP.REGIS_PRSNA_ID
,RP.MATCHD_CNSMR_PRSNA_ID
,RP.LEGAL_ENT_NBR
,RP.DATA_SRCE_NBR
,'N'
,'N'
,CASE WHEN CN.REGIS_PRSNA_ID IS NOT NULL THEN 'Y' END
,STG.LOG_SOURCE_ID
,STG.OPT_TIME
,stg.regis_prsna_id
,'PHL'
,RP.MKTNG_PGM_NBR
FROM  $DATABASENAME.OPT_OUT_HIST STG
INNER JOIN
POSTL CN

ON  COALESCE(STG.ADDR_LINE_1_TXT,'')=  COALESCE(CN.ADDR_LINE_1_TXT,'')
AND  COALESCE(STG.ADDR_LINE_2_TXT,'')= COALESCE(CN.ADDR_LINE_2_TXT,'')
AND  COALESCE(STG.ADDR_LINE_3_TXT,'')= COALESCE(CN.ADDR_LINE_3_TXT,'')
AND  COALESCE(STG.CITY_NAME,'')= COALESCE(CN.CITY_NAME,'')
AND  COALESCE(STG.TERR_NAME,'')= COALESCE(CN.TERR_NAME,'')
AND  COALESCE(STG.POSTL_AREA_CODE,'')= COALESCE(CN.POSTL_AREA_CODE,'')
AND  COALESCE(STG.CNTRY_NAME,'')= COALESCE(CN.CNTRY_CODE,'')
AND OPT_TYPE_CODE='DM'

INNER JOIN $DATABASENAME.REGIS_PRSNA RP
ON 
CN.REGIS_PRSNA_ID=RP.REGIS_PRSNA_ID 

WHERE (STG.ADDR_LINE_1_TXT IS  NOT NULL 
OR STG.ADDR_LINE_2_TXT IS  NOT NULL 
OR STG.ADDR_LINE_3_TXT IS  NOT NULL 
OR STG.CITY_NAME   IS  NOT NULL 
OR STG.TERR_NAME IS  NOT NULL 
OR  STG.POSTL_AREA_CODE IS  NOT NULL
);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*****************************************************************************
OPT_OUT_PHL_LIST_SIDS is a temporary table to consolidate the negative REGIS_PRSNA_IDs from 
REGIS_PRSNA_OPT_OUT_HIST to be checked for during wrapper processing for the SIDS list.
******************************************************************************/

INSERT INTO $DATABASENAME.OPT_OUT_PHL_LIST_SIDS
(
REGIS_PRSNA_ID
,MATCHD_REGIS_PRSNA_ID
,LEGAL_ENT_NBR
,DATA_SRCE_NBR
,E_OPT_OUT
,P_OPT_OUT
,A_OPT_OUT
,LOAD_ID
,OPT_OUT_DTTIME	      
,HIST_REGIS_PRSNA_ID
,CNTRY_CODE
,MKTNG_PGM_NBR
,HSHLD_PRSNA_ID
)
SELECT
RP.REGIS_PRSNA_ID
,RP.MATCHD_CNSMR_PRSNA_ID
,RP.LEGAL_ENT_NBR
,RP.DATA_SRCE_NBR
,CASE WHEN CN.REGIS_PRSNA_ID IS NOT NULL THEN 'Y' END
,CASE WHEN CN.REGIS_PRSNA_ID IS NOT NULL THEN 'Y' END
,CASE WHEN CN.REGIS_PRSNA_ID IS NOT NULL THEN 'Y' END
,STG.LOG_SOURCE_ID
,STG.OPT_TIME
,stg.regis_prsna_id
,'PHL'
,RP.MKTNG_PGM_NBR
,MCP.HSHLD_PRSNA_ID
FROM  $DATABASENAME.OPT_OUT_HIST STG
INNER JOIN
POSTL  CN

ON  COALESCE(STG.ADDR_LINE_1_TXT,'')=  COALESCE(CN.ADDR_LINE_1_TXT,'')
AND  COALESCE(STG.ADDR_LINE_2_TXT,'')= COALESCE(CN.ADDR_LINE_2_TXT,'')
AND  COALESCE(STG.ADDR_LINE_3_TXT,'')= COALESCE(CN.ADDR_LINE_3_TXT,'')
AND  COALESCE(STG.CITY_NAME,'')= COALESCE(CN.CITY_NAME,'')
AND  COALESCE(STG.TERR_NAME,'')= COALESCE(CN.TERR_NAME,'')
AND  COALESCE(STG.POSTL_AREA_CODE,'')= COALESCE(CN.POSTL_AREA_CODE,'')
AND  COALESCE(STG.CNTRY_NAME,'')= COALESCE(CN.CNTRY_CODE,'')
AND OPT_TYPE_CODE='SU'

INNER JOIN $DATABASENAME.REGIS_PRSNA RP
ON 
CN.REGIS_PRSNA_ID=RP.REGIS_PRSNA_ID 

INNER JOIN $DATABASENAME.MATCHD_CNSMR_PRSNA MCP
ON RP.MATCHD_CNSMR_PRSNA_ID=MCP.MATCHD_CNSMR_PRSNA_ID

WHERE (STG.ADDR_LINE_1_TXT IS  NOT NULL 
OR STG.ADDR_LINE_2_TXT IS  NOT NULL 
OR STG.ADDR_LINE_3_TXT IS  NOT NULL 
OR STG.CITY_NAME   IS  NOT NULL 
OR STG.TERR_NAME IS  NOT NULL 
OR  STG.POSTL_AREA_CODE IS  NOT NULL
);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS OPT_OUT_PHL_LIST_DCS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS OPT_OUT_PHL_LIST_DMA;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS OPT_OUT_PHL_LIST_SIDS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
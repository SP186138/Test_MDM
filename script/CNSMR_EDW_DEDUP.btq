/***********************************************************************************************************
SCRIPT:               CNSMR_EDW_DEDUP.BTEQ 
DESCRIPTION:          THIS SCRIPT LOADS EDW TABLES -- This scripts takes data friom trillium output tables and id's dups based on
                                                      ref regis key and assigns new id's for regis_prsna_id , matched & household.
DEPENDENCY:           
INPUT:                TRILLIUM OUTPUT CNTRY TABLES
OUTPUT:               EDW
ERRORS:
SPECIAL INSTRUCTIONS:

CHANGE LOG:
VERSION              DATE                 AUTHOR                          CHANGES
1.00                 10/31/2011           TERADATA                        INITIAL VERSION
4.00                 03/26/2012           TERADATA                        1. UPDATE NATIONAL ID INTO REGIS PRSNA 
                                                                          FROM PRSNA TRT.
                                                                          2. ADD STATE VALIDATION FOR US
									  3. ADD OPT OUT MODULE
R2O                  05/11/2012           TERADATA                        REMOVE ERROR PROCESSING
4.1                  06/13/2012           TERADATA                        MODULARIZE AND TUNING        
5.0                  02/06/2013           TERADATA                        RELEASE 5.0
                                                                          1. ADDITION OF NEW ATTRIBUTES 
5.1                  04/08/2014           TERADATA                        RELEASE 5.1
									  Move vulgar name validation to wrapper
									  and corresponding changes
5.1.1                06/27/2014           TERADATA                        1. Release 5.1.1 									  
5.1.1                06/27/2014           TERADATA                        1. Release 5.1.1 BR175
5.3                  02/09/2015           TERADATA	                  Release 5.3
                                                                          Database size improvement
5.4                  04/07/2015           TERADATA                        RELEASE 5.4
                                                                          Addition of new countries ISR,EGY,PAK,AFR
5.6                  11/16/2015           TERADATA                        RELEASE 5.6 BR362 
5.7                  03/24/2016           TERADATA                        Release 5.7 - external standardization
5.8                  08/23/2016           TERADATA                        Release 5.8 - BR#413
5.8.1				12/01/2016			TERADATA					      Release 5.8.1 - Added validation to check the consumer regis date is earlier than regis last modified date
***********************************************************************************************************/
.logon $TDPID/$TDUSER,$TDPWD      
                                  
                                  
.SET ERROROUT STDOUT;             
.SET SESSION CHARSET 'UTF8';      
.SET ERRORLEVEL (3807,3624) SEVERITY 0;   
                                  SET QUERY_BAND = 'WorkFlow=MDM;Interface=i2MDM;Country=$CNTRY;Stage=Wrapper;Step=Step02;' FOR SESSION; 
                                  
DATABASE $DATABASENAME;           


/* Copy incoming record to temp file. This will preserve incoming data in case of a re-run */

DEL FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INS TRILLIUM_OUTPUT1_$CNTRY_TEMP
(	   MKTNG_PGM_NBR
      ,REGIS_CNSMR_ID_VAL
      ,DR_ALIAS_CONTACT
      ,DR_FIRST_NAME
      ,DR_MIDDLE_NAME
      ,DR_LAST_NAME
      ,DR_MRMRS
      ,DR_NAME_GENER
      ,DR_NAME_SUFFIX
      ,DR_NAME_GENDER
      ,DR_COUNTRY_NAME
      ,DR_REGION_NAME
      ,DR_CITY_NAME
      ,DR_POSTAL_CODE
      ,DR_STREET_NAME
      ,DR_HOUSE_NUMBER1
      ,DR_HOUSE_NUMBER2
      ,DR_POBOX_NUMBER
      ,DR_ADDRESS
      ,DR_ADDRESS2
      ,DR_ADDRESS3
      ,CLEANSED_PHONE_1
      ,CLEANSED_EMAIL_1
      ,PR_REV_GROUP
      ,GOUT_MATCH_LEVEL
      ,WINDOW_KEY_01
      ,REFERENCE_HOUSEHOLD_ID
      ,REFERENCE_LEGALENTITYKEY
      ,REFERENCE_REGISTRATIONKEY
      ,LEGAL_ENT_NBR
      ,BRTH_DATE
      ,LANG_CODE
      ,CNSMR_USER_NAME
      ,STATUS
      ,FULL_NAME
      ,DPEND_NAME
      ,PET_NAME
      ,PR_NAME_FORM_01
      ,DR_ALIAS_ACCOUNT
      ,REFERENCE_MATCHED_LEV1_PATTERN
      ,REFERENCE_MATCHED_LEV2_PATTERN
      ,DR_BUSINESS_NAME
      ,EMAIL_IND
      ,REGIS_DATE
      ,RECORD_IND
      ,RECENT_IND
      ,REGIS_PRSNA_ID
      ,HH_FLAG
      ,LE_FLAG
      ,SYS_TARGET_ID
      ,SYS_AUTH_ID
      ,SYS_SOURCE
      ,SYS_CREATED_BY
      ,SYS_CREATION_DATE
      ,SYS_ENT_STATE
      ,SYS_LAST_MODIFIED_BY
      ,SYS_LAST_MODIFIED_DATE
      ,SYS_NC_TYPE
      ,SYS_ERR_CODE
      ,SYS_ERR_SVRTY
      ,ADDRESS_CONTACT
      ,ADDRESS_SUBSCRPTN
      ,PHONE_CONTACT
      ,PHONE_SUBSCRPTN
      ,EMAIL_CONTACT
      ,EMAIL_SUBSCRPTN
      ,NATIONAL_ID_NBR
      ,GL_ACCURACY
      ,GL_MATCH_FLAG
      ,GL_LATITUDE
      ,GL_LONGITUDE
      ,DR_CLEANSE_LEVEL
	  )
	  SEL
	  MKTNG_PGM_NBR
      ,REGIS_CNSMR_ID_VAL
      ,DR_ALIAS_CONTACT
      ,DR_FIRST_NAME
      ,DR_MIDDLE_NAME
      ,DR_LAST_NAME
      ,DR_MRMRS
      ,DR_NAME_GENER
      ,DR_NAME_SUFFIX
      ,DR_NAME_GENDER
      ,DR_COUNTRY_NAME
      ,DR_REGION_NAME
      ,DR_CITY_NAME
      ,DR_POSTAL_CODE
      ,DR_STREET_NAME
      ,DR_HOUSE_NUMBER1
      ,DR_HOUSE_NUMBER2
      ,DR_POBOX_NUMBER
      ,DR_ADDRESS
      ,DR_ADDRESS2
      ,DR_ADDRESS3
      ,CLEANSED_PHONE_1
      ,CLEANSED_EMAIL_1
      ,PR_REV_GROUP
      ,GOUT_MATCH_LEVEL
      ,WINDOW_KEY_01
      ,REFERENCE_HOUSEHOLD_ID
      ,REFERENCE_LEGALENTITYKEY
      ,REFERENCE_REGISTRATIONKEY
      ,LEGAL_ENT_NBR
      ,BRTH_DATE
      ,LANG_CODE
      ,CNSMR_USER_NAME
      ,STATUS
      ,FULL_NAME
      ,DPEND_NAME
      ,PET_NAME
      ,PR_NAME_FORM_01
      ,DR_ALIAS_ACCOUNT
      ,REFERENCE_MATCHED_LEV1_PATTERN
      ,REFERENCE_MATCHED_LEV2_PATTERN
      ,DR_BUSINESS_NAME
      ,EMAIL_IND
      ,REGIS_DATE
      ,RECORD_IND
      ,RECENT_IND
      ,REGIS_PRSNA_ID
      ,HH_FLAG
      ,LE_FLAG
      ,SYS_TARGET_ID
      ,SYS_AUTH_ID
      ,SYS_SOURCE
      ,SYS_CREATED_BY
      ,SYS_CREATION_DATE
      ,SYS_ENT_STATE
      ,SYS_LAST_MODIFIED_BY
      ,SYS_LAST_MODIFIED_DATE
      ,SYS_NC_TYPE
      ,SYS_ERR_CODE
      ,SYS_ERR_SVRTY
      ,ADDRESS_CONTACT
      ,ADDRESS_SUBSCRPTN
      ,PHONE_CONTACT
      ,PHONE_SUBSCRPTN
      ,EMAIL_CONTACT
      ,EMAIL_SUBSCRPTN
      ,NATIONAL_ID_NBR
      ,GL_ACCURACY
      ,GL_MATCH_FLAG
      ,GL_LATITUDE
      ,GL_LONGITUDE
      ,DR_CLEANSE_LEVEL
	  FROM TRILLIUM_OUTPUT1_$CNTRY;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

.LABEL PROCESS

INSERT INTO REGIS_PRSNA_TEMP
(MKTNG_PGM_NBR ,LEGAL_ENT_NBR,REGIS_CNSMR_ID_VAL,SYS_TARGET_ID,REGIS_PRSNA_ID)
SELECT
MKTNG_PGM_NBR ,LEGAL_ENT_NBR,REGIS_CNSMR_ID_VAL,SYS_TARGET_ID,REGIS_PRSNA_ID
FROM REGIS_PRSNA
WHERE MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP SET RECORD_IND='Y'    ---  records matching REGIS_PRSNA
WHERE EXISTS
(SELECT
1
FROM
REGIS_PRSNA_TEMP
WHERE
LEGAL_ENT_NBR = TRILLIUM_OUTPUT1_$CNTRY_TEMP.LEGAL_ENT_NBR
AND MKTNG_PGM_NBR = TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR   
AND REGIS_CNSMR_ID_VAL = TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL
AND SYS_TARGET_ID = TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_TARGET_ID
);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/* Identified the most recent record to be used since we are processing multiple loads at the same time */

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
FROM
(
SELECT * FROM
(
SELECT 
 LEGAL_ENT_NBR
,MKTNG_PGM_NBR   
,REGIS_CNSMR_ID_VAL
,REGIS_DATE
,SYS_SOURCE
,SYS_CREATION_DATE
,SYS_NC_TYPE
,SYS_TARGET_ID
,RANK() OVER (PARTITION BY LEGAL_ENT_NBR
,MKTNG_PGM_NBR   
,REGIS_CNSMR_ID_VAL 
,SYS_TARGET_ID
ORDER BY REGIS_DATE DESC 
,SYS_SOURCE DESC
,SYS_CREATION_DATE DESC
,SYS_NC_TYPE DESC
) AS RNK
GROUP BY LEGAL_ENT_NBR
,MKTNG_PGM_NBR   
,REGIS_CNSMR_ID_VAL
,REGIS_DATE
,SYS_SOURCE
,SYS_CREATION_DATE
,SYS_NC_TYPE
,SYS_TARGET_ID
FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP
) B
WHERE RNK = 1
) B

SET RECENT_IND = 'Y'
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_DATE=B.REGIS_DATE
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_CREATION_DATE=B.SYS_CREATION_DATE
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_NC_TYPE=B.SYS_NC_TYPE
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_SOURCE=B.SYS_SOURCE
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_TARGET_ID=B.SYS_TARGET_ID
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

-- COLLECT STATS ON TRILLIUM_OUTPUT1_$CNTRY_TEMP;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

--DEL FROM TRILLIUM_MDM_REFERENCE where CNTRY_CODE = '$CNTRY';
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


/* Table where new Id's are generated 
   If trillium finds a match on EDW, trillium will populate these id's from EDW
   
   If no match is found, trillium generates id's prefixed with HH, LE, RG 
   Using these prefixes, we are able to identify the records that do not have a match. 
   We need to generate Id's based on the max id in edw and assign to these records
   Or we could use the identity column function instead */ 
   
UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
FROM 
(SELECT A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
A.LEGAL_ENT_NBR,
A.SYS_SOURCE,
A.SYS_TARGET_ID,
A.REFERENCE_HOUSEHOLD_ID,
A.REFERENCE_LEGALENTITYKEY,
MIN(REFERENCE_REGISTRATIONKEY) REFERENCE_REGISTRATIONKEY
FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP A
WHERE (A.MKTNG_PGM_NBR,A.REGIS_CNSMR_ID_VAL,A.LEGAL_ENT_NBR,A.SYS_SOURCE,
A.SYS_TARGET_ID,A.REFERENCE_HOUSEHOLD_ID
,A.REFERENCE_LEGALENTITYKEY)
IN 
(SELECT A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
A.LEGAL_ENT_NBR,
A.SYS_SOURCE,
A.SYS_TARGET_ID,
A.REFERENCE_HOUSEHOLD_ID,
MIN(A.REFERENCE_LEGALENTITYKEY) REFERENCE_LEGALENTITYKEY
FROM
TRILLIUM_OUTPUT1_$CNTRY_TEMP A
WHERE (A.MKTNG_PGM_NBR,A.REGIS_CNSMR_ID_VAL,A.LEGAL_ENT_NBR,A.SYS_SOURCE,
A.SYS_TARGET_ID,A.REFERENCE_HOUSEHOLD_ID)
IN (SELECT A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
A.LEGAL_ENT_NBR,
A.SYS_SOURCE,
A.SYS_TARGET_ID,
MIN(A.REFERENCE_HOUSEHOLD_ID)
FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP A
GROUP BY 1,2,3,4,5)
GROUP BY 1,2,3,4,5,6
) 
GROUP BY 1,2,3,4,5,6,7
) B
SET REFERENCE_HOUSEHOLD_ID = B.REFERENCE_HOUSEHOLD_ID
,REFERENCE_LEGALENTITYKEY = B.REFERENCE_LEGALENTITYKEY
,REFERENCE_REGISTRATIONKEY = B.REFERENCE_REGISTRATIONKEY
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL = B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_SOURCE = B.SYS_SOURCE
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_TARGET_ID = B.SYS_TARGET_ID
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.RECENT_IND = 'Y'
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;   

INSERT TRILLIUM_MDM_REFERENCE_RG 
(
 REFERENCE_REGISTRATIONKEY     
,SYS_CREATION_DATE             
,SYS_ENT_STATE      
,SYS_LAST_MODIFIED_BY
,SYS_SOURCE
,SYS_TARGET_ID
)
SELECT DISTINCT
 REFERENCE_REGISTRATIONKEY     
,SYS_CREATION_DATE             
,'ACTIVE'           
,CASE WHEN SUBSTR(TRIM(REFERENCE_REGISTRATIONKEY),1,2)='RG'
      THEN 'TRILLIUM'
  END AS SYS_LAST_MODIFIED_BY1
,SYS_SOURCE
,MKTNG_PGM_NBR
FROM
TRILLIUM_OUTPUT1_$CNTRY_TEMP A
WHERE SYS_LAST_MODIFIED_BY1 = 'TRILLIUM'
AND RECENT_IND = 'Y'
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT TRILLIUM_MDM_REFERENCE_LE
(
 REFERENCE_LEGALENTITYKEY      
,SYS_CREATION_DATE             
,SYS_ENT_STATE    
,SYS_LAST_MODIFIED_BY
,SYS_SOURCE
,SYS_TARGET_ID
)
SELECT DISTINCT
REFERENCE_LEGALENTITYKEY      
,SYS_CREATION_DATE             
,'ACTIVE'     
,CASE WHEN SUBSTR(TRIM(REFERENCE_LEGALENTITYKEY),1,2)='LE'
      THEN 'TRILLIUM'
  END AS SYS_LAST_MODIFIED_BY1
,SYS_SOURCE
,LEGAL_ENT_NBR
FROM
TRILLIUM_OUTPUT1_$CNTRY_TEMP A
WHERE SYS_LAST_MODIFIED_BY1 = 'TRILLIUM'
AND RECENT_IND = 'Y'
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT TRILLIUM_MDM_REFERENCE_HH
(
REFERENCE_HOUSEHOLD_ID        
,SYS_CREATION_DATE             
,SYS_ENT_STATE       
,SYS_LAST_MODIFIED_BY
,SYS_SOURCE
,SYS_TARGET_ID
)
SELECT DISTINCT
 REFERENCE_HOUSEHOLD_ID        
,SYS_CREATION_DATE             
,'ACTIVE'          
,CASE WHEN SUBSTR(TRIM(REFERENCE_HOUSEHOLD_ID),1,2)='HH'
      THEN 'TRILLIUM'
  END AS SYS_LAST_MODIFIED_BY1
,SYS_SOURCE
,LEGAL_ENT_NBR
FROM
TRILLIUM_OUTPUT1_$CNTRY_TEMP A
WHERE SYS_LAST_MODIFIED_BY1 = 'TRILLIUM'
AND RECENT_IND = 'Y'
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
/*COLLECT STATS TRILLIUM_MDM_REFERENCE_HH;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS TRILLIUM_MDM_REFERENCE_RG;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS TRILLIUM_MDM_REFERENCE_LE;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
*/

/* Taking the newly generated Id's and updating the TRILLIUM OUTPUT table */

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
FROM 
(SELECT A.REFERENCE_HOUSEHOLD_ID,A.SYS_TARGET_ID,MAX(NEW_HOUSEHOLD_ID) NEW_HOUSEHOLD_ID
FROM
TRILLIUM_MDM_REFERENCE_HH A
INNER JOIN TRILLIUM_OUTPUT1_$CNTRY_TEMP B
ON A.REFERENCE_HOUSEHOLD_ID=B.REFERENCE_HOUSEHOLD_ID
AND A.SYS_SOURCE=B.SYS_SOURCE
GROUP BY 1,2) B
SET REFERENCE_HOUSEHOLD_ID = B.NEW_HOUSEHOLD_ID
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.REFERENCE_HOUSEHOLD_ID = B.REFERENCE_HOUSEHOLD_ID
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.LEGAL_ENT_NBR = B.SYS_TARGET_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
FROM 
(SELECT A.REFERENCE_LEGALENTITYKEY,A.SYS_TARGET_ID,MAX(NEW_LEGAL_ENTITY_KEY) NEW_LEGAL_ENTITY_KEY
FROM
TRILLIUM_MDM_REFERENCE_LE A
INNER JOIN TRILLIUM_OUTPUT1_$CNTRY_TEMP B
ON A.REFERENCE_LEGALENTITYKEY=B.REFERENCE_LEGALENTITYKEY
AND A.SYS_SOURCE=B.SYS_SOURCE
GROUP BY 1,2) B
SET REFERENCE_LEGALENTITYKEY = B.NEW_LEGAL_ENTITY_KEY
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.REFERENCE_LEGALENTITYKEY = B.REFERENCE_LEGALENTITYKEY
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.LEGAL_ENT_NBR = B.SYS_TARGET_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
FROM 
(SELECT A.REFERENCE_REGISTRATIONKEY,A.SYS_TARGET_ID,MAX(NEW_REGISTRATION_KEY) NEW_REGISTRATION_KEY
FROM TRILLIUM_MDM_REFERENCE_RG A
INNER JOIN TRILLIUM_OUTPUT1_$CNTRY_TEMP B
ON A.REFERENCE_REGISTRATIONKEY=B.REFERENCE_REGISTRATIONKEY
AND A.SYS_SOURCE=B.SYS_SOURCE
GROUP BY 1,2) B
SET REFERENCE_REGISTRATIONKEY = B.NEW_REGISTRATION_KEY
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.REFERENCE_REGISTRATIONKEY = B.REFERENCE_REGISTRATIONKEY
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR = B.SYS_TARGET_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
SET REFERENCE_HOUSEHOLD_ID = CASE WHEN REFERENCE_HOUSEHOLD_ID LIKE '%HH%'
                                  THEN SUBSTR(REFERENCE_HOUSEHOLD_ID,1,INDEX(REFERENCE_HOUSEHOLD_ID,'HH')-1)||'999999'||SUBSTR(REFERENCE_HOUSEHOLD_ID,INDEX(REFERENCE_HOUSEHOLD_ID,'HH')+2)
                                  WHEN REFERENCE_HOUSEHOLD_ID LIKE '%HH'
                                  THEN SUBSTR(REFERENCE_HOUSEHOLD_ID,1,INDEX(REFERENCE_HOUSEHOLD_ID,'HH')-1)||'999999'
                                  ELSE REFERENCE_HOUSEHOLD_ID
                              END
,REFERENCE_LEGALENTITYKEY = CASE WHEN REFERENCE_LEGALENTITYKEY LIKE '%LE%'
                                  THEN SUBSTR(REFERENCE_LEGALENTITYKEY,1,INDEX(REFERENCE_LEGALENTITYKEY,'LE')-1)||'999999'||SUBSTR(REFERENCE_LEGALENTITYKEY,INDEX(REFERENCE_LEGALENTITYKEY,'LE')+2)
                                  WHEN REFERENCE_LEGALENTITYKEY LIKE '%LE'
                                  THEN SUBSTR(REFERENCE_LEGALENTITYKEY,1,INDEX(REFERENCE_LEGALENTITYKEY,'LE')-1)||'999999'
                                  ELSE REFERENCE_LEGALENTITYKEY
                              END
,REFERENCE_REGISTRATIONKEY = CASE WHEN REFERENCE_REGISTRATIONKEY LIKE '%RG%'
                                  THEN SUBSTR(REFERENCE_REGISTRATIONKEY,1,INDEX(REFERENCE_REGISTRATIONKEY,'RG')-1)||'999999'||SUBSTR(REFERENCE_REGISTRATIONKEY,INDEX(REFERENCE_REGISTRATIONKEY,'RG')+2)
                                  WHEN REFERENCE_REGISTRATIONKEY LIKE '%RG'
                                  THEN SUBSTR(REFERENCE_REGISTRATIONKEY,1,INDEX(REFERENCE_REGISTRATIONKEY,'RG')-1)||'999999'
                                  ELSE REFERENCE_REGISTRATIONKEY
                              END
;                              
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
 
UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
SET HOUSEHOLD_ID = CAST(TRIM(REFERENCE_HOUSEHOLD_ID) AS INTEGER)
,LEGALENTITYKEY = CAST(TRIM(REFERENCE_LEGALENTITYKEY) AS INTEGER)
,REGISTRATIONKEY = CAST(TRIM(REFERENCE_REGISTRATIONKEY) AS INTEGER)
WHERE RECENT_IND='Y';
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
 
COLLECT STATS  TRILLIUM_OUTPUT1_$CNTRY_TEMP
COLUMN HOUSEHOLD_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS  TRILLIUM_OUTPUT1_$CNTRY_TEMP
COLUMN LEGALENTITYKEY;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS  TRILLIUM_OUTPUT1_$CNTRY_TEMP
COLUMN REGISTRATIONKEY;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS  TRILLIUM_OUTPUT1_$CNTRY_TEMP
COLUMN (LEGAL_ENT_NBR ,HOUSEHOLD_ID);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS  TRILLIUM_OUTPUT1_$CNTRY_TEMP
COLUMN (LEGAL_ENT_NBR ,LEGALENTITYKEY);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS  TRILLIUM_OUTPUT1_$CNTRY_TEMP
COLUMN (LEGALENTITYKEY,ADDRESS_CONTACT);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/* Insert duplicate records into this table where the duplicate is in EDW
based on
A.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.REFERENCE_REGISTRATIONKEY=TRIM(B.REGIS_PRSNA_ID)
AND B.PRSNA_STATUS_CODE = 'AC'
*/

INS TRILLIUM_OUTPUT_DUP
(
  MKTNG_PGM_NBR
 ,REGIS_CNSMR_ID_VAL
 ,DR_ALIAS_CONTACT
 ,DR_FIRST_NAME
 ,DR_MIDDLE_NAME
 ,DR_LAST_NAME
 ,DR_MRMRS
 ,DR_NAME_GENER
 ,DR_NAME_SUFFIX
 ,DR_NAME_GENDER
 ,DR_COUNTRY_NAME
 ,DR_REGION_NAME
 ,DR_CITY_NAME
 ,DR_POSTAL_CODE
 ,DR_STREET_NAME
 ,DR_HOUSE_NUMBER1
 ,DR_HOUSE_NUMBER2
 ,DR_POBOX_NUMBER
 ,DR_ADDRESS
 ,DR_ADDRESS2
 ,DR_ADDRESS3
 ,CLEANSED_PHONE_1
 ,CLEANSED_EMAIL_1
 ,PR_REV_GROUP
 ,GOUT_MATCH_LEVEL
 ,WINDOW_KEY_01
 ,REFERENCE_HOUSEHOLD_ID
 ,REFERENCE_LEGALENTITYKEY
 ,REFERENCE_REGISTRATIONKEY
 ,LEGAL_ENT_NBR
 ,BRTH_DATE
 ,LANG_CODE
 ,CNSMR_USER_NAME
 ,STATUS
 ,FULL_NAME
 ,DPEND_NAME
 ,PET_NAME
 ,PR_NAME_FORM_01
 ,DR_ALIAS_ACCOUNT
 ,REFERENCE_MATCHED_LEV1_PATTERN
 ,REFERENCE_MATCHED_LEV2_PATTERN
 ,DR_BUSINESS_NAME
 ,EMAIL_IND
 ,REGIS_DATE
 ,RECORD_IND
 ,RECENT_IND
 ,SYS_TARGET_ID
 ,SYS_AUTH_ID
 ,SYS_SOURCE
 ,SYS_CREATED_BY
 ,SYS_CREATION_DATE
 ,SYS_ENT_STATE
 ,SYS_LAST_MODIFIED_BY
 ,SYS_LAST_MODIFIED_DATE
 ,SYS_NC_TYPE
 ,SYS_ERR_CODE
 ,SYS_ERR_SVRTY
)
SEL
  A.MKTNG_PGM_NBR
 ,A.REGIS_CNSMR_ID_VAL
 ,DR_ALIAS_CONTACT
 ,DR_FIRST_NAME
 ,DR_MIDDLE_NAME
 ,DR_LAST_NAME
 ,DR_MRMRS
 ,DR_NAME_GENER
 ,DR_NAME_SUFFIX
 ,DR_NAME_GENDER
 ,DR_COUNTRY_NAME
 ,DR_REGION_NAME
 ,DR_CITY_NAME
 ,DR_POSTAL_CODE
 ,DR_STREET_NAME
 ,DR_HOUSE_NUMBER1
 ,DR_HOUSE_NUMBER2
 ,DR_POBOX_NUMBER
 ,DR_ADDRESS
 ,DR_ADDRESS2
 ,DR_ADDRESS3
 ,CLEANSED_PHONE_1
 ,CLEANSED_EMAIL_1
 ,PR_REV_GROUP
 ,GOUT_MATCH_LEVEL
 ,WINDOW_KEY_01
 ,REFERENCE_HOUSEHOLD_ID
 ,REFERENCE_LEGALENTITYKEY
 ,REFERENCE_REGISTRATIONKEY
 ,A.LEGAL_ENT_NBR
 ,A.BRTH_DATE
 ,A.LANG_CODE
 ,A.CNSMR_USER_NAME
 ,STATUS
 ,A.FULL_NAME
 ,DPEND_NAME
 ,PET_NAME
 ,PR_NAME_FORM_01
 ,DR_ALIAS_ACCOUNT
 ,REFERENCE_MATCHED_LEV1_PATTERN
 ,REFERENCE_MATCHED_LEV2_PATTERN
 ,DR_BUSINESS_NAME
 ,EMAIL_IND
 ,A.REGIS_DATE
 ,RECORD_IND
 ,RECENT_IND
 ,A.SYS_TARGET_ID
 ,A.SYS_AUTH_ID
 ,A.SYS_SOURCE
 ,A.SYS_CREATED_BY
 ,CAST(CAST(CURRENT_TIMESTAMP AS TIMESTAMP(6)) AS VARCHAR(19))
 ,A.SYS_ENT_STATE
 ,A.SYS_LAST_MODIFIED_BY
 ,A.SYS_LAST_MODIFIED_DATE
 ,A.SYS_NC_TYPE
 ,A.SYS_ERR_CODE
 ,A.SYS_ERR_SVRTY
 FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP A
 LEFT OUTER JOIN REGIS_PRSNA B
 ON A.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.REGISTRATIONKEY=B.REGIS_PRSNA_ID
AND B.PRSNA_STATUS_CODE = 'AC'
WHERE A.RECENT_IND = 'Y'
AND A.REGIS_CNSMR_ID_VAL <> B.REGIS_CNSMR_ID_VAL
GROUP BY 1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,36,37,38,39,40,
41,42,43,44,45,46,47,48,49,50,
51,52,53,54,55,56,57
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

-- Insert duplicate records into this table where the duplicate is NOT in EDW but in the incoming file 

INS TRILLIUM_OUTPUT_DUP
(
  MKTNG_PGM_NBR
 ,REGIS_CNSMR_ID_VAL
 ,DR_ALIAS_CONTACT
 ,DR_FIRST_NAME
 ,DR_MIDDLE_NAME
 ,DR_LAST_NAME
 ,DR_MRMRS
 ,DR_NAME_GENER
 ,DR_NAME_SUFFIX
 ,DR_NAME_GENDER
 ,DR_COUNTRY_NAME
 ,DR_REGION_NAME
 ,DR_CITY_NAME
 ,DR_POSTAL_CODE
 ,DR_STREET_NAME
 ,DR_HOUSE_NUMBER1
 ,DR_HOUSE_NUMBER2
 ,DR_POBOX_NUMBER
 ,DR_ADDRESS
 ,DR_ADDRESS2
 ,DR_ADDRESS3
 ,CLEANSED_PHONE_1
 ,CLEANSED_EMAIL_1
 ,PR_REV_GROUP
 ,GOUT_MATCH_LEVEL
 ,WINDOW_KEY_01
 ,REFERENCE_HOUSEHOLD_ID
 ,REFERENCE_LEGALENTITYKEY
 ,REFERENCE_REGISTRATIONKEY
 ,LEGAL_ENT_NBR
 ,BRTH_DATE
 ,LANG_CODE
 ,CNSMR_USER_NAME
 ,STATUS
 ,FULL_NAME
 ,DPEND_NAME
 ,PET_NAME
 ,PR_NAME_FORM_01
 ,DR_ALIAS_ACCOUNT
 ,REFERENCE_MATCHED_LEV1_PATTERN
 ,REFERENCE_MATCHED_LEV2_PATTERN
 ,DR_BUSINESS_NAME
 ,EMAIL_IND
 ,REGIS_DATE
 ,RECORD_IND
 ,RECENT_IND
 ,SYS_TARGET_ID
 ,SYS_AUTH_ID
 ,SYS_SOURCE
 ,SYS_CREATED_BY
 ,SYS_CREATION_DATE
 ,SYS_ENT_STATE
 ,SYS_LAST_MODIFIED_BY
 ,SYS_LAST_MODIFIED_DATE
 ,SYS_NC_TYPE
 ,SYS_ERR_CODE
 ,SYS_ERR_SVRTY
)
--SEL * FROM (
SEL DISTINCT
  A.MKTNG_PGM_NBR
 ,A.REGIS_CNSMR_ID_VAL
 ,DR_ALIAS_CONTACT
 ,DR_FIRST_NAME
 ,DR_MIDDLE_NAME
 ,DR_LAST_NAME
 ,DR_MRMRS
 ,DR_NAME_GENER
 ,DR_NAME_SUFFIX
 ,DR_NAME_GENDER
 ,DR_COUNTRY_NAME
 ,DR_REGION_NAME
 ,DR_CITY_NAME
 ,DR_POSTAL_CODE
 ,DR_STREET_NAME
 ,DR_HOUSE_NUMBER1
 ,DR_HOUSE_NUMBER2
 ,DR_POBOX_NUMBER
 ,DR_ADDRESS
 ,DR_ADDRESS2
 ,DR_ADDRESS3
 ,CLEANSED_PHONE_1
 ,CLEANSED_EMAIL_1
 ,PR_REV_GROUP
 ,GOUT_MATCH_LEVEL
 ,WINDOW_KEY_01
 ,REFERENCE_HOUSEHOLD_ID
 ,REFERENCE_LEGALENTITYKEY
 ,REFERENCE_REGISTRATIONKEY
 ,A.LEGAL_ENT_NBR
 ,A.BRTH_DATE
 ,A.LANG_CODE
 ,A.CNSMR_USER_NAME
 ,STATUS
 ,A.FULL_NAME
 ,DPEND_NAME
 ,PET_NAME
 ,PR_NAME_FORM_01
 ,DR_ALIAS_ACCOUNT
 ,REFERENCE_MATCHED_LEV1_PATTERN
 ,REFERENCE_MATCHED_LEV2_PATTERN
 ,DR_BUSINESS_NAME
 ,EMAIL_IND
 ,A.REGIS_DATE
 ,RECORD_IND
 ,RECENT_IND
 ,A.SYS_TARGET_ID
 ,A.SYS_AUTH_ID
 ,A.SYS_SOURCE
 ,A.SYS_CREATED_BY
 ,CAST(CAST(CURRENT_TIMESTAMP AS TIMESTAMP(6)) AS VARCHAR(19)) SYS_CREATION_DATE
 ,A.SYS_ENT_STATE
 ,A.SYS_LAST_MODIFIED_BY
 ,A.SYS_LAST_MODIFIED_DATE
 ,A.SYS_NC_TYPE
 ,A.SYS_ERR_CODE
 ,A.SYS_ERR_SVRTY
 FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP A
 WHERE A.RECENT_IND = 'Y'
 
 QUALIFY RANK() OVER (PARTITION BY REFERENCE_REGISTRATIONKEY
 ORDER BY A.REGIS_DATE DESC
 ,A.REGIS_CNSMR_ID_VAL DESC
 ,A.SYS_CREATION_DATE DESC
 ,A.SYS_NC_TYPE DESC
) <> 1
/*)  x
WHERE 
MKTNG_PGM_NBR IS NOT NULL
AND REGIS_CNSMR_ID_VAL IS NOT NULL
AND REGIS_DATE IS NOT NULL
AND WINDOW_KEY_01 IS NOT NULL
*/
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
/* retain same regis_prsna_id where the consumer already exists */

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
FROM REGIS_PRSNA_TEMP B
SET REGIS_PRSNA_ID = B.REGIS_PRSNA_ID
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_TARGET_ID=B.SYS_TARGET_ID
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/* Insert duplicate records into this table where the duplicate is in EDW
based on
LEFT OUTER JOIN REGIS_PRSNA B
   ON A.REFERENCE_REGISTRATIONKEY = TRIM(B.REGIS_PRSNA_ID)
  AND A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
  AND A.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR
 LEFT OUTER JOIN (SELECT MATCHD_CNSMR_PRSNA_ID,LEGAL_ENT_NBR FROM MATCHD_CNSMR_PRSNA 
 GROUP BY 1,2) C
   ON A.REFERENCE_LEGALENTITYKEY = TRIM(C.MATCHD_CNSMR_PRSNA_ID)
  AND A.LEGAL_ENT_NBR = C.LEGAL_ENT_NBR
 LEFT OUTER JOIN (SELECT HSHLD_PRSNA_ID,LEGAL_ENT_NBR FROM HSHLD_PRSNA
 GROUP BY 1,2) D
   ON A.REFERENCE_HOUSEHOLD_ID = TRIM(D.HSHLD_PRSNA_ID)
  AND A.LEGAL_ENT_NBR = D.LEGAL_ENT_NBR
*/

INS TRILLIUM_OUTPUT_DUP
(
  MKTNG_PGM_NBR
 ,REGIS_CNSMR_ID_VAL
 ,DR_ALIAS_CONTACT
 ,DR_FIRST_NAME
 ,DR_MIDDLE_NAME
 ,DR_LAST_NAME
 ,DR_MRMRS
 ,DR_NAME_GENER
 ,DR_NAME_SUFFIX
 ,DR_NAME_GENDER
 ,DR_COUNTRY_NAME
 ,DR_REGION_NAME
 ,DR_CITY_NAME
 ,DR_POSTAL_CODE
 ,DR_STREET_NAME
 ,DR_HOUSE_NUMBER1
 ,DR_HOUSE_NUMBER2
 ,DR_POBOX_NUMBER
 ,DR_ADDRESS
 ,DR_ADDRESS2
 ,DR_ADDRESS3
 ,CLEANSED_PHONE_1
 ,CLEANSED_EMAIL_1
 ,PR_REV_GROUP
 ,GOUT_MATCH_LEVEL
 ,WINDOW_KEY_01
 ,REFERENCE_HOUSEHOLD_ID
 ,REFERENCE_LEGALENTITYKEY
 ,REFERENCE_REGISTRATIONKEY
 ,LEGAL_ENT_NBR
 ,BRTH_DATE
 ,LANG_CODE
 ,CNSMR_USER_NAME
 ,STATUS  
 ,FULL_NAME
 ,DPEND_NAME
 ,PET_NAME
 ,PR_NAME_FORM_01
 ,DR_ALIAS_ACCOUNT
 ,REFERENCE_MATCHED_LEV1_PATTERN
 ,REFERENCE_MATCHED_LEV2_PATTERN
 ,DR_BUSINESS_NAME
 ,EMAIL_IND
 ,REGIS_DATE
 ,RECORD_IND
 ,RECENT_IND
 ,DUP_REGIS_PRSNA_ID
 ,SYS_TARGET_ID
 ,SYS_AUTH_ID
 ,SYS_SOURCE
 ,SYS_CREATED_BY
 ,SYS_CREATION_DATE
 ,SYS_ENT_STATE
 ,SYS_LAST_MODIFIED_BY
 ,SYS_LAST_MODIFIED_DATE
 ,SYS_NC_TYPE
 ,SYS_ERR_CODE
 ,SYS_ERR_SVRTY
)
SEL
  A.MKTNG_PGM_NBR
 ,A.REGIS_CNSMR_ID_VAL
 ,DR_ALIAS_CONTACT
 ,DR_FIRST_NAME
 ,DR_MIDDLE_NAME
 ,DR_LAST_NAME
 ,DR_MRMRS
 ,DR_NAME_GENER
 ,DR_NAME_SUFFIX
 ,DR_NAME_GENDER
 ,DR_COUNTRY_NAME
 ,DR_REGION_NAME
 ,DR_CITY_NAME
 ,DR_POSTAL_CODE
 ,DR_STREET_NAME
 ,DR_HOUSE_NUMBER1
 ,DR_HOUSE_NUMBER2
 ,DR_POBOX_NUMBER
 ,DR_ADDRESS
 ,DR_ADDRESS2
 ,DR_ADDRESS3
 ,CLEANSED_PHONE_1
 ,CLEANSED_EMAIL_1
 ,PR_REV_GROUP
 ,GOUT_MATCH_LEVEL
 ,WINDOW_KEY_01
 ,REFERENCE_HOUSEHOLD_ID
 ,REFERENCE_LEGALENTITYKEY
 ,REFERENCE_REGISTRATIONKEY
 ,A.LEGAL_ENT_NBR
 ,A.BRTH_DATE
 ,A.LANG_CODE
 ,A.CNSMR_USER_NAME
 ,STATUS  
 ,A.FULL_NAME
 ,DPEND_NAME
 ,PET_NAME
 ,PR_NAME_FORM_01
 ,DR_ALIAS_ACCOUNT
 ,REFERENCE_MATCHED_LEV1_PATTERN
 ,REFERENCE_MATCHED_LEV2_PATTERN
 ,DR_BUSINESS_NAME
 ,EMAIL_IND
 ,A.REGIS_DATE
 ,RECORD_IND
 ,RECENT_IND
 ,TRIM(A.REGIS_PRSNA_ID)
 ,A.SYS_TARGET_ID
 ,A.SYS_AUTH_ID
 ,A.SYS_SOURCE
 ,A.SYS_CREATED_BY
 ,CAST(CAST(CURRENT_TIMESTAMP AS TIMESTAMP(6)) AS VARCHAR(19))
 ,A.SYS_ENT_STATE
 ,A.SYS_LAST_MODIFIED_BY
 ,A.SYS_LAST_MODIFIED_DATE
 ,A.SYS_NC_TYPE
 ,A.SYS_ERR_CODE
 ,A.SYS_ERR_SVRTY
 FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP A
 LEFT OUTER JOIN REGIS_PRSNA B
   ON A.REGISTRATIONKEY = B.REGIS_PRSNA_ID
  AND A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
  AND A.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR
 LEFT OUTER JOIN MATCHD_CNSMR_PRSNA C
   ON A.LEGALENTITYKEY = C.MATCHD_CNSMR_PRSNA_ID
  AND A.LEGAL_ENT_NBR = C.LEGAL_ENT_NBR
 LEFT OUTER JOIN HSHLD_PRSNA D
   ON A.HOUSEHOLD_ID = D.HSHLD_PRSNA_ID
  AND A.LEGAL_ENT_NBR = D.LEGAL_ENT_NBR
WHERE A.RECENT_IND = 'Y'
AND B.LEGAL_ENT_NBR IS NOT NULL
AND C.LEGAL_ENT_NBR IS NOT NULL
AND D.LEGAL_ENT_NBR IS NOT NULL
GROUP BY 1,2,3,4,5,6,7,8,9,10,
11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,
31,32,33,34,35,36,37,38,39,40,
41,42,43,44,45,46,47,48,49,50,
51,52,53,54,55,56,57,58
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*  check if incoming record has an older registration date than edw record */

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP 
FROM REGIS_PRSNA B
SET RECENT_IND = NULL
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_PRSNA_ID=B.REGIS_PRSNA_ID
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_TARGET_ID=B.SYS_TARGET_ID
AND CAST(TRIM(SUBSTR(TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_DATE,1,10)) AS DATE FORMAT 'YYYY-MM-DD') < CAST(B.REGIS_DATE AS DATE FORMAT 'MM/DD/YYYY')
; 
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/* 'RECORD NOT PROCESSED AS CONSUMER REGIS DATE IS EARLIER THAN REGIS DATE STORED ON EDW' */

INSERT INTO ERR_PRSNA_STG_CURR_LOAD
(
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
LOAD_ID,
SYS_NC_TYPE,
SYS_ERROR_TIME,
SYS_ERR_CODE
)
SELECT
A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
TRIM(A.SYS_SOURCE),
A.SYS_NC_TYPE,
CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)),
'RECORD NOT PROCESSED AS CONSUMER REGIS DATE IS EARLIER THAN REGIS DATE STORED ON EDW'
FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP A
INNER JOIN REGIS_PRSNA B
ON A.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND A.REGIS_PRSNA_ID=B.REGIS_PRSNA_ID
AND CAST(TRIM(SUBSTR(A.REGIS_DATE,1,10)) AS DATE FORMAT 'YYYY-MM-DD') < CAST(B.REGIS_DATE AS DATE FORMAT 'MM/DD/YYYY')
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*  check if incoming record has an older registration date than EDW record */

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP 
FROM REGIS_PRSNA B
SET RECENT_IND = NULL
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_PRSNA_ID=B.REGIS_PRSNA_ID
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_TARGET_ID=B.SYS_TARGET_ID
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_DATE < B.REGIS_LAST_MODIFIED_DATETM
; 

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


/* 'RECORD NOT PROCESSED AS CONSUMER REGIS DATE IS EARLIER THAN REGIS LAST MODIFIED DATE STORED ON EDW' */

INSERT INTO ERR_PRSNA_STG_CURR_LOAD
(
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
LOAD_ID,
SYS_NC_TYPE,
SYS_ERROR_TIME,
SYS_ERR_CODE
)
SELECT
A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
TRIM(A.SYS_SOURCE),
A.SYS_NC_TYPE,
CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)),
'RECORD NOT PROCESSED AS CONSUMER REGIS DATE IS EARLIER THAN REGIS LAST MODIFIED DATE STORED ON EDW'
FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP A
INNER JOIN REGIS_PRSNA B
ON A.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND A.REGIS_PRSNA_ID=B.REGIS_PRSNA_ID
AND A.REGIS_DATE < B.REGIS_LAST_MODIFIED_DATETM
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
-------------------------------------------------
/*commented in Release 5.8.2 starts*/
-------------------------------------------------
/*******************************************************************************************************************
MOVE TO ERR IF STATE IS NOT VALID FOR COUNTRY US
*******************************************************************************************************************/

----------------------------------------
--Start: Added :  Release 5.1.1 BR175 --
----------------------------------------

/*CREATE VOLATILE TABLE CNTRY_CODE AS
(SEL '$CNTRY' AS CNTRY_CODE) 
 WITH DATA 
 ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

SEL 1 FROM CNTRY_CODE WHERE CNTRY_CODE NOT IN ('USA');
.IF ACTIVITYCOUNT > 0 THEN .GOTO VULGARVALIDATION

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
FROM (SEL T.POSTL_AREA_CODE,T.CNTRY_CODE, R.TERR,C.CITY_NAME
FROM
POSTL_AREA T
INNER JOIN CITY C
ON T.CITY_CODE=C.CITY_CODE
AND T.TERR_CODE=C.TERR_CODE
INNER JOIN TERR_RECODE R
ON T.TERR_CODE=R.TERR_RECODE
AND T.CNTRY_CODE=R.CNTRY
WHERE T.CNTRY_CODE IN('USA')
GROUP BY 1,2,3,4
) T
SET DR_REGION_NAME=T.TERR
   ,DR_CITY_NAME=T.CITY_NAME
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP. DR_POSTAL_CODE = T.POSTL_AREA_CODE
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP. DR_COUNTRY_NAME = T.CNTRY_CODE
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP. DR_COUNTRY_NAME IN ('USA')
AND COALESCE(TRIM(DR_ADDRESS),TRIM(DR_ADDRESS2),TRIM(DR_ADDRESS3),'') = ''
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.DR_POSTAL_CODE NOT IN (SELECT POSTL_AREA_CODE FROM POSTL_AREA
WHERE CNTRY_CODE='USA'
AND POSTL_AREA_CODE IS NOT NULL
GROUP BY POSTL_AREA_CODE
HAVING COUNT(1)>1)
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

----------------------------------------
--End: Added :  Release 5.1.1 BR175 --
----------------------------------------

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
SET RECENT_IND = NULL
WHERE ((CASE WHEN TRIM(DR_REGION_NAME) = 'UNK' THEN 'USUNK' 
             ELSE TRIM('US-'||TRIM(DR_REGION_NAME))
         END 
        ) NOT IN 
(SELECT TERR_CODE FROM TERR
WHERE CNTRY_CODE IN ('$CNTRY'))
OR TRIM(DR_REGION_NAME) IS NULL
OR TRIM(DR_REGION_NAME) = '')
AND LEGAL_ENT_NBR IN 
(
SELECT
       AV_CODE
  FROM ATTRIBUTE_VALUES
 WHERE AV_DESCRIPTION='State Validation'
);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO ERR_PRSNA_STG_CURR_LOAD
(
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
LOAD_ID,
SYS_NC_TYPE,
SYS_ERROR_TIME,
SYS_ERR_CODE
)
SELECT DISTINCT
A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
TRIM(A.SYS_SOURCE),
A.SYS_NC_TYPE,
CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)),
'Not a valid state /province/territory'
FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP A
WHERE ((CASE WHEN TRIM(DR_REGION_NAME) = 'UNK' THEN 'USUNK' 
             ELSE TRIM('US-'||TRIM(DR_REGION_NAME))
         END 
        ) NOT IN 
(SELECT TERR_CODE FROM TERR
WHERE CNTRY_CODE IN ('$CNTRY'))
OR TRIM(DR_REGION_NAME) IS NULL
OR TRIM(DR_REGION_NAME) = '')
AND LEGAL_ENT_NBR IN 
(
SELECT
       AV_CODE
  FROM ATTRIBUTE_VALUES
 WHERE AV_DESCRIPTION='State Validation'
);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;*/

/*commented in Release 5.8.2 ends*/

.LABEL VULGARVALIDATION

/*********************************************************************************************
Inclusion of vulgar name processing
*********************************************************************************************/

CREATE VOLATILE TABLE V_PRSNA_STG AS
(
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE,
CASE WHEN SUBSTR(MP.MKTNG_PGM_NAME,INDEX(MP.MKTNG_PGM_NAME,'-')+1,3) IN ('IDN','THA','VNM')
THEN 'OTH'
WHEN MP.LEGAL_ENT_NBR=17
THEN 'LA'
WHEN MP.LEGAL_ENT_NBR=60
THEN 'ARB'
WHEN MP.LEGAL_ENT_NBR=46
THEN 'AFR'
ELSE SUBSTR(MP.MKTNG_PGM_NAME,INDEX(MP.MKTNG_PGM_NAME,'-')+1,3)
END CNTRY_CODE
FROM 
PRSNA_STG STG
INNER JOIN MKTNG_PGM MP
ON STG.MKTNG_PGM_NBR = MP.MKTNG_PGM_NBR
INNER JOIN TRILLIUM_OUTPUT1_$CNTRY_TEMP A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE
WHERE CAST(STG.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM  LOAD_INFO 
WHERE PROCESS_NAME = 'Wrapper' and cntry_name='$CNTRY' and status='In Progress')
GROUP BY 1,2,3,4
)
WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR ,REGIS_CNSMR_ID_VAL, SYS_SOURCE )
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP 
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE
FROM 
DPEND_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE (((DPEND_NAME,CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY'))
OR
(((A.CNTRY_CODE) IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND DPEND_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY'))
))
GROUP BY 1,2,3
) B
SET RECENT_IND = NULL
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_SOURCE=B.SYS_SOURCE
; 
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO ERR_PRSNA_STG_CURR_LOAD
(
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
LOAD_ID,
SYS_NC_TYPE,
SYS_ERROR_TIME,
SYS_ERR_CODE
)
SELECT
A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
TRIM(A.SYS_SOURCE),
A.RECORD_IND,
CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)),
'Vulgar Name found in registration data (DPEND)'
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE,STG.RECORD_IND
FROM 
DPEND_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE (((DPEND_NAME,CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY'))
OR
(((A.CNTRY_CODE) IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND DPEND_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY'))
))
GROUP BY 1,2,3,4
) A
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP 
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE
FROM 
PRSNA_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE ((A.CNTRY_CODE IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND (FULL_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')
OR GVN_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')
OR FAMLY_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')))
OR 
((FULL_NAME,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY')
OR (GVN_NAME,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY') 
OR (FAMLY_NAME,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY')))
GROUP BY 1,2,3
) B
SET RECENT_IND = NULL
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_SOURCE=B.SYS_SOURCE
; 
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO ERR_PRSNA_STG_CURR_LOAD
(
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
LOAD_ID,
SYS_NC_TYPE,
SYS_ERROR_TIME,
SYS_ERR_CODE
)
SELECT
A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
TRIM(A.SYS_SOURCE),
A.RECORD_IND,
CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)),
'Vulgar Name found in registration data (PRSNA)'
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE,STG.RECORD_IND
FROM 
PRSNA_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE ((A.CNTRY_CODE IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND (FULL_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')
OR GVN_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')
OR FAMLY_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')))
OR 
((FULL_NAME,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY')
OR (GVN_NAME,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY') 
OR (FAMLY_NAME,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY')))
GROUP BY 1,2,3,4
) A
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP 
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE
FROM 
PRSNA_POSTL_ADDR_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE (((GUARDN_NAME,CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY'))
OR
(((A.CNTRY_CODE) IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND GUARDN_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY'))
))
GROUP BY 1,2,3
) B
SET RECENT_IND = NULL
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_SOURCE=B.SYS_SOURCE
; 
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO ERR_PRSNA_STG_CURR_LOAD
(
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
LOAD_ID,
SYS_NC_TYPE,
SYS_ERROR_TIME,
SYS_ERR_CODE
)
SELECT
A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
TRIM(A.SYS_SOURCE),
A.RECORD_IND,
CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)),
'Vulgar Name found in registration data (GUARDN)'
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE,STG.RECORD_IND
FROM 
PRSNA_POSTL_ADDR_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE (((GUARDN_NAME,CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY'))
OR
(((A.CNTRY_CODE) IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND GUARDN_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY'))
))
GROUP BY 1,2,3,4
) A
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP 
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE
FROM 
PRSNA_EMAIL_ADDR_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE (((GUARDN_NAME,CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY'))
OR
(((A.CNTRY_CODE) IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND GUARDN_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY'))
))
GROUP BY 1,2,3
) B
SET RECENT_IND = NULL
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_SOURCE=B.SYS_SOURCE
; 
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO ERR_PRSNA_STG_CURR_LOAD
(
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
LOAD_ID,
SYS_NC_TYPE,
SYS_ERROR_TIME,
SYS_ERR_CODE
)
SELECT
A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
TRIM(A.SYS_SOURCE),
A.RECORD_IND,
CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)),
'Vulgar Name found in registration data (GUARDN)'
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE,STG.RECORD_IND
FROM 
PRSNA_EMAIL_ADDR_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE (((GUARDN_NAME,CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY'))
OR
(((A.CNTRY_CODE) IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND GUARDN_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY'))
))
GROUP BY 1,2,3,4
) A
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP 
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE
FROM 
PRSNA_PHONE_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE (((GUARDN_NAME,CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY'))
OR
(((A.CNTRY_CODE) IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND GUARDN_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY'))
))
GROUP BY 1,2,3
) B
SET RECENT_IND = NULL
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_SOURCE=B.SYS_SOURCE
; 
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO ERR_PRSNA_STG_CURR_LOAD
(
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
LOAD_ID,
SYS_NC_TYPE,
SYS_ERROR_TIME,
SYS_ERR_CODE
)
SELECT
A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
TRIM(A.SYS_SOURCE),
A.RECORD_IND,
CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)),
'Vulgar Name found in registration data (GUARDN)'
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE,STG.RECORD_IND
FROM 
PRSNA_PHONE_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE (((GUARDN_NAME,CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY'))
OR
(((A.CNTRY_CODE) IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND GUARDN_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY'))
))
GROUP BY 1,2,3,4
) A
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP 
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE
FROM 
PRSNA_SOC_NETWK_ACCT_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE (((GUARDN_NAME,CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY'))
OR
(((A.CNTRY_CODE) IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND GUARDN_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY'))
))
GROUP BY 1,2,3
) B
SET RECENT_IND = NULL
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_SOURCE=B.SYS_SOURCE
; 
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO ERR_PRSNA_STG_CURR_LOAD
(
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
LOAD_ID,
SYS_NC_TYPE,
SYS_ERROR_TIME,
SYS_ERR_CODE
)
SELECT
A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
TRIM(A.SYS_SOURCE),
A.RECORD_IND,
CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)),
'Vulgar Name found in registration data (GUARDN)'
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE,STG.RECORD_IND
FROM 
PRSNA_SOC_NETWK_ACCT_STG STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE (((GUARDN_NAME,CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY'))
OR
(((A.CNTRY_CODE) IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND GUARDN_NAME LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='NAME' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY'))
))
GROUP BY 1,2,3,4
) A
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP 
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE
FROM 
TRILLIUM_OUTPUT1_$CNTRY_TEMP STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE ((A.CNTRY_CODE IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND (DR_ADDRESS LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')
OR DR_ADDRESS2 LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')
OR DR_ADDRESS3 LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')))
OR 
((DR_ADDRESS,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY')
OR (DR_ADDRESS2,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY') 
OR (DR_ADDRESS3,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY')))
GROUP BY 1,2,3
) B
SET RECENT_IND = NULL
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_SOURCE=B.SYS_SOURCE
; 
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO ERR_PRSNA_STG_CURR_LOAD
(
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
LOAD_ID,
SYS_NC_TYPE,
SYS_ERROR_TIME,
SYS_ERR_CODE
)
SELECT
A.MKTNG_PGM_NBR,
A.REGIS_CNSMR_ID_VAL,
TRIM(A.SYS_SOURCE),
A.RECORD_IND,
CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)),
'Data Reject String found in registration address data (POSTL)'
FROM (
SEL STG.MKTNG_PGM_NBR,STG.REGIS_CNSMR_ID_VAL,STG.SYS_SOURCE,STG.RECORD_IND
FROM 
TRILLIUM_OUTPUT1_$CNTRY_TEMP STG
INNER JOIN V_PRSNA_STG A
ON A.MKTNG_PGM_NBR=STG.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=STG.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE=STG.SYS_SOURCE

WHERE ((A.CNTRY_CODE IN (SEL CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY') 
AND (DR_ADDRESS LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')
OR DR_ADDRESS2 LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')
OR DR_ADDRESS3 LIKE ANY (SEL TRIM('%'||TRIM(REJECT_STRING)||'%') FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='Partial' AND CNTRY_CODE='$CNTRY')))
OR 
((DR_ADDRESS,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY')
OR (DR_ADDRESS2,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY') 
OR (DR_ADDRESS3,A.CNTRY_CODE) IN (SEL TRIM(REJECT_STRING),CNTRY_CODE FROM REJECT_STRING
WHERE REJECT_TYPE='Address' AND COALESCE(SYS_ENT_STATE,'') = 'ACTIVE' AND MATCH_TYPE='EXACT' AND CNTRY_CODE='$CNTRY')))
GROUP BY 1,2,3,4
) A
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DELETE FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP
WHERE RECENT_IND IS NULL;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/* trillium identifies duplicates based on postal address or email or phone number ,name, date of birth 
   REFERENCE_REGISTRATIONKEY will be the same for records that are dupliucates based on these attributes
   Retain the REGIS_PRSNA_ID on one of the dups and generate new REGIS_PRSNA_ID's for the rest */
   
INSERT TRILLIUM_MDM_REFERENCE_RG 
(
 REFERENCE_REGISTRATIONKEY     
,SYS_CREATION_DATE             
,SYS_ENT_STATE   
,SYS_SOURCE
,SYS_TARGET_ID
,SYS_ERR_CODE
)
SELECT DISTINCT
 A.REFERENCE_REGISTRATIONKEY     
,CURRENT_TIMESTAMP(0)             
,'ACTIVE'  
,A.SYS_SOURCE
,A.MKTNG_PGM_NBR
,A.REGIS_CNSMR_ID_VAL
FROM
TRILLIUM_OUTPUT_DUP A
INNER JOIN TRILLIUM_OUTPUT1_$CNTRY_TEMP B
 ON A.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE = B.SYS_SOURCE
AND B.RECENT_IND = 'Y'
WHERE DUP_REGIS_PRSNA_ID IS NULL
AND B.REGIS_PRSNA_ID IS NULL
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE TABLE V_DUP_REG_INPUT AS
(SEL REFERENCE_REGISTRATIONKEY,SYS_SOURCE,SYS_TARGET_ID,SYS_ERR_CODE,SYS_CREATION_DATE
FROM TRILLIUM_MDM_REFERENCE_RG
WHERE SYS_ERR_CODE IS NOT NULL
AND SYS_SOURCE IN (SEL SYS_SOURCE FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP GROUP BY 1)
)
WITH DATA
PRIMARY INDEX (REFERENCE_REGISTRATIONKEY,SYS_SOURCE,SYS_TARGET_ID,SYS_ERR_CODE)
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE TABLE V_DUP_REG_MAX AS
(SEL REFERENCE_REGISTRATIONKEY,SYS_SOURCE,SYS_TARGET_ID,SYS_ERR_CODE,MAX(SYS_CREATION_DATE) SYS_CREATION_DATE
FROM V_DUP_REG_INPUT
GROUP BY 1,2,3,4
)
WITH DATA
PRIMARY INDEX (REFERENCE_REGISTRATIONKEY,SYS_SOURCE,SYS_TARGET_ID,SYS_ERR_CODE)
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TRILLIUM_OUTPUT1_$CNTRY_TEMP
FROM 
(
SEL DISTINCT A.LEGAL_ENT_NBR
,A.MKTNG_PGM_NBR
,A.REGIS_DATE
,A.REFERENCE_REGISTRATIONKEY
,A.REGIS_CNSMR_ID_VAL
,A.SYS_TARGET_ID
,A.SYS_NC_TYPE
,NEW_REGISTRATION_KEY AS REGIS_PRSNA_ID 
FROM
TRILLIUM_OUTPUT_DUP A
INNER JOIN TRILLIUM_OUTPUT1_$CNTRY_TEMP B
 ON A.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE = B.SYS_SOURCE
AND B.RECENT_IND = 'Y'
INNER JOIN (SEL REFERENCE_REGISTRATIONKEY,SYS_SOURCE,SYS_TARGET_ID,SYS_ERR_CODE,MAX(NEW_REGISTRATION_KEY) NEW_REGISTRATION_KEY
FROM TRILLIUM_MDM_REFERENCE_RG
WHERE SYS_ERR_CODE IS NOT NULL
AND (REFERENCE_REGISTRATIONKEY,SYS_SOURCE,SYS_TARGET_ID,SYS_ERR_CODE,SYS_CREATION_DATE)
IN (SEL REFERENCE_REGISTRATIONKEY,SYS_SOURCE,SYS_TARGET_ID,SYS_ERR_CODE,SYS_CREATION_DATE
FROM V_DUP_REG_MAX)
GROUP BY 1,2,3,4) C
ON A.REFERENCE_REGISTRATIONKEY=C.REFERENCE_REGISTRATIONKEY
AND A.MKTNG_PGM_NBR=C.SYS_TARGET_ID
AND A.REGIS_CNSMR_ID_VAL=C.SYS_ERR_CODE
AND A.SYS_SOURCE=C.SYS_SOURCE
WHERE DUP_REGIS_PRSNA_ID IS NULL
AND B.REGIS_PRSNA_ID IS NULL) B
SET REGIS_PRSNA_ID = B.REGIS_PRSNA_ID
WHERE TRILLIUM_OUTPUT1_$CNTRY_TEMP.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_DATE=B.REGIS_DATE
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REFERENCE_REGISTRATIONKEY=B.REFERENCE_REGISTRATIONKEY
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_TARGET_ID=B.SYS_TARGET_ID
AND TRILLIUM_OUTPUT1_$CNTRY_TEMP.SYS_NC_TYPE=B.SYS_NC_TYPE
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/* Maps the duplicate records to its new REGIS_PRSNA_ID */

UPDATE TRILLIUM_OUTPUT_DUP
FROM 
(
SEL DISTINCT
A.LEGAL_ENT_NBR
,A.MKTNG_PGM_NBR
,A.REGIS_DATE
,A.REFERENCE_REGISTRATIONKEY
,A.REGIS_CNSMR_ID_VAL
,A.SYS_CREATION_DATE
,A.SYS_NC_TYPE
,A.SYS_TARGET_ID
,B.REGIS_PRSNA_ID FROM
TRILLIUM_OUTPUT_DUP A
INNER JOIN TRILLIUM_OUTPUT1_$CNTRY_TEMP B
 ON A.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND A.SYS_SOURCE = B.SYS_SOURCE
AND B.RECENT_IND = 'Y'
AND A.DUP_REGIS_PRSNA_ID IS NULL
WHERE CAST(A.REFERENCE_REGISTRATIONKEY AS INTEGER)<>B.REGIS_PRSNA_ID
QUALIFY RANK() OVER (PARTITION BY A.LEGAL_ENT_NBR
,A.MKTNG_PGM_NBR
,A.REGIS_DATE
,A.REFERENCE_REGISTRATIONKEY
,A.REGIS_CNSMR_ID_VAL
,A.SYS_CREATION_DATE
,A.SYS_NC_TYPE
,A.SYS_TARGET_ID
ORDER BY B.REGIS_PRSNA_ID) =1
) B
SET DUP_REGIS_PRSNA_ID = TRIM(B.REGIS_PRSNA_ID)
WHERE TRILLIUM_OUTPUT_DUP.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND TRILLIUM_OUTPUT_DUP.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TRILLIUM_OUTPUT_DUP.REGIS_DATE=B.REGIS_DATE
AND TRILLIUM_OUTPUT_DUP.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TRILLIUM_OUTPUT_DUP.SYS_CREATION_DATE=B.SYS_CREATION_DATE
AND TRILLIUM_OUTPUT_DUP.SYS_NC_TYPE=B.SYS_NC_TYPE
AND TRILLIUM_OUTPUT_DUP.SYS_TARGET_ID=B.SYS_TARGET_ID
AND TRILLIUM_OUTPUT_DUP.DUP_REGIS_PRSNA_ID IS NULL
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DEL FROM TSS_PRSNA_IDS_$CNTRY ALL;
																					
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/**************** Release 5.6 BR362 Add EMAIL_ADDR_TXT to TSS_PRSNA_IDS_$CNTRY
and TSS_PRSNA_IDS_$CNTRY_PREV *************************************************/

INSERT INTO TSS_PRSNA_IDS_$CNTRY
(
REGIS_CNSMR_ID_VAL,
MKTNG_PGM_NBR,
LEGAL_ENT_NBR,
REGIS_PRSNA_ID,
MATCHD_CNSMR_PRSNA_ID,
HSHLD_PRSNA_ID,
SYS_SOURCE,
EMAIL_ADDR_TXT,
SYS_TARGET_ID
)
SELECT
REGIS_CNSMR_ID_VAL,
MKTNG_PGM_NBR,
LEGAL_ENT_NBR,
COALESCE(REGIS_PRSNA_ID,CAST(REFERENCE_REGISTRATIONKEY AS INTEGER)),
CAST(REFERENCE_LEGALENTITYKEY AS INTEGER),
CAST(REFERENCE_HOUSEHOLD_ID AS INTEGER),
SYS_SOURCE,
CLEANSED_EMAIL_1,
SYS_TARGET_ID
FROM
TRILLIUM_OUTPUT1_$CNTRY_TEMP
QUALIFY RANK() OVER(PARTITION BY REGIS_CNSMR_ID_VAL,MKTNG_PGM_NBR,LEGAL_ENT_NBR,SYS_TARGET_ID,SYS_SOURCE
ORDER BY SYS_CREATION_DATE DESC, SYS_NC_TYPE DESC) = 1
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DEL FROM TSS_PRSNA_IDS_$CNTRY_PREV ALL;
																					
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO TSS_PRSNA_IDS_$CNTRY_PREV
(
REGIS_CNSMR_ID_VAL,
MKTNG_PGM_NBR,
LEGAL_ENT_NBR,
REGIS_PRSNA_ID,
MATCHD_CNSMR_PRSNA_ID,
HSHLD_PRSNA_ID,
SYS_SOURCE,
EMAIL_ADDR_TXT
)
SELECT
A.REGIS_CNSMR_ID_VAL,
A.MKTNG_PGM_NBR,
A.LEGAL_ENT_NBR,
A.REGIS_PRSNA_ID,
A.MATCHD_CNSMR_PRSNA_ID,
0,
A.SYS_SOURCE,
B.EMAIL_ADDR_TXT
FROM
REGIS_PRSNA A
LEFT JOIN REGIS_PRSNA_EMAIL_ADDR B
ON A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.REGIS_PRSNA_ID=B.REGIS_PRSNA_ID
WHERE (A.MKTNG_PGM_NBR,A.REGIS_PRSNA_ID) IN
(SEL MKTNG_PGM_NBR,REGIS_PRSNA_ID FROM TSS_PRSNA_IDS_$CNTRY)
GROUP BY 1,2,3,4,5,6,7,8
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS TSS_PRSNA_IDS_$CNTRY
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS TSS_PRSNA_IDS_$CNTRY
COLUMN MATCHD_CNSMR_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS TSS_PRSNA_IDS_$CNTRY
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS TSS_PRSNA_IDS_$CNTRY
COLUMN LEGAL_ENT_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS TSS_PRSNA_IDS_$CNTRY
COLUMN EMAIL_ADDR_TXT;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS TSS_PRSNA_IDS_$CNTRY_PREV
COLUMN MATCHD_CNSMR_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

.LABEL EXIT

.IF ERRORLEVEL > 4 THEN .QUIT ERRORCODE;
.IF ERRORLEVEL <= 4 THEN .GOTO WARN;

.LABEL WARN
/*
UPDATE $DATABASENAME.LOAD_INFO
SET STATUS = 'Success'
,PROCESS_END_TIME = CAST(CURRENT_TIMESTAMP(0) AS VARCHAR(19))
WHERE $DATABASENAME.LOAD_INFO.PROCESS_NAME='Wrapper'
AND $DATABASENAME.LOAD_INFO.STATUS = 'In Progress'
;
*/

.QUIT 0
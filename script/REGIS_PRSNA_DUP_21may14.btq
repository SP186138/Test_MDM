/***********************************************************************************************************
SCRIPT:               REGIS_PRSNA_DUP.BTEQ 
DESCRIPTION:          THIS SCRIPT LOADS EDW TABLES
DEPENDENCY:           
INPUT:                TRILLIUM OUTPUT CNTRY TABLES
OUTPUT:               EDW
ERRORS:
SPECIAL INSTRUCTIONS:

CHANGE LOG:
VERSION              DATE                 AUTHOR                          CHANGES
1.00                 10/31/2011           TERADATA                        INITIAL VERSION
4.00                 03/26/2012           TERADATA                        1. UPDATE NATIONAL ID INTO REGIS PRSNA 
                                                                          FROM PRSNA TRT.
                                                                          2. ADD STATE VALIDATION FOR US
									  3. ADD OPT OUT MODULE
R2O                  05/11/2012           TERADATA                        REMOVE ERROR PROCESSING
4.1                  06/13/2012           TERADATA                        MODULARIZE AND TUNING
4.2                  09/06/2012           TERADATA                        TUNING
4.2.1                01/14/2013           TERADATA                        INC0011026
4.4.5                10/25/2013           TERADATA                        PRB0040875
***********************************************************************************************************/

.logon $TDPID/$TDUSER,$TDPWD


.SET ERROROUT STDOUT;
.SET SESSION CHARSET 'UTF8';
.SET ERRORLEVEL 3624 SEVERITY 0


DATABASE $DATABASENAME;

/****************************************************************************************************
ENTERING INTO MERGE PROCESS FOR SK-II
****************************************************************************************************/

SEL CAST(SYS_SOURCE AS INTEGER) FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP 
WHERE MKTNG_PGM_NBR IN 
(
SELECT
       AV_CODE
  FROM ATTRIBUTE_VALUES
 WHERE AV_DESCRIPTION='Merge'
)
GROUP BY 1;

.IF ACTIVITYCOUNT > 0 THEN .GOTO SKII

.QUIT 0

.LABEL SKII

DELETE FROM PRSNA_DPLCT_MERGE_$CNTRY ALL;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

/***************************************************************************************************************
THIS UPDATE IS FOR SK-ii PROGRAMS THAT DO NOT USE LOYALTY BEFORE DEC 12/2011. After Dec 12, SK-II would identify 
duplicates based on LOYALTY ACCOUNT NUMBER.

Once the data is loaded into REGIS_PRSNA,LYLTY_ACCT_NUM in REGIS_PRSNA
would have the same value for two different consumer registrations.

Based on the above, we order it by registration date,etc to classify the latest record as duplicate.
***************************************************************************************************************/

CREATE VOLATILE SET TABLE MP_PRSNA AS
(
SELECT	
A.LEGAL_ENT_NBR,
A.MKTNG_PGM_NBR,
A.REGIS_PRSNA_ID,
A.REGIS_CNSMR_ID_VAL,
A.REGIS_DATE,
A.SYS_CREATION_DATE,
A.SYS_NC_TYPE,
A.SYS_SOURCE,
A.LYLTY_PGM_NBR,
A.LYLTY_ACCT_NUM,
RANK() OVER (PARTITION BY A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM 
                 ORDER BY A.REGIS_DATE ASC,A.SYS_CREATION_DATE ASC,A.REGIS_PRSNA_ID ASC
            ) AS RNK 
,CASE WHEN RNK=1
      THEN 'AC'
      WHEN RNK<>1
      THEN 'DP'
  END AS STATUS_CODE            
FROM REGIS_PRSNA A

WHERE A.MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP)
AND A.MKTNG_PGM_NBR IN (SEL AV_CODE
FROM ATTRIBUTE_VALUES
WHERE AV_DESCRIPTION='Merge')
AND (A.LYLTY_ACCT_NUM IS NOT NULL AND A.LYLTY_ACCT_NUM <> '')
QUALIFY PRSNA_STATUS_CODE <> STATUS_CODE
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR,REGIS_PRSNA_ID)
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS MP_PRSNA
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS MP_PRSNA
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE REGIS_PRSNA 
FROM MP_PRSNA B 
SET PRSNA_STATUS_CODE = B.STATUS_CODE 
WHERE REGIS_PRSNA.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
  AND REGIS_PRSNA.REGIS_PRSNA_ID=B.REGIS_PRSNA_ID 
  AND REGIS_PRSNA.MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP);
  
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;  


/***************************************************************************************************************
Using the above update logic, we insert the identified duplicate records into TRILLIUM_OUTPUT_DUP for
cross reference.

REFERENCE_REGISTRATIONKEY would have the actual REGIS_PRSNA_ID and DUP_REGIS_PRSNA_ID would have the REGIS_PRSNA_ID
of the record which is the active record of the duplicate record being inserted.
***************************************************************************************************************/

 INS TRILLIUM_OUTPUT_DUP
(
  MKTNG_PGM_NBR
 ,REGIS_CNSMR_ID_VAL
 ,REFERENCE_REGISTRATIONKEY
 ,LEGAL_ENT_NBR
 ,REGIS_DATE
 ,SYS_TARGET_ID
 ,SYS_SOURCE
 ,SYS_CREATION_DATE
 ,DUP_REGIS_PRSNA_ID
 ,WINDOW_KEY_01
)
SELECT DISTINCT 
A.MKTNG_PGM_NBR
,A.REGIS_CNSMR_ID_VAL
,A.REGIS_PRSNA_ID
,A.LEGAL_ENT_NBR 
,A.REGIS_DATE
,A.SYS_TARGET_ID
,A.SYS_SOURCE
,CAST(CAST(CURRENT_TIMESTAMP AS TIMESTAMP(6)) AS VARCHAR(19))
,B.REGIS_PRSNA_ID
,'LOYALTY'
 FROM
 (SELECT * 
FROM (
SELECT	
A.LEGAL_ENT_NBR,
A.MKTNG_PGM_NBR,
A.REGIS_PRSNA_ID,
A.REGIS_CNSMR_ID_VAL,
A.REGIS_DATE,
A.SYS_CREATION_DATE,
A.SYS_NC_TYPE,
A.SYS_TARGET_ID,
A.SYS_SOURCE,
A.LYLTY_PGM_NBR,
A.LYLTY_ACCT_NUM,
RANK() OVER (PARTITION BY A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM 
                 ORDER BY A.SYS_CREATION_DATE ASC,A.REGIS_DATE ASC,A.REGIS_PRSNA_ID ASC
            ) AS RNK 
FROM REGIS_PRSNA A

INNER JOIN ATTRIBUTE_VALUES D
ON D.AV_CODE = A.MKTNG_PGM_NBR
AND D.AV_DESCRIPTION='Merge'
AND (A.LYLTY_ACCT_NUM IS NOT NULL AND A.LYLTY_ACCT_NUM <> '')
--AND A.SYS_CREATION_DATE > D.SYS_CREATION_DATE
WHERE A.MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP)
) B 
WHERE RNK <> 1
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12
) A
INNER JOIN
(SELECT * 
FROM (
SELECT	
A.LEGAL_ENT_NBR,
A.MKTNG_PGM_NBR,
A.REGIS_PRSNA_ID,
A.REGIS_CNSMR_ID_VAL,
A.REGIS_DATE,
A.SYS_CREATION_DATE,
A.SYS_NC_TYPE,
A.SYS_TARGET_ID,
A.SYS_SOURCE,
A.LYLTY_PGM_NBR,
A.LYLTY_ACCT_NUM,
RANK() OVER (PARTITION BY A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM 
                 ORDER BY A.SYS_CREATION_DATE ASC,A.REGIS_DATE ASC,A.REGIS_PRSNA_ID ASC
            ) AS RNK 
FROM REGIS_PRSNA A

INNER JOIN ATTRIBUTE_VALUES D
ON D.AV_CODE = A.MKTNG_PGM_NBR
AND D.AV_DESCRIPTION='Merge'
AND (A.LYLTY_ACCT_NUM IS NOT NULL AND A.LYLTY_ACCT_NUM <> '')
--AND A.SYS_CREATION_DATE > D.SYS_CREATION_DATE
WHERE A.MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP)
) B 
WHERE RNK = 1
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12
) B
ON A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND A.LYLTY_PGM_NBR = B.LYLTY_PGM_NBR
AND A.LYLTY_ACCT_NUM = B.LYLTY_ACCT_NUM
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

/***************************************************************************************************************
REFERENCE_REGISTRATIONKEY would have the actual REGIS_PRSNA_ID and DUP_REGIS_PRSNA_ID would have the REGIS_PRSNA_ID
of the record which is the active record of the duplicate record being inserted.

There can be more than one duplicate record for a given loyalty account number. Hence we consolidate the information
into PRSNA_DPLCT_MERGE_$CNTRY and ensure that the active record is tied to only the most recent duplicate record.
***************************************************************************************************************/

INSERT PRSNA_DPLCT_MERGE_$CNTRY
(
DUP_REGIS_PRSNA_ID,
LEGAL_ENT_NBR,
MKTNG_PGM_NBR,
REFERENCE_REGISTRATIONKEY
)
SELECT MAX(DUP_REGIS_PRSNA_ID),
LEGAL_ENT_NBR,
MKTNG_PGM_NBR,
REFERENCE_REGISTRATIONKEY
FROM
(
SELECT DISTINCT 
CASE WHEN C.REGIS_PRSNA_ID IS NOT NULL
     THEN C.REGIS_PRSNA_ID
     WHEN B.REGIS_PRSNA_ID IS NOT NULL
     THEN B.REGIS_PRSNA_ID
 END DUP_REGIS_PRSNA_ID,
A.LEGAL_ENT_NBR,
A.MKTNG_PGM_NBR,
CASE WHEN C.REGIS_PRSNA_ID IS NOT NULL
     THEN CAST(A.REFERENCE_REGISTRATIONKEY AS INTEGER)
     WHEN B.REGIS_PRSNA_ID IS NOT NULL
     THEN CAST(A.DUP_REGIS_PRSNA_ID AS INTEGER)     
 END REFERENCE_REGISTRATIONKEY 
FROM
TRILLIUM_OUTPUT_DUP1 A

INNER JOIN (SEL MKTNG_PGM_NBR
FROM TRILLIUM_OUTPUT1_$CNTRY_TEMP
GROUP BY 1) C1
ON A.MKTNG_PGM_NBR = C1.MKTNG_PGM_NBR

LEFT OUTER JOIN REGIS_PRSNA B
ON CAST(A.REFERENCE_REGISTRATIONKEY AS INTEGER) = B.REGIS_PRSNA_ID
AND A.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND B.PRSNA_STATUS_CODE = 'DP'
LEFT OUTER JOIN REGIS_PRSNA C
ON CAST(A.DUP_REGIS_PRSNA_ID AS INTEGER) = C.REGIS_PRSNA_ID
AND A.LEGAL_ENT_NBR = C.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR = C.MKTNG_PGM_NBR
AND C.PRSNA_STATUS_CODE = 'DP'
WHERE (B.PRSNA_STATUS_CODE = 'DP' OR C.PRSNA_STATUS_CODE = 'DP')
  AND A.MKTNG_PGM_NBR IN 
(
SELECT
       AV_CODE
  FROM ATTRIBUTE_VALUES
 WHERE AV_DESCRIPTION='Merge'
)
  AND A.STATUS IS NULL
  AND A.WINDOW_KEY_01 = 'LOYALTY'
) A
GROUP BY 2,3,4
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

COLLECT STATS PRSNA_DPLCT_MERGE_$CNTRY;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

/*
UPDATE REGIS_PRSNA
FROM
( 
SELECT DISTINCT 
B.REFERENCE_REGISTRATIONKEY REFERENCE_REGISTRATIONKEY1
,A.MKTNG_PGM_NBR
,A.LEGAL_ENT_NBR
,A.NAME_PREFX_TXT
,A.GVN_NAME
,A.MID_NAME
,A.FAMLY_NAME
,A.NAME_SUFFX_TXT
,A.FULL_NAME
,A.GENDR_IND
,A.BRTH_DATE
,A.LANG_CODE
,A.SYS_SOURCE                    
,A.SYS_TARGET_ID                 
,A.SYS_AUTH_ID                   
,A.SYS_CREATED_BY                
,A.SYS_CREATION_DATE             
,A.SYS_LAST_MODIFIED_DATE        
,A.SYS_ENT_STATE                 
,A.SYS_LAST_MODIFIED_BY          
,A.SYS_NC_TYPE                   
,A.SYS_ERR_CODE                  
,A.SYS_ERR_SVRTY 
FROM PRSNA_DPLCT_MERGE_$CNTRY B
INNER JOIN REGIS_PRSNA A
ON A.REGIS_PRSNA_ID = B.DUP_REGIS_PRSNA_ID
AND A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND A.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR
INNER JOIN REGIS_PRSNA C
ON B.REFERENCE_REGISTRATIONKEY = C.REGIS_PRSNA_ID
AND B.MKTNG_PGM_NBR = C.MKTNG_PGM_NBR
AND B.LEGAL_ENT_NBR = C.LEGAL_ENT_NBR
) B
SET NAME_PREFX_TXT=B.NAME_PREFX_TXT
,GVN_NAME=B.GVN_NAME
,MID_NAME=B.MID_NAME
,FAMLY_NAME=B.FAMLY_NAME
,NAME_SUFFX_TXT=B.NAME_SUFFX_TXT
,FULL_NAME=B.FULL_NAME
,GENDR_IND=B.GENDR_IND
,BRTH_DATE=B.BRTH_DATE
,LANG_CODE=B.LANG_CODE
,SYS_TARGET_ID=B.SYS_TARGET_ID                 
,SYS_AUTH_ID=B.SYS_AUTH_ID                   
,SYS_CREATED_BY=B.SYS_CREATED_BY                
,SYS_CREATION_DATE=B.SYS_CREATION_DATE             
,SYS_LAST_MODIFIED_DATE=B.SYS_LAST_MODIFIED_DATE        
,SYS_ENT_STATE=B.SYS_ENT_STATE                 
,SYS_LAST_MODIFIED_BY=B.SYS_LAST_MODIFIED_BY          
,SYS_NC_TYPE=B.SYS_NC_TYPE                   
,SYS_ERR_CODE=B.SYS_ERR_CODE                  
,SYS_ERR_SVRTY=B.SYS_ERR_SVRTY
WHERE REGIS_PRSNA.REGIS_PRSNA_ID = B.REFERENCE_REGISTRATIONKEY1
AND REGIS_PRSNA.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND REGIS_PRSNA.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR;
*/

UPDATE REGIS_PRSNA
FROM
( 
SELECT DISTINCT 
B.REFERENCE_REGISTRATIONKEY REFERENCE_REGISTRATIONKEY1
,A.MKTNG_PGM_NBR
,A.LEGAL_ENT_NBR
,A.NAME_PREFX_TXT
--,A.GVN_NAME
--,COALESCE(A.GVN_NAME,C.GVN_NAME) GVN_NAME
,CASE WHEN A.GVN_NAME IS NULL OR A.GVN_NAME = ''
      THEN C.GVN_NAME
      ELSE A.GVN_NAME
  END GVN_NAME
--,A.MID_NAME
--,COALESCE(A.MID_NAME,C.MID_NAME) MID_NAME
,CASE WHEN A.MID_NAME IS NULL OR A.MID_NAME = ''
      THEN C.MID_NAME
      ELSE A.MID_NAME
  END MID_NAME
--,A.FAMLY_NAME
--,COALESCE(A.FAMLY_NAME,C.FAMLY_NAME) FAMLY_NAME
,CASE WHEN A.FAMLY_NAME IS NULL OR A.FAMLY_NAME = ''
      THEN C.FAMLY_NAME
      ELSE A.FAMLY_NAME
  END FAMLY_NAME
--,A.NAME_SUFFX_TXT
--,COALESCE(A.NAME_SUFFX_TXT,C.NAME_SUFFX_TXT) NAME_SUFFX_TXT
,CASE WHEN A.NAME_SUFFX_TXT IS NULL OR A.NAME_SUFFX_TXT = ''
      THEN C.NAME_SUFFX_TXT
      ELSE A.NAME_SUFFX_TXT
  END NAME_SUFFX_TXT
--,A.FULL_NAME
--,COALESCE(A.FULL_NAME,C.FULL_NAME) FULL_NAME
,CASE WHEN A.FULL_NAME IS NULL OR A.FULL_NAME = ''
      THEN C.FULL_NAME
      ELSE A.FULL_NAME
  END FULL_NAME
--,A.GENDR_IND
--,COALESCE(A.GENDR_IND,C.GENDR_IND) GENDR_IND
,CASE WHEN A.GENDR_IND IS NULL OR A.GENDR_IND = ''
      THEN C.GENDR_IND
      ELSE A.GENDR_IND
  END GENDR_IND
--,A.BRTH_DATE
,COALESCE(A.BRTH_DATE,C.BRTH_DATE) BRTH_DATE
--,A.LANG_CODE
--,COALESCE(A.LANG_CODE,C.LANG_CODE) LANG_CODE
,CASE WHEN A.LANG_CODE IS NULL OR A.LANG_CODE = ''
      THEN C.LANG_CODE
      ELSE A.LANG_CODE
  END LANG_CODE
,A.LATST_ACTVY_DATE
,A.SYS_SOURCE                    
,A.SYS_TARGET_ID                 
,A.SYS_AUTH_ID                   
,A.SYS_CREATED_BY                
,A.SYS_CREATION_DATE             
,A.SYS_LAST_MODIFIED_DATE        
,A.SYS_ENT_STATE                 
,A.SYS_LAST_MODIFIED_BY          
,A.SYS_NC_TYPE                   
,A.SYS_ERR_CODE                  
,A.SYS_ERR_SVRTY 
FROM PRSNA_DPLCT_MERGE_$CNTRY B
INNER JOIN REGIS_PRSNA A
ON A.REGIS_PRSNA_ID = B.DUP_REGIS_PRSNA_ID
AND A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND A.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR
INNER JOIN REGIS_PRSNA C
ON B.REFERENCE_REGISTRATIONKEY = C.REGIS_PRSNA_ID
AND B.MKTNG_PGM_NBR = C.MKTNG_PGM_NBR
AND B.LEGAL_ENT_NBR = C.LEGAL_ENT_NBR
) B
SET 
 NAME_PREFX_TXT=B.NAME_PREFX_TXT
,GVN_NAME=B.GVN_NAME
,MID_NAME=B.MID_NAME
,FAMLY_NAME=B.FAMLY_NAME
,NAME_SUFFX_TXT=B.NAME_SUFFX_TXT
,FULL_NAME=B.FULL_NAME
,GENDR_IND=B.GENDR_IND
,BRTH_DATE=B.BRTH_DATE
,LANG_CODE=B.LANG_CODE
,LATST_ACTVY_DATE=B.LATST_ACTVY_DATE
WHERE REGIS_PRSNA.REGIS_PRSNA_ID = B.REFERENCE_REGISTRATIONKEY1
AND REGIS_PRSNA.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND REGIS_PRSNA.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

.exit
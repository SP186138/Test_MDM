/***********************************************************************************************************
SCRIPT:               CNSMR_MERGE.BTEQ 
DESCRIPTION:          THIS SCRIPT MERGES CONSUMER INFORMATION
DEPENDENCY:           WRAPPER
INPUT:                GOLDEN TABLES
OUTPUT:               
ERRORS:
SPECIAL INSTRUCTIONS:

CHANGE LOG:
VERSION              DATE                 AUTHOR                          CHANGES
1.00                 05/17/2011           TERADATA                        INITIAL VERSION
2.00                 03/27/2014           TERADATA                        PRB0040988 Release 5.0.1 Performance Tuning of query 
***********************************************************************************************************/

.RUN FILE \\10.138.21.14\Teradata\MDM\3.05.02\custom\pngrelease3\logon\LOGON.txt;
.SET ERROROUT STDOUT;
.SET SESSION CHARSET 'UTF8';

DATABASE MDM;


DELETE FROM RPT_ADDR_QLTY ALL;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

INSERT INTO RPT_ADDR_QLTY
(
LEGAL_ENT_NBR
,MKTNG_PGM_NBR                                  
,SUCCESS_PCT                   
,LCLTY_FAIL_PCT                
,UNK_ADDR_PCT                  
,MULTIPLE_ADDR_MATCH_PCT       
,CITY_TERR_FAIL_PCT            
,STREET_NAME_FAIL_PCT          
,HOUSE_NO_FAIL_PCT             
,STREET_COMPT_FAIL_PCT         
,MULTIPLE_STREET_ADDR_PCT      
)
SELECT
A.LEGAL_ENT_NBR,
A.MKTNG_PGM_NBR,
SUM(SUCCESS_PCT),
SUM(LCLTY_FAIL_PCT),
SUM(UNK_ADDR_PCT),
SUM(MULTIPLE_ADDR_MATCH_PCT),
SUM(CITY_TERR_FAIL_PCT),
SUM(STREET_NAME_FAIL_PCT),
SUM(HOUSE_NO_FAIL_PCT),
SUM(STREET_COMPT_FAIL_PCT),
SUM(MULTIPLE_STREET_ADDR_PCT)
FROM
(
SEL 
A.LEGAL_ENT_NBR,
A.MKTNG_PGM_NBR,
CASE WHEN PR_GEOCODE_FAIL IN (0,9)
        OR (PR_REV_GROUP IN (0,008,001,002,003,004,005,008,009,010,012,019)
      AND  CNTRY_CODE NOT IN ('JPN','CHN','TWN','KOR','NZL','AUS','MYS','SGP','HKG'))
     THEN (CAST(A.CNT AS DECIMAL(10,2))/CAST(B.TOTAL AS DECIMAL(10,2)))*100
END AS SUCCESS_PCT,
CASE WHEN PR_GEOCODE_FAIL = 1     
       OR PR_REV_GROUP IN (014,016,018)
     THEN (CAST(A.CNT AS DECIMAL(10,2))/CAST(B.TOTAL AS DECIMAL(10,2)))*100
END AS CITY_TERR_FAIL_PCT,
CASE WHEN (PR_GEOCODE_FAIL = 2 AND CNTRY_CODE IN ('JPN','CHN','TWN','KOR'))
       OR PR_GEOCODE_FAIL IN (6,7,8)
       OR (PR_GEOCODE_FAIL = 5 AND CNTRY_CODE IN ('CHN'))
       OR PR_REV_GROUP IN (007,013,015,017)
     THEN (CAST(A.CNT AS DECIMAL(10,2))/CAST(B.TOTAL AS DECIMAL(10,2)))*100
END AS LCLTY_FAIL_PCT,
CASE WHEN (PR_GEOCODE_FAIL = 2 AND CNTRY_CODE NOT IN ('JPN','CHN','TWN','KOR'))
       OR (PR_GEOCODE_FAIL = 3 AND CNTRY_CODE IN ('CHN'))
       OR PR_REV_GROUP IN (006,011)
     THEN (CAST(A.CNT AS DECIMAL(10,2))/CAST(B.TOTAL AS DECIMAL(10,2)))*100
END AS STREET_NAME_FAIL_PCT,
CASE WHEN PR_GEOCODE_FAIL = 3 AND CNTRY_CODE <> 'CHN'     
     THEN (CAST(A.CNT AS DECIMAL(10,2))/CAST(B.TOTAL AS DECIMAL(10,2)))*100
END AS HOUSE_NO_FAIL_PCT,
CASE WHEN PR_GEOCODE_FAIL = 4 AND CNTRY_CODE IN ('JPN','CHN','TWN','KOR')     
     THEN (CAST(A.CNT AS DECIMAL(10,2))/CAST(B.TOTAL AS DECIMAL(10,2)))*100
END AS UNK_ADDR_PCT,
CASE WHEN PR_GEOCODE_FAIL = 4 AND CNTRY_CODE NOT IN ('JPN','CHN','TWN','KOR')
     THEN (CAST(A.CNT AS DECIMAL(10,2))/CAST(B.TOTAL AS DECIMAL(10,2)))*100
END AS STREET_COMPT_FAIL_PCT,
CASE WHEN PR_GEOCODE_FAIL = 5 AND CNTRY_CODE <> 'CHN'   
     THEN (CAST(A.CNT AS DECIMAL(10,2))/CAST(B.TOTAL AS DECIMAL(10,2)))*100
END AS MULTIPLE_ADDR_MATCH_PCT,
CASE WHEN PR_GEOCODE_FAIL = 7  
       OR  PR_REV_GROUP IN (020)
     THEN (CAST(A.CNT AS DECIMAL(10,2))/CAST(B.TOTAL AS DECIMAL(10,2)))*100
END AS MULTIPLE_STREET_ADDR_PCT

FROM	
(
SEL LEGAL_ENT_NBR,
MKTNG_PGM_NBR,
PR_REV_GROUP,
PR_GEOCODE_FAIL,
CNTRY_CODE,
COUNT(*) AS CNT  
FROM
REGIS_PRSNA_POSTL_ADDR
GROUP BY 1,2,3,4,5) A
,(
SEL
LEGAL_ENT_NBR,
MKTNG_PGM_NBR,
COUNT(*) AS TOTAL 
FROM
REGIS_PRSNA_POSTL_ADDR
GROUP BY 1,2) B
WHERE A.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
) A
GROUP BY 1,2
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

UPDATE RPT_ADDR_QLTY
FROM
(
SELECT
MKTNG_PGM_NBR
,LEGAL_ENT_NBR
,COUNT(REGIS_PRSNA_ID) AS CNT
FROM REGIS_PRSNA
WHERE PRSNA_STATUS_CODE = 'AC'
GROUP BY 1,2
) B
SET ACTV_RGSTRTN_CNT = B.CNT
,SYS_LAST_MODIFIED_DATE = CAST(CURRENT_TIMESTAMP AS VARCHAR(20))
WHERE RPT_ADDR_QLTY.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND RPT_ADDR_QLTY.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

DELETE FROM RPT_DATA_NBR ALL;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

/*--PRB0040988 Release 5.0.1 :Commented the old logic: Start--
CREATE VOLATILE SET TABLE VT_RPT_LOAD_NBR
AS 
(
SELECT 
R.MKTNG_PGM_NBR
, R.LEGAL_ENT_NBR
, R.PRSNA_STATUS_CODE
, R.REGIS_CNSMR_ID_VAL
, R.MATCHD_CNSMR_PRSNA_ID
FROM REGIS_PRSNA R
WHERE R.PRSNA_STATUS_CODE IN ( 'AC', 'IN')
)
WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR,   PRSNA_STATUS_CODE, REGIS_CNSMR_ID_VAL)
PARTITION BY LEGAL_ENT_NBR
INDEX (MATCHD_CNSMR_PRSNA_ID,  PRSNA_STATUS_CODE)
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

CREATE VOLATILE SET TABLE VT_RPT_LOAD_NBR2
AS 
(
SELECT 
R.MKTNG_PGM_NBR
, R.MATCHD_CNSMR_PRSNA_ID
FROM REGIS_PRSNA R
WHERE R.PRSNA_STATUS_CODE = 'AC'
)
WITH DATA
PRIMARY INDEX (MATCHD_CNSMR_PRSNA_ID)
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

INSERT INTO RPT_DATA_NBR
(
MKTNG_PGM_NBR
,LEGAL_ENT_NBR
,STAGING_NBR
,ERROR_NBR
,ACTIVE_NBR
,DUPLICATE_NBR
,PHONE_OPT_IN
,PHONE_OPT_OUT
,EMAIL_OPT_IN
,EMAIL_OPT_OUT
,POSTAL_OPT_IN
,POSTAL_OPT_OUT
,SOCIAL_OPT_IN
,SOCIAL_OPT_OUT
,MTCHD_CNSMR_NBR
,HSHLD_NBR
)
SELECT 
A.MKTNG_PGM_NBR
,A.LEGAL_ENT_NBR
,COALESCE(B.STAGING_NBR,0)
,COALESCE(N.ERROR_NBR,0)
,COALESCE(A.ACTIVE_NBR,0)
,COALESCE(E.DUPLICATE_NBR,0)
,0 PHONE_OPT_IN
,0 PHONE_OPT_OUT
,0 EMAIL_OPT_IN
,0 EMAIL_OPT_OUT
,0 POSTAL_OPT_IN
,0 POSTAL_OPT_OUT
,0 SOCIAL_OPT_IN
,0 SOCIAL_OPT_OUT
,MTCHD_CNSMR_NBR
,COALESCE(O.HSHLD_NBR,0)
FROM
(
SELECT 
MKTNG_PGM_NBR
, LEGAL_ENT_NBR
, COUNT( REGIS_CNSMR_ID_VAL) AS ACTIVE_NBR 
, COUNT( DISTINCT MATCHD_CNSMR_PRSNA_ID ) AS MTCHD_CNSMR_NBR
FROM VT_RPT_LOAD_NBR
WHERE PRSNA_STATUS_CODE = 'AC'
GROUP BY 1,2
) A

INNER JOIN 
(
SELECT 
R.MKTNG_PGM_NBR
, COUNT(DISTINCT M.HSHLD_PRSNA_ID)  AS HSHLD_NBR
FROM VT_RPT_LOAD_NBR2 R

INNER JOIN
MATCHD_CNSMR_PRSNA M
ON  R.MATCHD_CNSMR_PRSNA_ID = M.MATCHD_CNSMR_PRSNA_ID
GROUP BY 1
)O
ON
A.MKTNG_PGM_NBR = O.MKTNG_PGM_NBR

LEFT OUTER JOIN
(
SELECT 
MKTNG_PGM_NBR
, COUNT(DISTINCT REGIS_CNSMR_ID_VAL) AS STAGING_NBR
FROM PRSNA_STG_CNT
GROUP BY 1
) B
ON A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR

LEFT OUTER JOIN 
(
SELECT 
MKTNG_PGM_NBR
, COUNT(DISTINCT REGIS_CNSMR_ID_VAL) AS ERROR_NBR
FROM 	(
SELECT
MKTNG_PGM_NBR
, REGIS_CNSMR_ID_VAL
FROM ERR_PRSNA_STG E
WHERE NOT EXISTS	(
SELECT
MKTNG_PGM_NBR
, REGIS_CNSMR_ID_VAL
FROM VT_RPT_LOAD_NBR V
WHERE V.MKTNG_PGM_NBR = E.MKTNG_PGM_NBR
AND V.REGIS_CNSMR_ID_VAL = E.REGIS_CNSMR_ID_VAL
AND V.PRSNA_STATUS_CODE='AC'
)
) A
GROUP BY 1
) N
ON A.MKTNG_PGM_NBR = N.MKTNG_PGM_NBR

LEFT OUTER JOIN 
(
SELECT
MKTNG_PGM_NBR
, LEGAL_ENT_NBR
, COUNT(DISTINCT REGIS_CNSMR_ID_VAL) AS DUPLICATE_NBR 
FROM VT_RPT_LOAD_NBR R
WHERE PRSNA_STATUS_CODE = 'IN'
AND NOT EXISTS 	( 
SELECT 1 
FROM VT_RPT_LOAD_NBR T 
WHERE T.MKTNG_PGM_NBR = R.MKTNG_PGM_NBR 
AND T.LEGAL_ENT_NBR = R.LEGAL_ENT_NBR 				
AND T.	REGIS_CNSMR_ID_VAL =R.REGIS_CNSMR_ID_VAL					
AND T.PRSNA_STATUS_CODE = 'AC'
)
GROUP BY 1,2
) E
ON A.MKTNG_PGM_NBR = E.MKTNG_PGM_NBR 
AND A.LEGAL_ENT_NBR = E.LEGAL_ENT_NBR;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

-- PRB0040988 Release 5.0.1 :Commented the old logic:End--*/


/*--PRB0040988 Release 5.0.1 :Added New logic:Start--*/

CREATE VOLATILE SET TABLE VT_RPT_LOAD_NBR
AS 
(
SELECT 
R.MKTNG_PGM_NBR
, R.LEGAL_ENT_NBR
, R.PRSNA_STATUS_CODE
, R.REGIS_CNSMR_ID_VAL
, R.MATCHD_CNSMR_PRSNA_ID
, R.SYS_TARGET_ID
FROM REGIS_PRSNA R
WHERE R.PRSNA_STATUS_CODE IN ( 'AC', 'DP')
)
WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR,   PRSNA_STATUS_CODE, REGIS_CNSMR_ID_VAL)
PARTITION BY LEGAL_ENT_NBR
INDEX (MATCHD_CNSMR_PRSNA_ID,  PRSNA_STATUS_CODE)
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

CREATE VOLATILE SET TABLE VT_RPT_LOAD_NBR_A
AS 
(SELECT 
MKTNG_PGM_NBR
, LEGAL_ENT_NBR
, COUNT( REGIS_CNSMR_ID_VAL) AS ACTIVE_NBR 
, COUNT( DISTINCT MATCHD_CNSMR_PRSNA_ID ) AS MTCHD_CNSMR_NBR
FROM VT_RPT_LOAD_NBR
WHERE PRSNA_STATUS_CODE = 'AC'
GROUP BY 1,2
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR)
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

CREATE VOLATILE SET TABLE VT_RPT_LOAD_NBR_O
AS 
(
SELECT 
R.MKTNG_PGM_NBR
, COUNT(DISTINCT M.HSHLD_PRSNA_ID)  AS HSHLD_NBR
FROM VT_RPT_LOAD_NBR R
INNER JOIN
MATCHD_CNSMR_PRSNA M
ON  R.MATCHD_CNSMR_PRSNA_ID = M.MATCHD_CNSMR_PRSNA_ID AND  R.LEGAL_ENT_NBR = M.LEGAL_ENT_NBR AND  R.PRSNA_STATUS_CODE = 'AC'
GROUP BY 1
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR)
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

CREATE VOLATILE SET TABLE VT_RPT_LOAD_NBR_B
AS 
(
SELECT 
MKTNG_PGM_NBR
, COUNT(DISTINCT REGIS_CNSMR_ID_VAL) AS STAGING_NBR
FROM (SEL MKTNG_PGM_NBR                                                                 
 ,REGIS_CNSMR_ID_VAL                                                            
 ,USER_NAME                                                                     
 ,PRSNA_REG_DT                                                                  
 ,NAME_PREFX_TXT                                                                
 ,GVN_NAME                                                                      
 ,MID_NAME                                                                      
 ,FAMLY_NAME                                                                    
 ,NAME_SUFFX_TXT                                                                
 ,FULL_NAME                                                                     
 ,GENDR_IND                                                                     
 ,BRTH_DATE                                                                     
 ,LANG_CODE                                                                     
 ,PRSNA_STTUS_CODE   
 ,CNTRY_NAME                                                           
 ,LOAD_ID                                                                       
 ,LOAD_TS                                                                       
 ,MDM_LOAD_IND  
 ,RECORD_IND FROM PRSNA_STG_CNT UNION ALL SEL MKTNG_PGM_NBR                                                                 
 ,REGIS_CNSMR_ID_VAL                                                            
 ,USER_NAME                                                                     
 ,PRSNA_REG_DT                                                                  
 ,NAME_PREFX_TXT                                                                
 ,GVN_NAME                                                                      
 ,MID_NAME                                                                      
 ,FAMLY_NAME                                                                    
 ,NAME_SUFFX_TXT                                                                
 ,FULL_NAME                                                                     
 ,GENDR_IND                                                                     
 ,BRTH_DATE                                                                     
 ,LANG_CODE                                                                     
 ,PRSNA_STTUS_CODE   
 ,CNTRY_NAME                                                           
 ,LOAD_ID                                                                       
 ,LOAD_TS                                                                       
 ,MDM_LOAD_IND                                                                  
 ,RECORD_IND FROM ICRM_STAGE.PRSNA_STG_HIST)PRSNA_STG_CNT
GROUP BY 1
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR)
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

CREATE VOLATILE SET TABLE VT_RPT_LOAD_NBR_N
AS 
(
SELECT 
MKTNG_PGM_NBR
, COUNT(DISTINCT REGIS_CNSMR_ID_VAL) AS ERROR_NBR
FROM    (
SELECT
E.MKTNG_PGM_NBR
, E.REGIS_CNSMR_ID_VAL
FROM ERR_PRSNA_STG E
JOIN LOAD_CONTROL LC ON E.LOAD_ID=LC.LOAD_ID AND LC.LOAD_TYPE='ETL'
left join VT_RPT_LOAD_NBR V on V.MKTNG_PGM_NBR = E.MKTNG_PGM_NBR
AND V.REGIS_CNSMR_ID_VAL = E.REGIS_CNSMR_ID_VAL
AND V.SYS_TARGET_ID = LC.SOURCE_ID
AND V.PRSNA_STATUS_CODE='AC'
WHERE v.REGIS_CNSMR_ID_VAL is null
) A
GROUP BY 1
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR)
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

CREATE VOLATILE SET TABLE VT_RPT_LOAD_NBR_E
AS 
(
SELECT
R.MKTNG_PGM_NBR
, R.LEGAL_ENT_NBR
, COUNT(DISTINCT R.REGIS_CNSMR_ID_VAL) AS DUPLICATE_NBR 
FROM VT_RPT_LOAD_NBR R
left join  VT_RPT_LOAD_NBR T on T.LEGAL_ENT_NBR = R.LEGAL_ENT_NBR                                                         
and  T.MKTNG_PGM_NBR = R.MKTNG_PGM_NBR 
AND T.   REGIS_CNSMR_ID_VAL =R.REGIS_CNSMR_ID_VAL                                                                       
AND T.   SYS_TARGET_ID =R.SYS_TARGET_ID
AND T.PRSNA_STATUS_CODE = 'AC'
where R.PRSNA_STATUS_CODE = 'DP' 
AND T.REGIS_CNSMR_ID_VAL is null
GROUP BY 1,2
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR)
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

INSERT INTO RPT_DATA_NBR
(
MKTNG_PGM_NBR
,LEGAL_ENT_NBR
,STAGING_NBR
,ERROR_NBR
,ACTIVE_NBR
,DUPLICATE_NBR
,PHONE_OPT_IN
,PHONE_OPT_OUT
,EMAIL_OPT_IN
,EMAIL_OPT_OUT
,POSTAL_OPT_IN
,POSTAL_OPT_OUT
,SOCIAL_OPT_IN
,SOCIAL_OPT_OUT
,MTCHD_CNSMR_NBR
,HSHLD_NBR
)
SELECT 
A.MKTNG_PGM_NBR
,A.LEGAL_ENT_NBR
,COALESCE(B.STAGING_NBR,0)
,COALESCE(N.ERROR_NBR,0)
,COALESCE(A.ACTIVE_NBR,0)
,COALESCE(E.DUPLICATE_NBR,0)
,0 PHONE_OPT_IN
,0 PHONE_OPT_OUT
,0 EMAIL_OPT_IN
,0 EMAIL_OPT_OUT
,0 POSTAL_OPT_IN
,0 POSTAL_OPT_OUT
,0 SOCIAL_OPT_IN
,0 SOCIAL_OPT_OUT
,MTCHD_CNSMR_NBR
,COALESCE(O.HSHLD_NBR,0)
FROM
VT_RPT_LOAD_NBR_A A
INNER JOIN 
VT_RPT_LOAD_NBR_O O ON A.MKTNG_PGM_NBR = O.MKTNG_PGM_NBR
LEFT OUTER JOIN VT_RPT_LOAD_NBR_B B ON A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
LEFT OUTER JOIN  VT_RPT_LOAD_NBR_N N ON A.MKTNG_PGM_NBR = N.MKTNG_PGM_NBR
LEFT OUTER JOIN VT_RPT_LOAD_NBR_E E ON A.MKTNG_PGM_NBR = E.MKTNG_PGM_NBR ;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

/*--PRB0040988 Release 5.0.1 :Added New logic:End--*/

UPDATE RPT_DATA_NBR
FROM	(
SELECT 
F.MKTNG_PGM_NBR
, F.LEGAL_ENT_NBR
, COUNT(CASE WHEN SUBSCRPTN_OPT_IND IN ('Y','I') THEN REGIS_PRSNA_ID ELSE NULL END) PHONE_OPT_IN
, COUNT(CASE WHEN SUBSCRPTN_OPT_IND IN ('N','O') THEN REGIS_PRSNA_ID ELSE NULL END) PHONE_OPT_OUT
FROM  REGIS_PRSNA_PHONE F
WHERE PHONE_STATUS_CODE = 'AC' 
GROUP BY 1,2
) X
SET	  PHONE_OPT_IN   = X.PHONE_OPT_IN
, PHONE_OPT_OUT  = X.PHONE_OPT_OUT
WHERE RPT_DATA_NBR.MKTNG_PGM_NBR = X.MKTNG_PGM_NBR 
AND RPT_DATA_NBR.LEGAL_ENT_NBR   = X.LEGAL_ENT_NBR;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

UPDATE RPT_DATA_NBR
FROM	(
SELECT 
F.MKTNG_PGM_NBR
, F.LEGAL_ENT_NBR
, COUNT(CASE WHEN SUBSCRPTN_OPT_IND IN ('Y','I') THEN REGIS_PRSNA_ID ELSE NULL END) EMAIL_OPT_IN
, COUNT(CASE WHEN SUBSCRPTN_OPT_IND IN ('N','O') THEN REGIS_PRSNA_ID ELSE NULL END) EMAIL_OPT_OUT
FROM  REGIS_PRSNA_EMAIL_ADDR F
WHERE EMAIL_STATUS_CODE = 'AC' 
GROUP BY 1,2
) X
SET	  EMAIL_OPT_IN   = X.EMAIL_OPT_IN
, EMAIL_OPT_OUT  = X.EMAIL_OPT_OUT
WHERE RPT_DATA_NBR.MKTNG_PGM_NBR = X.MKTNG_PGM_NBR 
AND RPT_DATA_NBR.LEGAL_ENT_NBR   = X.LEGAL_ENT_NBR;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

UPDATE RPT_DATA_NBR
FROM	(
SELECT 
F.MKTNG_PGM_NBR
, F.LEGAL_ENT_NBR
, COUNT(CASE WHEN SUBSCRPTN_OPT_IND IN ('Y','I') THEN REGIS_PRSNA_ID ELSE NULL END) POSTAL_OPT_IN
, COUNT(CASE WHEN SUBSCRPTN_OPT_IND IN ('N','O') THEN REGIS_PRSNA_ID ELSE NULL END) POSTAL_OPT_OUT
FROM  REGIS_PRSNA_POSTL_ADDR F
WHERE POSTL_STATUS_CODE = 'AC' 
GROUP BY 1,2
) X
SET	  POSTAL_OPT_IN   = X.POSTAL_OPT_IN
, POSTAL_OPT_OUT  = X.POSTAL_OPT_OUT
WHERE RPT_DATA_NBR.MKTNG_PGM_NBR = X.MKTNG_PGM_NBR 
AND RPT_DATA_NBR.LEGAL_ENT_NBR   = X.LEGAL_ENT_NBR;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

UPDATE RPT_DATA_NBR
FROM	(
SELECT 
F.MKTNG_PGM_NBR
, F.LEGAL_ENT_NBR
, COUNT(CASE WHEN SUBSCRPTN_OPT_IND IN ('Y','I') THEN REGIS_PRSNA_ID ELSE NULL END) SOCIAL_OPT_IN
, COUNT(CASE WHEN SUBSCRPTN_OPT_IND IN ('N','O') THEN REGIS_PRSNA_ID ELSE NULL END) SOCIAL_OPT_OUT
FROM  REGIS_PRSNA_SOC_NET_ACCT F
WHERE SOC_NET_STATUS_CODE = 'AC' 
GROUP BY 1,2
) X
SET	  SOCIAL_OPT_IN   = X.SOCIAL_OPT_IN
, SOCIAL_OPT_OUT  = X.SOCIAL_OPT_OUT
WHERE RPT_DATA_NBR.MKTNG_PGM_NBR = X.MKTNG_PGM_NBR 
AND RPT_DATA_NBR.LEGAL_ENT_NBR   = X.LEGAL_ENT_NBR;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

DELETE FROM RPT_CNSMR_NBR ALL;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

INSERT INTO RPT_CNSMR_NBR
(
LEGAL_ENT_NBR
,MTCHD_CNSMR_NBR
,HSHLD_NBR
)
SELECT
A.LEGAL_ENT_NBR
,B.MTCHD_CNSMR_NBR
,C.HSHLD_NBR
FROM
LEGAL_ENT A

LEFT OUTER JOIN
(SEL LEGAL_ENT_NBR,
COUNT(DISTINCT MATCHD_CNSMR_PRSNA_ID) MTCHD_CNSMR_NBR
FROM MATCHD_CNSMR_PRSNA
WHERE PRSNA_STATUS_CODE='AC'
GROUP BY 1)B
ON 
A.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR

LEFT OUTER JOIN
(SEL LEGAL_ENT_NBR,
COUNT(DISTINCT HSHLD_PRSNA_ID) HSHLD_NBR
FROM HSHLD_PRSNA
WHERE PRSNA_STATUS_CODE='AC'
GROUP BY 1)C
ON 
A.LEGAL_ENT_NBR = C.LEGAL_ENT_NBR
;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

DEL FROM RPT_PROFILE_CHANGES ALL;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

INSERT RPT_PROFILE_CHANGES
(
      LEGAL_ENT_NBR,
      MKTNG_PGM_NBR,
      USER_ID,
      MONTH_START,
      PROFILE_CHANGE_NBR
)
SELECT 
	X.LEGAL_ENT_NBR, 
	X.MKTNG_PGM_NBR, 
	X.USER_ID,
	CAST (CAST(X.CHANGE_DATE AS DATE FORMAT 'MMM-YYYY') AS CHAR(8) ) AS MONTH_START,
	COUNT(*) AS PROFILE_CHANGE_NBR
FROM(
	NONSEQUENCED TRANSACTIONTIME
	SELECT	DISTINCT	 
		REGIS_PRSNA_ID, 
		LEGAL_ENT_NBR, 
		MKTNG_PGM_NBR, 
		SYS_LAST_MODIFIED_BY AS USER_ID,
		CAST(SYS_LAST_MODIFIED_DATE AS DATE) AS CHANGE_DATE
	FROM	
		REGIS_PRSNA 
	WHERE	
		SYS_LAST_MODIFIED_BY IS NOT NULL
	) X
GROUP BY 1, 2, 3, 4;
.IF ERRORLEVEL > 0 THEN .GOTO EXIT;

.LABEL EXIT

.IF ERRORLEVEL > 4 THEN .GOTO ERR ;
.IF ERRORLEVEL <= 4 THEN .GOTO WARN;

.LABEL ERR
.QUIT 1

.LABEL WARN
.QUIT 0

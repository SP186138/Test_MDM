.RUN FILE .\..\..\logon\LOGON.txt;


.SET ERROROUT STDOUT;      
.SET SESSION CHARSET 'UTF8';
.SET ERRORLEVEL 3624 SEVERITY 0
.SET ERRORLEVEL 3807 SEVERITY 0

DATABASE MDM;

CREATE VOLATILE TABLE LE_TMP AS (
SELECT LEGAL_ENT_NBR FROM TSS_CLEANSE_OUTPUT_LE WHERE STATUS IS NULL
)
WITH DATA
PRIMARY INDEX ( LEGAL_ENT_NBR )
ON COMMIT PRESERVE ROWS;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE TSS_CLEANSE_OUTPUT_LE
SET STATUS='IN_PROGRESS'
WHERE LEGAL_ENT_NBR IN (SELECT LEGAL_ENT_NBR FROM LE_TMP)
AND STATUS IS  NULL
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INS ADDR_TEMP
(MKTNG_PGM_NBR                 ,
REGIS_CNSMR_ID_VAL            ,
DR_ALIAS_CONTACT              ,
DR_FIRST_NAME                 ,
DR_MIDDLE_NAME                ,
DR_LAST_NAME                  ,
DR_MRMRS                      ,
DR_NAME_GENER                 ,
DR_NAME_SUFFIX                ,
DR_NAME_GENDER                ,
DR_COUNTRY_NAME               ,
DR_REGION_NAME                ,
DR_CITY_NAME                  ,
DR_POSTAL_CODE                ,
DR_STREET_NAME                ,
DR_HOUSE_NUMBER1              ,
DR_HOUSE_NUMBER2              ,
DR_POBOX_NUMBER               ,
DR_ADDRESS                    ,
DR_ADDRESS2                   ,
DR_ADDRESS3                   ,
CLEANSED_PHONE_1              ,
CLEANSED_EMAIL_1              ,
PR_REV_GROUP                  ,
GOUT_MATCH_LEVEL              ,
WINDOW_KEY_01                 ,
REFERENCE_HOUSEHOLD_ID        ,
REFERENCE_LEGALENTITYKEY      ,
REFERENCE_REGISTRATIONKEY     ,
LEGAL_ENT_NBR                 ,
BRTH_DATE                     ,
LANG_CODE                     ,
CNSMR_USER_NAME               ,
STATUS                        ,
FULL_NAME                     ,
DPEND_NAME                    ,
PET_NAME                      ,
PR_NAME_FORM_01               ,
DR_ALIAS_ACCOUNT              ,
REFERENCE_MATCHED_LEV1_PATTERN,
REFERENCE_MATCHED_LEV2_PATTERN,
DR_BUSINESS_NAME              ,
EMAIL_IND                     ,
REGIS_DATE                    ,
RECORD_IND                    ,
RECENT_IND                    ,
REGIS_PRSNA_ID                ,
HH_FLAG                       ,
LE_FLAG                       ,
SYS_TARGET_ID                 ,
SYS_AUTH_ID                   ,
SYS_SOURCE                    ,
SYS_CREATED_BY                ,
SYS_CREATION_DATE             ,
SYS_ENT_STATE                 ,
SYS_LAST_MODIFIED_BY          ,
SYS_LAST_MODIFIED_DATE        ,
SYS_NC_TYPE                   ,
SYS_ERR_CODE                  ,
SYS_ERR_SVRTY                 ,
ADDRESS_CONTACT               ,
ADDRESS_SUBSCRPTN             ,
PHONE_CONTACT                 ,
PHONE_SUBSCRPTN               ,
EMAIL_CONTACT                 ,
EMAIL_SUBSCRPTN               ,
NATIONAL_ID_NBR               ,
GL_ACCURACY                   ,
GL_MATCH_FLAG                 ,
GL_LATITUDE                   ,
GL_LONGITUDE                  ,
DR_CLEANSE_LEVEL              ,
HOUSEHOLD_ID                  ,
LEGALENTITYKEY                ,
REGISTRATIONKEY               )
SEL MKTNG_PGM_NBR                 ,
REGIS_CNSMR_ID_VAL            ,
DR_ALIAS_CONTACT              ,
DR_FIRST_NAME                 ,
DR_MIDDLE_NAME                ,
DR_LAST_NAME                  ,
DR_MRMRS                      ,
NULL               DR_NAME_GENER  ,
DR_NAME_SUFFIX                ,
DR_NAME_GENDER                ,
DR_COUNTRY_NAME               ,
DR_REGION_NAME                ,
DR_CITY_NAME                  ,
DR_POSTAL_CODE                ,
DR_STREET_NAME                ,
DR_HOUSE_NUMBER1              ,
DR_HOUSE_NUMBER2              ,
DR_POBOX_NUMBER               ,
DR_ADDRESS                    ,
DR_ADDRESS2                   ,
DR_ADDRESS3                   ,
FULL_PHONE_NUM_1              ,
EMAIL_ADDR_TXT_1              ,
PR_REVIEW_GROUP                  ,
TS_MATCH_LEVEL              ,
WINDOW_KEY_01                 ,
REFERENCE_HOUSEHOLD_ID        ,
REFERENCE_LEGAL_ENTITY_KEY      ,
REFERENCE_REGISTRATION_KEY     ,
LEGAL_ENT_NBR                 ,
BRTH_DATE                     ,
LANG_CODE                     ,
USER_NAME               ,
NULL                      STATUS  ,
FULL_NAME                     ,
DPEND_NAME                    ,
PET_NAME                      ,
PR_NAME_FORM_01               ,
DR_ALIAS_ACCOUNT              ,
NULL REFERENCE_MATCHED_LEV1_PATTERN,
NULL REFERENCE_MATCHED_LEV2_PATTERN,
DR_BUSINESS_NAME              ,
EMAIL_IND                     ,
REGIS_DATE                    ,
NULL                    RECORD_IND,
'Y'                    RECENT_IND,
NULL                REGIS_PRSNA_ID,
NULL                       HH_FLAG,
NULL                       LE_FLAG,
SYS_TARGET_ID                 ,
NULL                   SYS_AUTH_ID,
SYS_SOURCE                    ,
'MDM'                SYS_CREATED_BY,
SYS_CREATION_DATE             ,
NULL                 SYS_ENT_STATE,
NULL         SYS_LAST_MODIFIED_BY ,
NULL        SYS_LAST_MODIFIED_DATE,
SYS_NC_TYPE                   ,
NULL                  SYS_ERR_CODE,
NULL                 SYS_ERR_SVRTY,
ADDRESS_CONTACT               ,
ADDRESS_SUBSCRIPTION             ,
PHONE_CONTACT                 ,
PHONE_SUBSCRIPTION               ,
EMAIL_CONTACT                 ,
EMAIL_SUBSCRIPTION               ,
NATIONAL_ID_NBR               ,
GL_ACCURACY                   ,
GL_MATCH_FLAG                 ,
GL_LATITUDE                   ,
GL_LONGITUDE                  ,
DR_CLEANSE_LEVEL              ,
NULL                  HOUSEHOLD_ID,
NULL                LEGALENTITYKEY,
NULL              REGISTRATIONKEY
FROM TSS_CLEANSE_OUTPUT2
WHERE LEGAL_ENT_NBR IN (SELECT LEGAL_ENT_NBR FROM LE_TMP)
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


CREATE VOLATILE TABLE V_PRSNA_POSTL_ADDR_STG1 AS
(
SELECT * FROM ICRM_STAGE.PRSNA_POSTL_ADDR_STG 
WHERE ( MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,LOAD_ID)
IN (SELECT MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,CAST(SYS_SOURCE AS INTEGER) FROM ADDR_TEMP)
UNION ALL
SELECT * FROM ICRM_STAGE.PRSNA_POSTL_ADDR_STG_HIST
WHERE ( MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,LOAD_ID)
IN (SELECT MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,CAST(SYS_SOURCE AS INTEGER)FROM ADDR_TEMP)
)
WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,LOAD_ID)
ON COMMIT PRESERVE ROWS
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DROP TABLE user_work.V_PRSNA_POSTL_ADDR_STG_32510;

CREATE TABLE user_work.V_PRSNA_POSTL_ADDR_STG_32510  AS 
(SELECT * FROM V_PRSNA_POSTL_ADDR_STG1 ) WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,LOAD_ID)
PARTITION BY MKTNG_PGM_NBR ;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE TABLE V_CNTCT_OPTN_CHCE_STG1 AS
(
SELECT * FROM ICRM_STAGE.CNTCT_OPTN_CHCE_STG 
WHERE ( MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,LOAD_ID)
IN (SELECT MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,CAST(SYS_SOURCE AS INTEGER) FROM ADDR_TEMP)
UNION ALL
SELECT * FROM ICRM_STAGE.CNTCT_OPTN_CHCE_STG_HIST 
WHERE ( MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,LOAD_ID)
IN (SELECT MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,CAST(SYS_SOURCE AS INTEGER)FROM ADDR_TEMP)
)
WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,LOAD_ID)
ON COMMIT PRESERVE ROWS
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DROP TABLE user_work.V_CNTCT_OPTN_CHCE_STG_32510;

CREATE TABLE user_work.V_CNTCT_OPTN_CHCE_STG_32510  AS 
(SELECT * FROM V_CNTCT_OPTN_CHCE_STG1 ) WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,LOAD_ID)
PARTITION BY MKTNG_PGM_NBR ;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


CREATE VOLATILE TABLE V_PRSNA_POSTL_ADDR_STG AS
(
SELECT * FROM MDM.PRSNA_POSTL_ADDR_STG 
WHERE 1=2
)
WITH NO DATA
PRIMARY INDEX ( MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL,LOAD_ID)
ON COMMIT PRESERVE ROWS
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO V_PRSNA_POSTL_ADDR_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
CNTCT_POINT_CATEG_CODE,
ADDR_LINE_1_TXT, 
ADDR_LINE_2_TXT, 
ADDR_LINE_3_TXT, 
STRET_NUM,
STRET_NAME, 
APT_NUM, 
PO_BOX_NUM, 
CITY_NAME, 
TERR_NAME, 
POSTL_AREA_CODE,
GEOC_AREA_TYPE_CODE, 
GEOC_AREA_NAME, 
CNTRY_NAME, 
PREFR_IND, 
VALID_IND, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS, 
CNTCT_OPTN_IND,
CNTCT_OPTN_NBR, 
CNSMR_CHCE_DATETM, 
GUARDN_NAME, 
GUARDN_EMAIL_ADDR_TXT,
GUARDN_CNSNT_IND, 
ACNLGMT_DATE,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE )
SELECT
STG.MKTNG_PGM_NBR, 
STG.REGIS_CNSMR_ID_VAL, 
STG.CNTCT_POINT_CATEG_CODE, 
STG.ADDR_LINE_1_TXT,
STG.ADDR_LINE_2_TXT, 
STG.ADDR_LINE_3_TXT, 
STG.STRET_NUM, 
STG.STRET_NAME, 
STG.APT_NUM, 
STG.PO_BOX_NUM, 
STG.CITY_NAME, 
STG.TERR_NAME,
STG.POSTL_AREA_CODE, 
STG.GEOC_AREA_TYPE_CODE, 
STG.GEOC_AREA_NAME, 
STG.CNTRY_NAME, 
CASE WHEN (stg.PREFR_IND NOT IN ('N','Y') OR stg.PREFR_IND IS NULL) THEN 'Y' ELSE stg.PREFR_IND END, 
CASE WHEN (stg.VALID_IND NOT IN ('N','Y') OR stg.VALID_IND IS NULL) THEN 'Y' ELSE stg.VALID_IND END, 
STG.RECORD_IND, 
STG.LOAD_ID, 
STG.LOAD_TS, 
STG.MDM_LOAD_IND,
'VALIDATED',
CASE WHEN C.CNTCT_OPTN_IND = 'Y' THEN 'I'
     WHEN C.CNTCT_OPTN_IND = 'N' THEN 'O'
     ELSE C.CNTCT_OPTN_IND  END,
C.CNTCT_OPTN_NBR, 
CAST(CAST(C.CNSMR_CHCE_DATETM AS VARCHAR(19)) AS TIMESTAMP(0)), 
C.GUARDN_NAME, 
C.GUARDN_EMAIL_ADDR_TXT, 
C.GUARDN_CNSNT_IND,
C.ACNLGMT_DATE,
b.SOURCE_id,
TRIM(CAST(STG.LOAD_ID AS INTEGER)),
CASE WHEN (STG.RECORD_IND='I')
THEN 'INSERT'
ELSE 'UPDATE'
END,
STG.LOAD_TS
FROM 
V_PRSNA_POSTL_ADDR_STG1 STG

LEFT OUTER JOIN
V_CNTCT_OPTN_CHCE_STG1 C
ON
STG.MKTNG_PGM_NBR = C.MKTNG_PGM_NBR
AND
STG.REGIS_CNSMR_ID_VAL = C.REGIS_CNSMR_ID_VAL
AND
STG.CNTCT_POINT_CATEG_CODE=C.CNTCT_POINT_CATEG_CODE
AND
STG.LOAD_ID = C.LOAD_ID
AND
STG.RECORD_IND = C.RECORD_IND

LEFT JOIN
LOAD_CONTROL B
ON
STG.LOAD_ID = B.LOAD_ID
AND B.LOAD_TYPE='ETL'
where
 (C.CNTCT_POINT_TYPE_CODE IN (SEL AV_CODE  FROM ATTRIBUTE_VALUES B
WHERE B.AV_DESCRIPTION='Postal Address')
OR (C.MKTNG_PGM_NBR IS NULL AND C.REGIS_CNSMR_ID_VAL IS NULL))
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE ADDR_TEMP
--FROM REGIS_PRSNA RP
FROM (SELECT DISTINCT MKTNG_PGM_NBR,REGIS_CNSMR_ID_VAL,SYS_TARGET_ID,REGIS_PRSNA_ID from REGIS_PRSNA qualify rank () over ( partition by MKTNG_PGM_NBR,REGIS_CNSMR_ID_VAL,SYS_TARGET_ID order by regis_prsna_id desc )=1) RP
SET REGIS_PRSNA_ID =RP.REGIS_PRSNA_ID
WHERE ADDR_TEMP.MKTNG_PGM_NBR=RP.MKTNG_PGM_NBR
AND   ADDR_TEMP.REGIS_CNSMR_ID_VAL=RP.REGIS_CNSMR_ID_VAL
AND   ADDR_TEMP.SYS_TARGET_ID=RP.SYS_TARGET_ID;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO ADDR_INPUT
(
 CNTCT_POINT_CATEG_CODE
,REGIS_PRSNA_ID
,MKTNG_PGM_NBR
,LEGAL_ENT_NBR
,WIN_KEY
,SUBSCRPTN_OPT_NBR
,SUBSCRPTN_OPT_IND
,CNSMR_CHCE_DATETM
,PREF_CNTCT_POINT_IND
,ADDR_LINE_1_TXT
,ADDR_LINE_2_TXT
,ADDR_LINE_3_TXT
,STRET_NUM
,STRET_NAME
,APT_NUM
,PO_BOX_NUM
,CITY_NAME
,POSTL_AREA_CODE
,TERR_NAME
,CNTRY_CODE
,LAT_MEAS
,LONG_MEAS
,VALID_CNTCT_POINT_IND
,GUARDN_NAME
,GUARDN_EMAIL_ADDR_TXT
,GUARDN_CNSNT_IND
,ACNLGMT_DATE
,PR_REV_GROUP
,PR_GEOCODE_FAIL
,SYS_SOURCE
,SYS_TARGET_ID
,SYS_AUTH_ID
,SYS_CREATED_BY
,SYS_CREATION_DATE
,SYS_LAST_MODIFIED_DATE
,SYS_ENT_STATE
,SYS_LAST_MODIFIED_BY
,SYS_NC_TYPE
,SYS_ERR_CODE 
,SYS_ERR_SVRTY
,DATA_SRCE_NBR
,POSTL_STATUS_CODE
,GL_ACCURACY
,GL_MATCH_FLAG
,GL_LATITUDE
,GL_LONGITUDE
,DR_CLEANSE_LEVEL)
SELECT
STG.CNTCT_POINT_CATEG_CODE
,TOUT.REGIS_PRSNA_ID REFERENCE_REGISTRATIONKEY1
,TOUT.MKTNG_PGM_NBR
,TOUT.LEGAL_ENT_NBR
,TOUT.WINDOW_KEY_01
,STG.CNTCT_OPTN_NBR
,STG.CNTCT_OPTN_IND
,STG.CNSMR_CHCE_DATETM
,STG.PREFR_IND
,TOUT.DR_ADDRESS
,TOUT.DR_ADDRESS2
,TOUT.DR_ADDRESS3
,TOUT.DR_HOUSE_NUMBER1
,TOUT.DR_STREET_NAME
,TOUT.DR_HOUSE_NUMBER2
,TOUT.DR_POBOX_NUMBER
,TOUT.DR_CITY_NAME
,TOUT.DR_POSTAL_CODE
,CASE WHEN TR.TERR_RECODE IS NOT NULL
            THEN TR.TERR_RECODE
            ELSE TOUT.DR_REGION_NAME
  END AS DR_REGION_NAME
,CASE WHEN CR.CNTRY_RECODE IS NOT NULL
      THEN CR.CNTRY_RECODE 
      ELSE TOUT.DR_COUNTRY_NAME
  END AS DR_COUNTRY_NAME
,NULL LAT_MEAS
,NULL LONG_MEAS
,CASE 
WHEN (GOUT_MATCH_LEVEL IN ('0','9')
      AND DR_COUNTRY_NAME IN ('JPN','TWN','KOR','AUS','MYS','SGP','USA','CAN','IDN','THA','VNM'))
      OR (GOUT_MATCH_LEVEL IN ('0','3')
      AND DR_COUNTRY_NAME IN ('NZL'))      
      OR DR_COUNTRY_NAME IN ('ARG','CHL','MEX','BRA')
      OR (PR_REV_GROUP IN ('0','000','001','002','003','005','008','009','010','012','019')
      AND  DR_COUNTRY_NAME NOT IN ('JPN','TWN','KOR','NZL','AUS','MYS',
      'SGP','USA','CAN','BRA','MEX','FRA','BEL','NLD','ITA','GRC','AUT','CHE','DEU','ESP','IRL'
      ,'DNK','FIN','NOR','SWE','GBR','PRT','IDN','THA','VNM'))
      OR (GOUT_MATCH_LEVEL = '0' AND PR_REV_GROUP IN ('000','002','005','007','008','009','010','014','018')
      AND DR_COUNTRY_NAME IN ('FRA'))
      OR (GOUT_MATCH_LEVEL IN ('0','3') AND PR_REV_GROUP IN ('000','002','005','008','009','010','018')
      AND DR_COUNTRY_NAME IN ('IRL','AUT','ITA'))      
      OR (GOUT_MATCH_LEVEL = '0' AND PR_REV_GROUP IN ('000','002','005','008','009','010')
      AND DR_COUNTRY_NAME IN ('GRC'))    
      OR (GOUT_MATCH_LEVEL IN ('0') AND PR_REV_GROUP IN ('000','002','005','008','009','010','018')
      AND DR_COUNTRY_NAME IN ('CHE','DEU','BEL','NLD'))
      OR (GOUT_MATCH_LEVEL IN ('0','3','8') AND PR_REV_GROUP IN ('000','002','005','008','009','010','018')
     AND DR_COUNTRY_NAME IN ('DNK','FIN','NOR'))   
      OR (GOUT_MATCH_LEVEL IN ('0','3','8') AND PR_REV_GROUP IN ('000','002','005','007','008','009','010','018')
      AND DR_COUNTRY_NAME IN ('SWE'))       
      OR (GOUT_MATCH_LEVEL = '0' AND PR_REV_GROUP IN ('000','002','005','008','009','010','014','018')
      AND DR_COUNTRY_NAME IN ('GBR'))    
      OR (((GOUT_MATCH_LEVEL IN ('0') AND PR_REV_GROUP IN ('000','002','005','008','009','010','018'))
      OR TRIM(GL_ACCURACY) IN ('4','5'))
      AND DR_COUNTRY_NAME IN ('ESP'))
THEN 'Y'
WHEN ((GOUT_MATCH_LEVEL IS NULL OR TRIM(GOUT_MATCH_LEVEL) = '') 
 AND (PR_REV_GROUP IS NULL OR TRIM(PR_REV_GROUP) = ''))
OR  DR_COUNTRY_NAME IN ('HKG','PRT')
OR  (GOUT_MATCH_LEVEL NOT IN ('0','9')
      AND DR_COUNTRY_NAME IN ('JPN','TWN','KOR','NZL','AUS','MYS','SGP','IDN','THA','VNM'))
THEN STG.VALID_IND
ELSE 'N'
END VALID_CNTCT_POINT_IND
,STG.GUARDN_NAME
,STG.GUARDN_EMAIL_ADDR_TXT
,STG.GUARDN_CNSNT_IND
,STG.ACNLGMT_DATE
,TRIM(TOUT.PR_REV_GROUP) PR_REV_GROUP
,TOUT.GOUT_MATCH_LEVEL
,STG.SYS_SOURCE
,STG.SYS_TARGET_ID
,STG.SYS_AUTH_ID
,STG.SYS_CREATED_BY
,CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)) SYS_CREATION_DATE
,CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)) SYS_LAST_MODIFIED_DATE
,STG.SYS_ENT_STATE
,STG.SYS_LAST_MODIFIED_BY
,STG.SYS_NC_TYPE
,STG.SYS_ERR_CODE 
,STG.SYS_ERR_SVRTY
,STG.SYS_TARGET_ID SYS_TARGET_ID1
,'AC' POSTL_STATUS_CODE
,GL_ACCURACY
,GL_MATCH_FLAG
,GL_LATITUDE
,GL_LONGITUDE
,DR_CLEANSE_LEVEL
FROM
ADDR_TEMP TOUT
JOIN
V_PRSNA_POSTL_ADDR_STG STG
ON
TOUT.MKTNG_PGM_NBR = STG.MKTNG_PGM_NBR
AND
TOUT.REGIS_CNSMR_ID_VAL = STG.REGIS_CNSMR_ID_VAL
AND
TOUT.SYS_SOURCE = STG.SYS_SOURCE
AND TOUT.ADDRESS_CONTACT = STG.CNTCT_POINT_CATEG_CODE
--AND COALESCE(TOUT.ADDRESS_SUBSCRPTN,'0') = COALESCE(STG.CNTCT_OPTN_NBR,0)
LEFT OUTER JOIN TERR_RECODE TR
ON TOUT.DR_REGION_NAME = TR.TERR
AND TOUT.DR_COUNTRY_NAME = TR.CNTRY
LEFT OUTER JOIN CNTRY_RECODE CR
ON TOUT.DR_COUNTRY_NAME = CR.CNTRY
WHERE TOUT.DR_COUNTRY_NAME NOT IN ('IND','CHN')
AND TOUT.RECENT_IND = 'Y'
QUALIFY RANK() OVER (PARTITION BY REFERENCE_REGISTRATIONKEY1,STG.CNTCT_POINT_CATEG_CODE--,COALESCE(STG.CNTCT_OPTN_NBR,0)
ORDER BY STG.SYS_CREATION_DATE DESC
,STG.SYS_SOURCE DESC
,STG.SYS_NC_TYPE DESC
,STG.CNSMR_CHCE_DATETM DESC
,TOUT.DR_ADDRESS DESC
,TOUT.WINDOW_KEY_01 DESC
,COALESCE(STG.CNTCT_OPTN_NBR,0) DESC
,COALESCE(dr_region_name,'')  DESC
) = 1;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INSERT INTO ADDR_INPUT
(
 CNTCT_POINT_CATEG_CODE
,REGIS_PRSNA_ID
,MKTNG_PGM_NBR
,LEGAL_ENT_NBR
,WIN_KEY
,SUBSCRPTN_OPT_NBR
,SUBSCRPTN_OPT_IND
,CNSMR_CHCE_DATETM
,PREF_CNTCT_POINT_IND
,ADDR_LINE_1_TXT
,ADDR_LINE_2_TXT
,ADDR_LINE_3_TXT
,STRET_NUM
,STRET_NAME
,APT_NUM
,PO_BOX_NUM
,CITY_NAME
,POSTL_AREA_CODE
,TERR_NAME
,CNTRY_CODE
,LAT_MEAS
,LONG_MEAS
,VALID_CNTCT_POINT_IND
,GUARDN_NAME
,GUARDN_EMAIL_ADDR_TXT
,GUARDN_CNSNT_IND
,ACNLGMT_DATE
,PR_REV_GROUP
,PR_GEOCODE_FAIL
,SYS_SOURCE
,SYS_TARGET_ID
,SYS_AUTH_ID
,SYS_CREATED_BY
,SYS_CREATION_DATE
,SYS_LAST_MODIFIED_DATE
,SYS_ENT_STATE
,SYS_LAST_MODIFIED_BY
,SYS_NC_TYPE
,SYS_ERR_CODE 
,SYS_ERR_SVRTY
,DATA_SRCE_NBR
,POSTL_STATUS_CODE
,GL_ACCURACY
,GL_MATCH_FLAG
,GL_LATITUDE
,GL_LONGITUDE
,DR_CLEANSE_LEVEL)
SELECT
STG.CNTCT_POINT_CATEG_CODE
,TOUT.REGIS_PRSNA_ID REFERENCE_REGISTRATIONKEY1
,TOUT.MKTNG_PGM_NBR
,TOUT.LEGAL_ENT_NBR
,TOUT.WINDOW_KEY_01
,STG.CNTCT_OPTN_NBR
,STG.CNTCT_OPTN_IND
,STG.CNSMR_CHCE_DATETM
,STG.PREFR_IND
,STG.ADDR_LINE_1_TXT
,STG.ADDR_LINE_2_TXT
,STG.ADDR_LINE_3_TXT
,STG.STRET_NUM
,STG.STRET_NAME
,STG.APT_NUM
,STG.PO_BOX_NUM
,STG.CITY_NAME
,STG.POSTL_AREA_CODE
,CASE WHEN TR.TERR_RECODE IS NOT NULL
            THEN TR.TERR_RECODE
            ELSE TOUT.DR_REGION_NAME
  END AS DR_REGION_NAME
,CASE WHEN CR.CNTRY_RECODE IS NOT NULL
      THEN CR.CNTRY_RECODE 
      ELSE TOUT.DR_COUNTRY_NAME
  END AS DR_COUNTRY_NAME
,NULL LAT_MEAS
,NULL LONG_MEAS
,'Y'  VALID_CNTCT_POINT_IND
,STG.GUARDN_NAME
,STG.GUARDN_EMAIL_ADDR_TXT
,STG.GUARDN_CNSNT_IND
,STG.ACNLGMT_DATE
,TRIM(TOUT.PR_REV_GROUP) PR_REV_GROUP
,TOUT.GOUT_MATCH_LEVEL
,STG.SYS_SOURCE
,STG.SYS_TARGET_ID
,STG.SYS_AUTH_ID
,STG.SYS_CREATED_BY
,CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)) SYS_CREATION_DATE
,CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)) SYS_LAST_MODIFIED_DATE
,STG.SYS_ENT_STATE
,STG.SYS_LAST_MODIFIED_BY
,STG.SYS_NC_TYPE
,STG.SYS_ERR_CODE 
,STG.SYS_ERR_SVRTY
,STG.SYS_TARGET_ID SYS_TARGET_ID1
,'AC' POSTL_STATUS_CODE
,GL_ACCURACY
,GL_MATCH_FLAG
,GL_LATITUDE
,GL_LONGITUDE
,DR_CLEANSE_LEVEL
FROM
ADDR_TEMP TOUT
JOIN
V_PRSNA_POSTL_ADDR_STG STG
ON
TOUT.MKTNG_PGM_NBR = STG.MKTNG_PGM_NBR
AND
TOUT.REGIS_CNSMR_ID_VAL = STG.REGIS_CNSMR_ID_VAL
AND
TOUT.SYS_SOURCE = STG.SYS_SOURCE
AND TOUT.ADDRESS_CONTACT = STG.CNTCT_POINT_CATEG_CODE
--AND COALESCE(TOUT.ADDRESS_SUBSCRPTN,'0') = COALESCE(STG.CNTCT_OPTN_NBR,0)
LEFT OUTER JOIN TERR_RECODE TR
ON TOUT.DR_REGION_NAME = TR.TERR
AND TOUT.DR_COUNTRY_NAME = TR.CNTRY
LEFT OUTER JOIN CNTRY_RECODE CR
ON TOUT.DR_COUNTRY_NAME = CR.CNTRY
WHERE TOUT.DR_COUNTRY_NAME IN ('IND','CHN')
AND TOUT.RECENT_IND = 'Y'
QUALIFY RANK() OVER (PARTITION BY REFERENCE_REGISTRATIONKEY1,STG.CNTCT_POINT_CATEG_CODE--,COALESCE(STG.CNTCT_OPTN_NBR,0)
ORDER BY STG.SYS_CREATION_DATE DESC
,STG.SYS_SOURCE DESC
,STG.SYS_NC_TYPE DESC
,STG.CNSMR_CHCE_DATETM DESC
,TOUT.DR_ADDRESS DESC
,TOUT.WINDOW_KEY_01 DESC
,COALESCE(STG.CNTCT_OPTN_NBR,0) DESC
,COALESCE(dr_region_name,'')  DESC
) = 1;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/**********************************************************************************************
TERR CODE UPDATES
**********************************************************************************************/

/*********************************************************************************************
This update is to populate the PO_BOX_NUM attribute in case the address is a PO Box Num for USA
**********************************************************************************************/
UPDATE ADDR_INPUT
SET PO_BOX_NUM = CASE WHEN ADDR_LINE_1_TXT LIKE 'PO BOX%' 
                      THEN ADDR_LINE_1_TXT
                      ELSE NULL
                  END
WHERE 
--CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL)
 CNTRY_CODE IN ('USA','CAN');
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the TERR_CODE with the TERR_NAME. TERR_NAME is populated with the 
output from Trillium
**********************************************************************************************/
UPDATE ADDR_INPUT
SET TERR_CODE = TERR_NAME;
--WHERE CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


/*********************************************************************************************
This update is to populate the TERR_CODE with the BR-/IN-/JP- prefix from the reference table as 
trillium does not provide the IN-/JP- prefix.
**********************************************************************************************/

UPDATE ADDR_INPUT FROM TERR a
SET TERR_CODE = a.TERR_CODE
WHERE ADDR_INPUT.TERR_CODE = a.TERR_CODE_NTV
AND a.CNTRY_CODE = 'IND' and ADDR_INPUT.CNTRY_CODE = 'IND';
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the CITY_CODE from the CITY reference table.
**********************************************************************************************/
UPDATE PA
FROM ADDR_INPUT PA, CITY XR
SET CITY_CODE = XR.CITY_CODE
WHERE PA.TERR_CODE = XR.TERR_CODE
AND PA.CITY_NAME = XR.CITY_NAME
AND PA.CNTRY_CODE = 'IND';
----AND CAST(PA.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the TERR_NAME from the TERR reference table FOR IND
**********************************************************************************************/

UPDATE ADDR_INPUT FROM TERR T
SET TERR_NAME = T.TERR_NAME
WHERE ADDR_INPUT.TERR_CODE = T.TERR_CODE
AND ADDR_INPUT.CNTRY_CODE IN('IND');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


/*********************************************************************************************
This update is to populate the TERR_CODE with the BR-/IN-/JP- prefix from the reference table as 
trillium does not provide the IN-/JP- prefix.
**********************************************************************************************/


UPDATE ADDR_INPUT FROM TERR a
SET TERR_CODE = a.TERR_CODE
WHERE ADDR_INPUT.TERR_CODE = a.TERR_CODE_NTV
AND a.CNTRY_CODE = 'JPN' and ADDR_INPUT.CNTRY_CODE = 'JPN';
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


/*********************************************************************************************
This update is to populate the CITY_CODE from the CITY reference table.
**********************************************************************************************/
UPDATE PA
FROM ADDR_INPUT PA, CITY XR
SET CITY_CODE = XR.CITY_CODE
WHERE PA.TERR_CODE = XR.TERR_CODE
AND PA.CITY_NAME = XR.CITY_NAME_NTV
AND PA.CNTRY_CODE = 'JPN';
--AND CAST(PA.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the TERR_NAME from the TERR reference table FOR JPN
**********************************************************************************************/

UPDATE ADDR_INPUT FROM TERR T
SET TERR_NAME = T.TERR_NAME
WHERE ADDR_INPUT.TERR_CODE = T.TERR_CODE
AND ADDR_INPUT.CNTRY_CODE IN('JPN');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


/* UPDATE TERR_CODE & CITY_CODE FOR AUS */
/*********************************************************************************************
This update is to populate the CITY_CODE from the CITY reference table and POSTL_AREA if there
is no match in the CITY table.
**********************************************************************************************/
UPDATE ADDR_INPUT
FROM(SEL DISTINCT EDW.CITY_NAME,
EDW.POSTL_AREA_CODE,
EDW.CNTRY_CODE,
CASE WHEN C.CITY_NAME IS NOT NULL
     THEN C.CITY_CODE
     WHEN PA.POSTL_AREA_CODE IS NOT NULL
     THEN PA.CITY_CODE
     ELSE NULL END AS CITY_CODE,
CASE WHEN C.CITY_NAME IS NOT NULL
     THEN C.TERR_CODE
     WHEN PA.POSTL_AREA_CODE IS NOT NULL
     THEN PA.TERR_CODE
     ELSE NULL END AS TERR_CODE
FROM ADDR_INPUT EDW
LEFT OUTER JOIN
(SEL CITY_NAME,CITY_CODE,TERR_CODE FROM
CITY 
WHERE CITY_NAME NOT IN(SEL COALESCE(A.CITY_NAME,'') FROM(SEL CITY_NAME,COUNT(*) AS CNT FROM CITY
GROUP BY 1 
HAVING CNT>1)A))C
ON EDW.CITY_NAME = C.CITY_NAME
LEFT OUTER JOIN
(SEL POSTL_AREA_CODE,CNTRY_CODE,CITY_CODE,TERR_CODE
FROM POSTL_AREA WHERE (POSTL_AREA_CODE,CNTRY_CODE) NOT IN(SEL POSTL_AREA_CODE,CNTRY_CODE FROM
(SEL CNTRY_CODE,TERR_CODE,POSTL_AREA_CODE,CITY_CODE
FROM POSTL_AREA
GROUP BY 1,2,3,4) B
GROUP BY 1,2
HAVING COUNT(*) >1))PA
ON EDW.POSTL_AREA_CODE = PA.POSTL_AREA_CODE
AND
EDW.CNTRY_CODE = PA.CNTRY_CODE
WHERE EDW.CNTRY_CODE = 'AUS'
)A
SET CITY_CODE = A.CITY_CODE
, TERR_CODE = A.TERR_CODE
WHERE 
ADDR_INPUT.CITY_NAME = A.CITY_NAME
AND ADDR_INPUT.POSTL_AREA_CODE = A.POSTL_AREA_CODE
AND ADDR_INPUT.CNTRY_CODE = A.CNTRY_CODE;
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/* UPDATE TERR CODE & CITY CODE FOR RECORDS WHERE EDW.CITY_NAME IS NULL*/
UPDATE ADDR_INPUT
FROM(SEL DISTINCT 
--EDW.CITY_NAME,
EDW.POSTL_AREA_CODE,
EDW.CNTRY_CODE,
CASE --WHEN C.CITY_NAME IS NOT NULL
     --THEN C.CITY_CODE
     WHEN PA.POSTL_AREA_CODE IS NOT NULL
     THEN PA.CITY_CODE
     ELSE NULL END AS CITY_CODE,
CASE --WHEN C.CITY_NAME IS NOT NULL
     --THEN C.TERR_CODE
     WHEN PA.POSTL_AREA_CODE IS NOT NULL
     THEN PA.TERR_CODE
     ELSE NULL END AS TERR_CODE
FROM ADDR_INPUT EDW
LEFT OUTER JOIN
(SEL POSTL_AREA_CODE,CNTRY_CODE,CITY_CODE,TERR_CODE
FROM POSTL_AREA WHERE (POSTL_AREA_CODE,CNTRY_CODE) NOT IN(SEL POSTL_AREA_CODE,CNTRY_CODE FROM
(SEL CNTRY_CODE,TERR_CODE,POSTL_AREA_CODE,CITY_CODE
FROM POSTL_AREA
GROUP BY 1,2,3,4) B
GROUP BY 1,2
HAVING COUNT(*) >1))PA
ON EDW.POSTL_AREA_CODE = PA.POSTL_AREA_CODE
AND
EDW.CNTRY_CODE = PA.CNTRY_CODE
WHERE EDW.CNTRY_CODE = 'AUS'
AND EDW.CITY_NAME IS NULL
)A
SET CITY_CODE = A.CITY_CODE
, TERR_CODE = A.TERR_CODE
WHERE 
ADDR_INPUT.CITY_NAME IS NULL
AND ADDR_INPUT.POSTL_AREA_CODE = A.POSTL_AREA_CODE
AND ADDR_INPUT.CNTRY_CODE = A.CNTRY_CODE
AND ADDR_INPUT.CITY_CODE IS NULL;
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/* UPDATE TERR CODE & CITY CODE FOR RECORDS WHERE EDW.POSTAL_AREA_CODE IS NULL*/
UPDATE ADDR_INPUT
FROM(SEL DISTINCT 
EDW.CITY_NAME,
--EDW.POSTL_AREA_CODE,
EDW.CNTRY_CODE,
CASE WHEN C.CITY_NAME IS NOT NULL
     THEN C.CITY_CODE
     --WHEN PA.POSTL_AREA_CODE IS NOT NULL
     --THEN PA.CITY_CODE
     ELSE NULL END AS CITY_CODE,
CASE WHEN C.CITY_NAME IS NOT NULL
     THEN C.TERR_CODE
     --WHEN PA.POSTL_AREA_CODE IS NOT NULL
     --THEN PA.TERR_CODE
     ELSE NULL END AS TERR_CODE
FROM ADDR_INPUT EDW
LEFT OUTER JOIN
(SEL CITY_NAME,CITY_CODE,C.TERR_CODE,CNTRY_CODE FROM
CITY C
INNER JOIN TERR T
ON C.TERR_CODE=T.TERR_CODE 
WHERE CITY_NAME NOT IN(SEL COALESCE(A.CITY_NAME,'') FROM(SEL CITY_NAME,COUNT(*) AS CNT FROM CITY
GROUP BY 1 
HAVING CNT>1)A))C
ON EDW.CITY_NAME = C.CITY_NAME
AND EDW.CNTRY_CODE = C.CNTRY_CODE
WHERE EDW.CNTRY_CODE = 'AUS'
AND EDW.POSTL_AREA_CODE IS NULL
)A
SET CITY_CODE = A.CITY_CODE
, TERR_CODE = A.TERR_CODE
WHERE 
ADDR_INPUT.POSTL_AREA_CODE IS NULL
AND ADDR_INPUT.CITY_NAME = A.CITY_NAME
AND ADDR_INPUT.CNTRY_CODE = A.CNTRY_CODE
AND ADDR_INPUT.CITY_CODE IS NULL;
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE ADDR_INPUT FROM TERR T
SET TERR_CODE = T.TERR_CODE
WHERE ADDR_INPUT.TERR_NAME = T.TERR_NAME
AND ADDR_INPUT.TERR_CODE IS NULL
AND ADDR_INPUT.LEGAL_ENT_NBR IN(6);
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the TERR_CODE from the TERR_RECODE_VAL reference table as the TERR
table does not have few native values. Customization requested from P&G.
**********************************************************************************************/

UPDATE ADDR_INPUT FROM TERR_RECODE_VAL T
SET TERR_CODE = T.TERR_CODE
WHERE ADDR_INPUT.TERR_NAME = T.TERR_NAME
--AND ADDR_INPUT.TERR_CODE IS NULL
AND ADDR_INPUT.CNTRY_CODE IN('AUS');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE ADDR_INPUT
SET TERR_CODE = TERR_NAME
WHERE ADDR_INPUT.CNTRY_CODE IN('AUS')
AND ADDR_INPUT.TERR_CODE IS NULL;
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the TERR_NAME from the TERR reference table FOR AUS
**********************************************************************************************/

UPDATE ADDR_INPUT FROM TERR T
SET TERR_NAME = T.TERR_NAME
WHERE ADDR_INPUT.TERR_CODE = T.TERR_CODE
AND ADDR_INPUT.CNTRY_CODE IN('AUS');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


/* UPDATE TERR_CODE & CITY_CODE FOR CHINA*/
/*********************************************************************************************
This update is to populate the CITY_CODE from the CITY reference table and POSTL_AREA if there
is no match in the CITY table.

Trillium provides the city name without the district value. Hence the TRIM on city name in the 
CITY table.
**********************************************************************************************/
UPDATE ADDR_INPUT
FROM(SEL DISTINCT EDW.CITY_NAME,
EDW.POSTL_AREA_CODE,
EDW.CNTRY_CODE,
CASE WHEN C.CITY_NAME_NTV IS NOT NULL
     THEN C.CITY_CODE
     WHEN C1.CITY_NAME_NTV1 IS NOT NULL
     THEN C1.CITY_CODE
     WHEN PA.POSTL_AREA_CODE IS NOT NULL
     THEN PA.CITY_CODE
     ELSE NULL END AS CITY_CODE,
CASE WHEN C.CITY_NAME_NTV IS NOT NULL
     THEN C.TERR_CODE
     WHEN C1.CITY_NAME_NTV1 IS NOT NULL
     THEN C1.TERR_CODE
     WHEN PA.POSTL_AREA_CODE IS NOT NULL
     THEN PA.TERR_CODE
     ELSE NULL END AS TERR_CODE
FROM ADDR_INPUT EDW
LEFT OUTER JOIN
(SEL CITY_NAME_NTV,CITY_CODE,TERR_CODE FROM
CITY 
WHERE CITY_NAME_NTV NOT IN(SEL COALESCE(A.CITY_NAME_NTV,'') FROM(SEL CITY_NAME_NTV,COUNT(*) AS CNT FROM CITY
GROUP BY 1 
HAVING CNT>1)A)
)C
ON EDW.CITY_NAME = C.CITY_NAME_NTV
LEFT OUTER JOIN
(SEL TRIM(TRAILING _UNICODE '5E02'XCV FROM CITY_NAME_NTV) CITY_NAME_NTV1,CITY_CODE,TERR_CODE FROM
CITY
WHERE TRIM(TRAILING _UNICODE '5E02'XCV FROM CITY.CITY_NAME_NTV) NOT IN(SEL COALESCE(B.CITY_NAME_NTV2,'') 
FROM(SEL TRIM(TRAILING _UNICODE '5E02'XCV FROM CITY_NAME_NTV) AS CITY_NAME_NTV2,COUNT(*) AS CNT FROM CITY
GROUP BY 1
HAVING CNT>1)B)
)C1
ON EDW.CITY_NAME = C1.CITY_NAME_NTV1
LEFT OUTER JOIN
(SEL POSTL_AREA_CODE,CNTRY_CODE,CITY_CODE,TERR_CODE
FROM POSTL_AREA WHERE (POSTL_AREA_CODE,CNTRY_CODE) NOT IN(SEL POSTL_AREA_CODE,CNTRY_CODE FROM
(SEL CNTRY_CODE,TERR_CODE,POSTL_AREA_CODE,CITY_CODE
FROM POSTL_AREA
GROUP BY 1,2,3,4) B
GROUP BY 1,2
HAVING COUNT(*) >1)) PA
ON EDW.POSTL_AREA_CODE = PA.POSTL_AREA_CODE
AND
EDW.CNTRY_CODE = PA.CNTRY_CODE
WHERE EDW.MKTNG_PGM_NBR IN(53,91,55,37,54,88,97,67,66,33,36,35,38,34,49,56)
)A
SET CITY_CODE = A.CITY_CODE
, TERR_CODE = A.TERR_CODE
WHERE 
ADDR_INPUT.CITY_NAME = A.CITY_NAME
AND ADDR_INPUT.POSTL_AREA_CODE = A.POSTL_AREA_CODE
AND ADDR_INPUT.CNTRY_CODE = A.CNTRY_CODE
AND ADDR_INPUT.MKTNG_PGM_NBR IN(53,91,55,37,54,88,97,67,66,33,36,35,38,34,49,56);
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/* UPDATE TERR_CODE & CITY_CODE FOR RECORDS HAVING EDW.CITY AS NULL */
UPDATE ADDR_INPUT
FROM(SEL DISTINCT 
--EDW.CITY_NAME,
EDW.POSTL_AREA_CODE,
EDW.CNTRY_CODE,
CASE --WHEN C.CITY_NAME_NTV IS NOT NULL
     --THEN C.CITY_CODE
     --WHEN C1.CITY_NAME_NTV1 IS NOT NULL
     --THEN C1.CITY_CODE
     WHEN PA.POSTL_AREA_CODE IS NOT NULL
     THEN PA.CITY_CODE
     ELSE NULL END AS CITY_CODE,
CASE --WHEN C.CITY_NAME_NTV IS NOT NULL
     --THEN C.TERR_CODE
     --WHEN C1.CITY_NAME_NTV1 IS NOT NULL
     --THEN C1.TERR_CODE
     WHEN PA.POSTL_AREA_CODE IS NOT NULL
     THEN PA.TERR_CODE
     ELSE NULL END AS TERR_CODE
FROM ADDR_INPUT EDW
/* LEFT OUTER JOIN
(SEL CITY_NAME_NTV,CITY_CODE,TERR_CODE FROM
CITY 
WHERE CITY_NAME_NTV NOT IN(SEL COALESCE(A.CITY_NAME_NTV,'') FROM(SEL CITY_NAME_NTV,COUNT(*) AS CNT FROM CITY
GROUP BY 1 
HAVING CNT>1)A)
)C
ON EDW.CITY_NAME = C.CITY_NAME_NTV
LEFT OUTER JOIN
(SEL TRIM(TRAILING _UNICODE '5E02'XCV FROM CITY_NAME_NTV) CITY_NAME_NTV1,CITY_CODE,TERR_CODE FROM
CITY
WHERE TRIM(TRAILING _UNICODE '5E02'XCV FROM CITY.CITY_NAME_NTV) NOT IN(SEL COALESCE(B.CITY_NAME_NTV2,'') 
FROM(SEL TRIM(TRAILING _UNICODE '5E02'XCV FROM CITY_NAME_NTV) AS CITY_NAME_NTV2,COUNT(*) AS CNT FROM CITY
GROUP BY 1
HAVING CNT>1)B)
)C1
ON EDW.CITY_NAME = C1.CITY_NAME_NTV1 */
LEFT OUTER JOIN
(SEL POSTL_AREA_CODE,CNTRY_CODE,CITY_CODE,TERR_CODE
FROM POSTL_AREA WHERE (POSTL_AREA_CODE,CNTRY_CODE) NOT IN(SEL POSTL_AREA_CODE,CNTRY_CODE FROM
(SEL CNTRY_CODE,TERR_CODE,POSTL_AREA_CODE,CITY_CODE
FROM POSTL_AREA
GROUP BY 1,2,3,4) B
GROUP BY 1,2
HAVING COUNT(*) >1)) PA
ON EDW.POSTL_AREA_CODE = PA.POSTL_AREA_CODE
AND
EDW.CNTRY_CODE = PA.CNTRY_CODE
WHERE EDW.MKTNG_PGM_NBR IN(53,91,55,37,54,88,97,67,66,33,36,35,38,34,49,56)
AND EDW.CITY_NAME IS NULL
)A
SET CITY_CODE = A.CITY_CODE
, TERR_CODE = A.TERR_CODE
WHERE 
ADDR_INPUT.CITY_NAME IS NULL
AND ADDR_INPUT.POSTL_AREA_CODE = A.POSTL_AREA_CODE
AND ADDR_INPUT.CNTRY_CODE = A.CNTRY_CODE
AND ADDR_INPUT.CITY_CODE IS NULL
AND ADDR_INPUT.MKTNG_PGM_NBR IN(53,91,55,37,54,88,97,67,66,33,36,35,38,34,49,56);
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/* UPDATE TERR CODE & CITY CODE FOR RECORDS HAVING POSTAL_AREA_CODE AS NULL*/
UPDATE ADDR_INPUT
FROM(SEL DISTINCT EDW.CITY_NAME,
--EDW.POSTL_AREA_CODE,
EDW.CNTRY_CODE,
CASE WHEN C.CITY_NAME_NTV IS NOT NULL
     THEN C.CITY_CODE
     WHEN C1.CITY_NAME_NTV1 IS NOT NULL
     THEN C1.CITY_CODE
     --WHEN PA.POSTL_AREA_CODE IS NOT NULL
     --THEN PA.CITY_CODE
     ELSE NULL END AS CITY_CODE,
CASE WHEN C.CITY_NAME_NTV IS NOT NULL
     THEN C.TERR_CODE
     WHEN C1.CITY_NAME_NTV1 IS NOT NULL
     THEN C1.TERR_CODE
     --WHEN PA.POSTL_AREA_CODE IS NOT NULL
     --THEN PA.TERR_CODE
     ELSE NULL END AS TERR_CODE
FROM ADDR_INPUT EDW
LEFT OUTER JOIN
(SEL CITY_NAME_NTV,CITY_CODE,TERR_CODE FROM
CITY 
WHERE CITY_NAME_NTV NOT IN(SEL COALESCE(A.CITY_NAME_NTV,'') FROM(SEL CITY_NAME_NTV,COUNT(*) AS CNT FROM CITY
GROUP BY 1 
HAVING CNT>1)A)
)C
ON EDW.CITY_NAME = C.CITY_NAME_NTV
LEFT OUTER JOIN
(SEL TRIM(TRAILING _UNICODE '5E02'XCV FROM CITY_NAME_NTV) CITY_NAME_NTV1,CITY_CODE,TERR_CODE FROM
CITY
WHERE TRIM(TRAILING _UNICODE '5E02'XCV FROM CITY.CITY_NAME_NTV) NOT IN(SEL COALESCE(B.CITY_NAME_NTV2,'') 
FROM(SEL TRIM(TRAILING _UNICODE '5E02'XCV FROM CITY_NAME_NTV) AS CITY_NAME_NTV2,COUNT(*) AS CNT FROM CITY
GROUP BY 1
HAVING CNT>1)B)
)C1
ON EDW.CITY_NAME = C1.CITY_NAME_NTV1
/* LEFT OUTER JOIN
(SEL POSTL_AREA_CODE,CNTRY_CODE,CITY_CODE,TERR_CODE
FROM POSTL_AREA WHERE (POSTL_AREA_CODE,CNTRY_CODE) NOT IN(SEL POSTL_AREA_CODE,CNTRY_CODE FROM
(SEL CNTRY_CODE,TERR_CODE,POSTL_AREA_CODE,CITY_CODE
FROM POSTL_AREA
GROUP BY 1,2,3,4) B
GROUP BY 1,2
HAVING COUNT(*) >1)) PA
ON EDW.POSTL_AREA_CODE = PA.POSTL_AREA_CODE
AND
EDW.CNTRY_CODE = PA.CNTRY_CODE */
WHERE EDW.MKTNG_PGM_NBR IN(53,91,55,37,54,88,97,67,66,33,36,35,38,34,49,56)
AND EDW.POSTL_AREA_CODE IS NULL
)A
SET CITY_CODE = A.CITY_CODE
, TERR_CODE = A.TERR_CODE
WHERE 
ADDR_INPUT.POSTL_AREA_CODE IS NULL
AND ADDR_INPUT.CITY_NAME = A.CITY_NAME
AND ADDR_INPUT.CNTRY_CODE = A.CNTRY_CODE
AND ADDR_INPUT.CITY_CODE IS NULL
AND ADDR_INPUT.MKTNG_PGM_NBR IN(53,91,55,37,54,88,97,67,66,33,36,35,38,34,49,56);
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the TERR_CODE from the TERR reference table based on the native 
value.
**********************************************************************************************/

UPDATE ADDR_INPUT FROM TERR T
SET TERR_CODE = T.TERR_CODE
WHERE ADDR_INPUT.TERR_NAME = T.TERR_NAME_NTV
AND ADDR_INPUT.TERR_CODE IS NULL
AND ADDR_INPUT.MKTNG_PGM_NBR IN(53,91,55,37,54,88,97,67,66,33,36,35,38,34,49,56);
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the CITY_CODE from the CITY_RECODE_VAL reference table as the CITY
table does not have few native values. Customization requested from P&G.
**********************************************************************************************/

UPDATE ADDR_INPUT FROM CITY_RECODE_VAL C
SET CITY_CODE = C.CITY_CODE
WHERE ADDR_INPUT.CITY_NAME = C.CITY_NAME
--AND ADDR_INPUT.CITY_CODE IS NULL
AND ADDR_INPUT.CNTRY_CODE IN('CHN');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE ADDR_INPUT FROM CITY_RECODE_VAL C
SET TERR_CODE = C.TERR_CODE
WHERE ADDR_INPUT.CITY_NAME = C.CITY_NAME
--AND ADDR_INPUT.TERR_CODE IS NULL
AND ADDR_INPUT.CNTRY_CODE IN('CHN');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE ADDR_INPUT
SET TERR_CODE = TERR_NAME
WHERE ADDR_INPUT.CNTRY_CODE IN('CHN')
AND ADDR_INPUT.TERR_CODE IS NULL;
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
Update TERR_CODE from POSTL_AREA for Europe - RUS,POL,HUN,LUX,FRA,BEL,NLD,ITA,GRC,
AUT,CHE,DEU,ESP,IRL,DNK,FIN,NOR,SWE,GBR,PRT if TERR_CODE not sent by Trillium
**********************************************************************************************/
UPDATE ADDR_INPUT FROM 
(SEL T.POSTL_AREA_CODE,T.CNTRY_CODE,
--T.TERR_CODE,T.CITY_CODE,C.CITY_NAME --PRB0041004
T.TERR_CODE,T.CITY_CODE,COALESCE( NULLIF(C.CITY_NAME_NTV,''),C.CITY_NAME) AS CITY_NAME --PRB0041004
FROM
POSTL_AREA T
INNER JOIN CITY C
ON T.CITY_CODE=C.CITY_CODE
AND T.TERR_CODE=C.TERR_CODE
WHERE T.CNTRY_CODE IN(
'RUS','POL','HUN','LUX','FRA',
'BEL','NLD','ITA','GRC','AUT',
'CHE','DEU','ESP','IRL','DNK',
'FIN','NOR','SWE','GBR','PRT')
AND (T.POSTL_AREA_CODE,T.CNTRY_CODE) NOT IN (SEL POSTL_AREA_CODE,CNTRY_CODE FROM
(SEL CNTRY_CODE,TERR_CODE,POSTL_AREA_CODE,CITY_CODE
FROM POSTL_AREA
WHERE CNTRY_CODE IN(
'RUS','POL','HUN','LUX','FRA',
'BEL','NLD','ITA','GRC','AUT',
'CHE','DEU','ESP','IRL','DNK',
'FIN','NOR','SWE','GBR','PRT')
GROUP BY 1,2,3,4) B
GROUP BY 1,2
HAVING COUNT(*) >1)
GROUP BY 1,2,3,4,5
) T
SET TERR_CODE = CASE WHEN COALESCE(TRIM(ADDR_INPUT.TERR_CODE),'')=''
                     THEN T.TERR_CODE
                     ELSE ADDR_INPUT.TERR_CODE
                 END
,CITY_CODE = CASE WHEN COALESCE(TRIM(ADDR_INPUT.CITY_CODE),'')=''
                     THEN T.CITY_CODE
                     ELSE ADDR_INPUT.CITY_CODE
                 END
,CITY_NAME = CASE WHEN COALESCE(TRIM(ADDR_INPUT.CITY_NAME),'')=''
                     THEN T.CITY_NAME
                     ELSE ADDR_INPUT.CITY_NAME
                 END                 
WHERE ADDR_INPUT.POSTL_AREA_CODE = T.POSTL_AREA_CODE
AND ADDR_INPUT.CNTRY_CODE = T.CNTRY_CODE
AND ADDR_INPUT.CNTRY_CODE IN(
'RUS','POL','HUN','LUX','FRA',
'BEL','NLD','ITA','GRC','AUT',
'CHE','DEU','ESP','IRL','DNK',
'FIN','NOR','SWE','GBR','PRT');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
Update TERR_CODE from POSTL_AREA for GBR - if TERR_CODE sent by Trillium does not exist
in TERR.
**********************************************************************************************/
UPDATE ADDR_INPUT FROM 
(SEL T.POSTL_AREA_CODE,T.CNTRY_CODE,
--T.TERR_CODE,T.CITY_CODE,C.CITY_NAME --PRB0041004
T.TERR_CODE,T.CITY_CODE,COALESCE( NULLIF(C.CITY_NAME_NTV,''),C.CITY_NAME) AS CITY_NAME--PRB0041004
FROM
POSTL_AREA T
INNER JOIN CITY C
ON T.CITY_CODE=C.CITY_CODE
AND T.TERR_CODE=C.TERR_CODE
WHERE T.CNTRY_CODE IN(
'RUS','POL','HUN','LUX','FRA',
'BEL','NLD','ITA','GRC','AUT',
'CHE','DEU','ESP','IRL','DNK',
'FIN','NOR','SWE','GBR','PRT')
AND (T.POSTL_AREA_CODE,T.CNTRY_CODE) NOT IN (SEL POSTL_AREA_CODE,CNTRY_CODE FROM
(SEL CNTRY_CODE,TERR_CODE,POSTL_AREA_CODE,CITY_CODE
FROM POSTL_AREA
WHERE CNTRY_CODE IN(
'RUS','POL','HUN','LUX','FRA',
'BEL','NLD','ITA','GRC','AUT',
'CHE','DEU','ESP','IRL','DNK',
'FIN','NOR','SWE','GBR','PRT')
GROUP BY 1,2,3,4) B
GROUP BY 1,2
HAVING COUNT(*) >1)
GROUP BY 1,2,3,4,5
) T
SET TERR_CODE = T.TERR_CODE
,CITY_CODE = T.CITY_CODE
,CITY_NAME = T.CITY_NAME           
WHERE ADDR_INPUT.POSTL_AREA_CODE = T.POSTL_AREA_CODE
AND ADDR_INPUT.CNTRY_CODE = T.CNTRY_CODE
AND ADDR_INPUT.TERR_CODE NOT IN 
(SEL TERR_CODE FROM TERR WHERE CNTRY_CODE IN 
('RUS','POL','HUN','LUX','FRA',
'BEL','NLD','ITA','GRC','AUT',
'CHE','DEU','ESP','IRL','DNK',
'FIN','NOR','SWE','GBR','PRT')) 
AND ADDR_INPUT.CNTRY_CODE IN ('RUS','POL','HUN','LUX','FRA',
'BEL','NLD','ITA','GRC','AUT',
'CHE','DEU','ESP','IRL','DNK',
'FIN','NOR','SWE','GBR','PRT');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the CITY_CODE from the CITY reference table FOR USA and CAN
Europe Included - RUS,POL,HUN,LUX,FRA,BEL,NLD,ITA,GRC,
AUT,CHE,DEU,ESP,IRL,DNK,FIN,NOR,SWE,GBR,PRT
**********************************************************************************************/
UPDATE ADDR_INPUT FROM CITY C
SET CITY_CODE = C.CITY_CODE
--WHERE ADDR_INPUT.CITY_NAME = C.CITY_NAME --PRB0041004
WHERE (ADDR_INPUT.CITY_NAME = C.CITY_NAME--PRB0041004
OR ADDR_INPUT.CITY_NAME = C.CITY_NAME_NTV)--PRB0041004
AND ADDR_INPUT.TERR_CODE = C.TERR_CODE 
AND ADDR_INPUT.CITY_CODE IS NULL
AND ADDR_INPUT.CNTRY_CODE IN('USA','CAN',
'RUS','POL','HUN','LUX','FRA',
'BEL','NLD','ITA','GRC','AUT',
'CHE','DEU','ESP','IRL','DNK',
'FIN','NOR','SWE','GBR','PRT');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the TERR_NAME from the TERR reference table FOR USA and CAN
Europe Included - RUS,POL,HUN,LUX,FRA,BEL,NLD,ITA,GRC,
AUT,CHE,DEU,ESP,IRL,DNK,FIN,NOR,SWE,GBR,PRT
**********************************************************************************************/

UPDATE ADDR_INPUT FROM TERR T
--SET TERR_NAME = T.TERR_NAME --PRB0041004
SET TERR_NAME = COALESCE( NULLIF(T.TERR_NAME_NTV,''),T.TERR_NAME) --PRB0041004
WHERE ADDR_INPUT.TERR_CODE = T.TERR_CODE
AND ADDR_INPUT.CNTRY_CODE IN('USA','CAN',
'RUS','POL','HUN','LUX','FRA',
'BEL','NLD','ITA','GRC','AUT',
'CHE','DEU','ESP','IRL','DNK',
'FIN','NOR','SWE','GBR','PRT');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;


/*********************************************************************************************
Update TERR_CODE from TERR for TUR/BRA if incoming terr name matches reference data
**********************************************************************************************/

UPDATE ADDR_INPUT FROM TERR A
SET TERR_CODE = A.TERR_CODE
WHERE (ADDR_INPUT.TERR_NAME = A.TERR_NAME
OR ADDR_INPUT.TERR_NAME = A.TERR_NAME_NTV)
AND ADDR_INPUT.CNTRY_CODE = A.CNTRY_CODE
AND ADDR_INPUT.CNTRY_CODE IN ('TUR','BRA','ARE','BHR','KWT','OMN','QAT','SAU','YEM');
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
Update CITY_CODE from CITY for TUR/BRA if incoming city name matches reference data
**********************************************************************************************/

UPDATE ADDR_INPUT FROM CITY A
SET CITY_CODE = A.CITY_CODE
WHERE (ADDR_INPUT.CITY_NAME = A.CITY_NAME
OR ADDR_INPUT.CITY_NAME = A.CITY_NAME_NTV)
AND ADDR_INPUT.TERR_CODE = A.TERR_CODE
AND ADDR_INPUT.CNTRY_CODE IN ('TUR','BRA','ARE','BHR','KWT','OMN','QAT','SAU','YEM');
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
Update CITY_CODE,TERR_CODE from POSTL_AREA/CITY for TUR/BRA if incoming city name and terr name
does not match reference data but postal area code matches reference data and incoming city name
is blank.
**********************************************************************************************/

UPDATE ADDR_INPUT FROM 
(SEL T.POSTL_AREA_CODE,T.CNTRY_CODE,
--T.TERR_CODE,T.CITY_CODE,C.CITY_NAME --PRB0041004
T.TERR_CODE,T.CITY_CODE,COALESCE( NULLIF(CITY_NAME_NTV,''),CITY_NAME) AS CITY_NAME --PRB0041004
FROM
POSTL_AREA T
INNER JOIN CITY C
ON T.CITY_CODE=C.CITY_CODE
AND T.TERR_CODE=C.TERR_CODE
WHERE T.CNTRY_CODE IN(
'TUR','BRA','ARE','BHR','KWT','OMN','QAT','SAU','YEM')
AND (T.POSTL_AREA_CODE,T.CNTRY_CODE) NOT IN (SEL POSTL_AREA_CODE,CNTRY_CODE FROM
(SEL CNTRY_CODE,TERR_CODE,POSTL_AREA_CODE,CITY_CODE
FROM POSTL_AREA
WHERE CNTRY_CODE IN(
'TUR','BRA','ARE','BHR','KWT','OMN','QAT','SAU','YEM')
GROUP BY 1,2,3,4) B
GROUP BY 1,2
HAVING COUNT(*) >1)
GROUP BY 1,2,3,4,5
) T
SET TERR_CODE = CASE WHEN TRIM(COALESCE(ADDR_INPUT.TERR_CODE,''))=''
                     THEN T.TERR_CODE
                     ELSE ADDR_INPUT.TERR_CODE
                 END 
,CITY_CODE = CASE WHEN TRIM(COALESCE(ADDR_INPUT.CITY_NAME,''))=''
                     THEN T.CITY_CODE
                     ELSE ADDR_INPUT.CITY_CODE
                 END
,CITY_NAME = CASE WHEN TRIM(COALESCE(ADDR_INPUT.CITY_NAME,''))=''
                     THEN T.CITY_NAME
                     ELSE ADDR_INPUT.CITY_NAME
                 END           
WHERE ADDR_INPUT.POSTL_AREA_CODE = T.POSTL_AREA_CODE
AND ADDR_INPUT.CNTRY_CODE = T.CNTRY_CODE
AND ADDR_INPUT.CNTRY_CODE IN ('TUR','BRA','ARE','BHR','KWT','OMN','QAT','SAU','YEM');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*********************************************************************************************
This update is to populate the TERR_NAME from the TERR reference table FOR TUR/BRA
**********************************************************************************************/

UPDATE ADDR_INPUT FROM TERR T
--SET TERR_NAME = T.TERR_NAME --PRB0041004
SET TERR_NAME = COALESCE( NULLIF(T.TERR_NAME_NTV,''),T.TERR_NAME) --PRB0041004
WHERE ADDR_INPUT.TERR_CODE = T.TERR_CODE
AND ADDR_INPUT.CNTRY_CODE IN('TUR','BRA','ARE','BHR','KWT','OMN','QAT','SAU','YEM');
--AND CAST(ADDR_INPUT.SYS_SOURCE AS INTEGER) IN (SEL LOAD_ID FROM MDM_LOAD_CONTROL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

/*UPDATE TSS_CLEANSE_OUTPUT_LE
SET STATUS='COMPLETED'
WHERE LEGAL_ENT_NBR IN (SELECT LEGAL_ENT_NBR FROM LE_TMP)
AND STATUS='IN_PROGRESS'
;
*/
DROP TABLE user_work.ADDR_INPUT_32510;

CREATE TABLE user_work.ADDR_INPUT_32510  AS 
(SELECT * FROM ADDR_INPUT ) WITH DATA
PRIMARY INDEX ADDR_INPUT_NUPI ( REGIS_PRSNA_ID ,MKTNG_PGM_NBR )
PARTITION BY MKTNG_PGM_NBR ;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE REGIS_PRSNA_POSTL_ADDR
FROM ADDR_INPUT
SET
 WIN_KEY=ADDR_INPUT.WIN_KEY
,ADDR_LINE_1_TXT= CASE WHEN COALESCE(TRIM(ADDR_INPUT.ADDR_LINE_1_TXT),'') = ''      THEN NULL       ELSE ADDR_INPUT.ADDR_LINE_1_TXT  END
,ADDR_LINE_2_TXT= CASE WHEN COALESCE(TRIM(ADDR_INPUT.ADDR_LINE_2_TXT),'') = ''      THEN NULL       ELSE ADDR_INPUT.ADDR_LINE_2_TXT  END
,ADDR_LINE_3_TXT= CASE WHEN COALESCE(TRIM(ADDR_INPUT.ADDR_LINE_3_TXT),'') = ''      THEN NULL       ELSE ADDR_INPUT.ADDR_LINE_3_TXT  END
,STRET_NUM=coalesce(ADDR_INPUT.STRET_NUM,'')
,STRET_NAME=coalesce(ADDR_INPUT.STRET_NAME,'')
,APT_NUM=coalesce(ADDR_INPUT.APT_NUM,'')
,PO_BOX_NUM=ADDR_INPUT.PO_BOX_NUM
,CITY_NAME=coalesce(ADDR_INPUT.CITY_NAME,'')
,POSTL_AREA_CODE=coalesce(ADDR_INPUT.POSTL_AREA_CODE,'')
,TERR_NAME=ADDR_INPUT.TERR_NAME
,TERR_CODE=ADDR_INPUT.TERR_CODE
,CNTRY_CODE=ADDR_INPUT.CNTRY_CODE
,CITY_CODE=ADDR_INPUT.CITY_CODE
,LAT_MEAS=CASE WHEN NULLIF(TRIM(ADDR_INPUT.GL_ACCURACY),0) IS NULL THEN NULL ELSE CAST(ADDR_INPUT.GL_LATITUDE AS DECIMAL(8,6) FORMAT '-99.999999')/1000000 END
,LONG_MEAS=CASE WHEN NULLIF(TRIM(ADDR_INPUT.GL_ACCURACY),0) IS NULL THEN NULL ELSE CAST(ADDR_INPUT.GL_LONGITUDE AS   DECIMAL(9,6) FORMAT '-999.999999')/1000000 END
,VALID_CNTCT_POINT_IND=ADDR_INPUT.VALID_CNTCT_POINT_IND
,PR_REV_GROUP=ADDR_INPUT.PR_REV_GROUP
,PR_GEOCODE_FAIL=ADDR_INPUT.PR_GEOCODE_FAIL
,POSTL_STATUS_CODE=CASE WHEN TRIM(COALESCE(ADDR_INPUT.ADDR_LINE_1_TXT,''))=''AND TRIM(COALESCE(ADDR_INPUT.ADDR_LINE_2_TXT,''))='' AND TRIM(COALESCE(ADDR_INPUT.ADDR_LINE_3_TXT,''))='' AND TRIM(COALESCE(ADDR_INPUT.STRET_NUM,''))=''  AND TRIM(COALESCE(ADDR_INPUT.STRET_NAME,''))='' AND ADDR_INPUT.SUBSCRPTN_OPT_IND = 'I' THEN 'NV' ELSE 'AC' END 
,GL_ACCURACY=NULLIF(TRIM(ADDR_INPUT.GL_ACCURACY),0)
,GL_MATCH_FLG=coalesce(ADDR_INPUT.GL_MATCH_FLAG,'')
,DR_CLEANSE_LVL=ADDR_INPUT.DR_CLEANSE_LEVEL
,SYS_LAST_MODIFIED_DATE=CURRENT_DATE
,SYS_LAST_MODIFIED_BY ='CHG0032610'
WHERE REGIS_PRSNA_POSTL_ADDR.MKTNG_PGM_NBR=ADDR_INPUT.MKTNG_PGM_NBR
AND        REGIS_PRSNA_POSTL_ADDR.REGIS_PRSNA_ID=ADDR_INPUT.REGIS_PRSNA_ID
AND        REGIS_PRSNA_POSTL_ADDR.CNTCT_POINT_CATEG_CODE=ADDR_INPUT.CNTCT_POINT_CATEG_CODE
--AND        coalesce(NULLIF(TRIM(REGIS_PRSNA_POSTL_ADDR.SUBSCRPTN_OPT_NBR),''),0)=coalesce(NULLIF(TRIM(ADDR_INPUT.SUBSCRPTN_OPT_NBR),''),0)
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DELETE  TSS_CLEANSE_OUTPUT_LE
WHERE LEGAL_ENT_NBR IN (SELECT LEGAL_ENT_NBR FROM LE_TMP)
AND STATUS='IN_PROGRESS'
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

.exit

/***********************************************************************************************************
SCRIPT:               Cleanse Input.BTEQ 
DESCRIPTION:          This script moves the valid records received from ETL Staging to Cleanse Input.
DEPENDENCY:           
INPUT:                ETL Staging
OUTPUT:               Cleanse Input
ERRORS:
SPECIAL INSTRUCTIONS:

CHANGE LOG:
VERSION              DATE                 AUTHOR                          CHANGES
1.00                 10/31/2011           TERADATA                        INITIAL VERSION
R2O                  05/11/2012           TERADATA                        ADD CHECK SO THAT TRILLIUM CANNOT
                                                                          START UNTIL
R5.1                 01/28/2014           TERADATA                        ADD NATIONAL_ID_NBR 
5.7                  02/29/2016           TERADATA                        Release 5.7 - i20b rematching
                                                                          in case of external standardization  
5.8                  09/12/2016           TERADATA                        Release 5.8 - BR#413 Prioritize DTC  
5.8.1                11/21/2016           TERADATA                        Release 5.8.1 - If the FullName is NULL in PRSNA_STG then we are concatenating the GVN_NAME and FAMILY_NAME and populate the 	TSS_CLEANSE_INPUT1_RUS table                                                                        
6.0                  06/05/2017           TERADATA                        Release 6.0 - Legal Entity Rematch
1.8                  10/27/2017           TERADATA                        Changed GL_ACCURACY logic as part of Trillium Upgrade
6.2					 28/12/2017			  TERADATA					      Release 6.2 New Data Model change
***********************************************************************************************************/

.RUN FILE \\10.138.21.14\Teradata\MDM\3.05.02\custom\pngrelease3\logon\LOGON.txt;
.SET ERROROUT STDOUT;
.SET SESSION CHARSET 'UTF8';
SET QUERY_BAND = 'WorkFlow=MDM;Interface=i2MDM;Country=RUS;Stage=Trillium;Step=CleanseInput;' FOR SESSION; 
CREATE VOLATILE TABLE LOAD_PICK AS
(SEL CNTRY_NAME,A.LOAD_ID
FROM LOAD_INFO A
INNER JOIN LOAD_CONTROL B
ON A.LOAD_ID=B.LOAD_ID
LEFT JOIN (SEL CAST(AV_CODE  AS INTEGER) FORMAT_ID
FROM ATTRIBUTE_VALUES
 WHERE ATTRIBUTE_TYPE_ID IN
 (SEL ATTRIBUTE_TYPE_ID 
 FROM ATTRIBUTE_TYPES
 WHERE ATTRIBUTE_TYPE='i2 Format')
 AND SYS_ENT_STATE='Active') C
 ON B.FORMAT_ID=C.FORMAT_ID
LEFT JOIN (SEL CAST(AV_CODE  AS INTEGER) FORMAT_ID
FROM ATTRIBUTE_VALUES
 WHERE ATTRIBUTE_TYPE_ID IN
 (SEL ATTRIBUTE_TYPE_ID 
 FROM ATTRIBUTE_TYPES
 WHERE ATTRIBUTE_TYPE='i20b Format')
 AND SYS_ENT_STATE='Active') C1
 ON B.FORMAT_ID=C1.FORMAT_ID 
WHERE PROCESS_NAME='Trillium'
AND STATUS = 'Ready to Process'
AND CNTRY_NAME = 'RUS'
QUALIFY RANK() OVER (PARTITION BY CNTRY_NAME ORDER BY 
CASE WHEN C.FORMAT_ID IS NOT NULL
THEN 1
WHEN C1.FORMAT_ID IS NOT NULL
THEN 2
 ELSE 3
 END ASC)=1)
 WITH DATA
 PRIMARY INDEX(CNTRY_NAME,LOAD_ID)
 ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE LOAD_CLEANUP AS
(SEL CNTRY_NAME,A.LOAD_ID,
CASE WHEN C.FORMAT_ID IS NOT NULL
THEN 1
WHEN C1.FORMAT_ID IS NOT NULL
THEN 2
ELSE 3
END LOAD_CHOICE,
RANK() OVER (PARTITION BY CNTRY_NAME ORDER BY 
LOAD_CHOICE ASC) AS RNK
FROM LOAD_INFO A
INNER JOIN LOAD_CONTROL B
ON A.LOAD_ID=B.LOAD_ID
LEFT JOIN (SEL CAST(AV_CODE  AS INTEGER) FORMAT_ID
FROM ATTRIBUTE_VALUES
 WHERE ATTRIBUTE_TYPE_ID IN
 (SEL ATTRIBUTE_TYPE_ID 
 FROM ATTRIBUTE_TYPES
 WHERE ATTRIBUTE_TYPE='i2 Format')
 AND SYS_ENT_STATE='Active') C
 ON B.FORMAT_ID=C.FORMAT_ID
LEFT JOIN (SEL CAST(AV_CODE  AS INTEGER) FORMAT_ID
FROM ATTRIBUTE_VALUES
 WHERE ATTRIBUTE_TYPE_ID IN
 (SEL ATTRIBUTE_TYPE_ID 
 FROM ATTRIBUTE_TYPES
 WHERE ATTRIBUTE_TYPE='i20b Format')
 AND SYS_ENT_STATE='Active') C1
 ON B.FORMAT_ID=C1.FORMAT_ID 
WHERE PROCESS_NAME='Trillium'
AND STATUS = 'Ready to Process'
AND CNTRY_NAME = 'RUS'
)
 WITH DATA
 PRIMARY INDEX(CNTRY_NAME,LOAD_ID)
 ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

SEL 1 FROM LOAD_CLEANUP
WHERE CNTRY_NAME = 'RUS'
AND LOAD_CHOICE IN (2,3)
MINUS
SEL 1 FROM LOAD_CLEANUP
WHERE CNTRY_NAME = 'RUS'
AND LOAD_CHOICE IN (1);

.IF ACTIVITYCOUNT > 0 THEN .GOTO CLEANUP
.IF ACTIVITYCOUNT = 0 THEN .GOTO CLEANSEPROCESS
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

.LABEL CLEANUP

CREATE VOLATILE TABLE EXTRN AS
(SEL TRIM(CAST(LOAD_ID AS INTEGER)) SYS_SOURCE
FROM LOAD_CLEANUP
WHERE LOAD_CHOICE IN (2,3)
QUALIFY RANK() OVER (PARTITION BY 1
ORDER BY LOAD_CHOICE ASC,LOAD_ID ASC)=1
)
 WITH DATA
 PRIMARY INDEX(SYS_SOURCE)
 ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

COLLECT STATS EXTRN
COLUMN SYS_SOURCE;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

DEL FROM LOAD_PICK
WHERE LOAD_ID NOT IN 
(SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

SEL 1 FROM EXTRN
WHERE CAST(SYS_SOURCE AS INTEGER) MOD 100=23
GROUP BY 1;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

.IF ACTIVITYCOUNT > 0 THEN .GOTO EXTERN
.IF ACTIVITYCOUNT = 0 THEN .GOTO REMATCH
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

.LABEL EXTERN
COLLECT STATS EXTRN_PRSNA_IDS
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS EXTRN_PRSNA_IDS
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS EXTRN_PRSNA_IDS
COLUMN CNTRY_CODE;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS EXTRN_PRSNA_IDS
COLUMN SYS_SOURCE;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

UPDATE EXTRN_PRSNA_IDS
FROM REGIS_PRSNA B
SET REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
,SYS_TARGET_ID=B.SYS_TARGET_ID
,LEGAL_ENT_NBR=B.LEGAL_ENT_NBR
WHERE EXTRN_PRSNA_IDS.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND EXTRN_PRSNA_IDS.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID
AND EXTRN_PRSNA_IDS.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE MPN
AS
(
SEL MP.MKTNG_PGM_NBR
FROM EXTRN_PRSNA_IDS A
INNER JOIN MKTNG_PGM MP
ON A.LEGAL_ENT_NBR=MP.LEGAL_ENT_NBR
WHERE A.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN)
)
WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR )
PARTITION BY MKTNG_PGM_NBR
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

COLLECT STATS MPN
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT EXTRN_PRSNA_IDS 
(MKTNG_PGM_NBR,
REGIS_PRSNA_ID,
SYS_SOURCE,
CNTRY_CODE,
LEGAL_ENT_NBR,
REGIS_CNSMR_ID_VAL,
SYS_TARGET_ID)
SELECT DISTINCT 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID,
B1.SYS_SOURCE,
B.CNTRY_CODE,
B.LEGAL_ENT_NBR,
B.REGIS_CNSMR_ID_VAL,
B.SYS_TARGET_ID                   
FROM EXTRN_PRSNA_IDS B1
INNER JOIN REGIS_PRSNA_EMAIL_ADDR A1
ON A1.MKTNG_PGM_NBR = B1.MKTNG_PGM_NBR
AND A1.REGIS_PRSNA_ID = B1.REGIS_PRSNA_ID

INNER JOIN REGIS_PRSNA_EMAIL_ADDR A
     INNER JOIN MPN MP
     ON A.MKTNG_PGM_NBR=MP.MKTNG_PGM_NBR
ON A.EMAIL_ADDR_TXT=A1.EMAIL_ADDR_TXT

INNER JOIN REGIS_PRSNA B
ON A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND A.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B1.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT EXTRN_PRSNA_IDS 
(MKTNG_PGM_NBR,
REGIS_PRSNA_ID,
SYS_SOURCE,
CNTRY_CODE,
LEGAL_ENT_NBR,
REGIS_CNSMR_ID_VAL,
SYS_TARGET_ID)
SELECT DISTINCT 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID,
B1.SYS_SOURCE,
B.CNTRY_CODE,
B.LEGAL_ENT_NBR,
B.REGIS_CNSMR_ID_VAL,
B.SYS_TARGET_ID                   
FROM EXTRN_PRSNA_IDS B1
INNER JOIN REGIS_PRSNA_PHONE A1
ON A1.MKTNG_PGM_NBR = B1.MKTNG_PGM_NBR
AND A1.REGIS_PRSNA_ID = B1.REGIS_PRSNA_ID

INNER JOIN REGIS_PRSNA_PHONE A
     INNER JOIN MPN MP
     ON A.MKTNG_PGM_NBR=MP.MKTNG_PGM_NBR
ON A.FULL_PHONE_NUM=A1.FULL_PHONE_NUM

INNER JOIN REGIS_PRSNA B
ON A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND A.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B1.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE TMP_WINKEY AS (
SEL WINKEY FROM REF_POSTL_DATA_IGNORE_ESP
UNION ALL
SEL WINKEY FROM REF_POSTL_DATA_IGNORE_PRT
)
WITH DATA
PRIMARY INDEX(WINKEY)
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT EXTRN_PRSNA_IDS 
(MKTNG_PGM_NBR,
REGIS_PRSNA_ID,
SYS_SOURCE,
CNTRY_CODE,
LEGAL_ENT_NBR,
REGIS_CNSMR_ID_VAL,
SYS_TARGET_ID)
SELECT DISTINCT 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID,
B1.SYS_SOURCE,
B.CNTRY_CODE,
B.LEGAL_ENT_NBR,
B.REGIS_CNSMR_ID_VAL,
B.SYS_TARGET_ID                  
FROM EXTRN_PRSNA_IDS B1
INNER JOIN REGIS_PRSNA_POSTL_ADDR A1
ON A1.MKTNG_PGM_NBR = B1.MKTNG_PGM_NBR
AND A1.REGIS_PRSNA_ID = B1.REGIS_PRSNA_ID

INNER JOIN REGIS_PRSNA_POSTL_ADDR A
     INNER JOIN MPN MP
     ON A.MKTNG_PGM_NBR=MP.MKTNG_PGM_NBR
ON A.WIN_KEY=A1.WIN_KEY
AND A1.CNTRY_CODE= A.CNTRY_CODE
AND COALESCE(TRIM(A1.ADDR_LINE_1_TXT),'')=  COALESCE(TRIM(A.ADDR_LINE_1_TXT),'')
AND COALESCE(TRIM(A1.ADDR_LINE_2_TXT),'')= COALESCE(TRIM(A.ADDR_LINE_2_TXT),'')
AND COALESCE(TRIM(A1.ADDR_LINE_3_TXT),'')= COALESCE(TRIM(A.ADDR_LINE_3_TXT),'')
AND COALESCE(TRIM(A1.CITY_NAME),'')=  COALESCE(TRIM(A.CITY_NAME),'')
AND COALESCE(TRIM(A1.TERR_NAME),'')=  COALESCE(TRIM(A.TERR_NAME),'')
AND COALESCE(TRIM(A1.POSTL_AREA_CODE),'')=  COALESCE(TRIM(A.POSTL_AREA_CODE),'')
AND A1.WIN_KEY NOT IN (SEL WINKEY
FROM TMP_WINKEY)

INNER JOIN REGIS_PRSNA B
ON A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND A.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B1.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE NATIONAL_ID
AS
(
SEL A1.NATIONAL_ID_NBR,A1.LEGAL_ENT_NBR,MP.MKTNG_PGM_NBR,
B1.SYS_SOURCE
FROM EXTRN_PRSNA_IDS B1
INNER JOIN REGIS_PRSNA A1
ON A1.MKTNG_PGM_NBR = B1.MKTNG_PGM_NBR
AND A1.REGIS_PRSNA_ID = B1.REGIS_PRSNA_ID
AND B1.LEGAL_ENT_NBR=22
INNER JOIN MKTNG_PGM MP
ON B1.LEGAL_ENT_NBR=MP.LEGAL_ENT_NBR
WHERE COALESCE(TRIM(A1.NATIONAL_ID_NBR),'')<>''
AND B1.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN)
)
WITH DATA
PRIMARY INDEX ( NATIONAL_ID_NBR )
PARTITION BY MKTNG_PGM_NBR
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

COLLECT STATS NATIONAL_ID
COLUMN NATIONAL_ID_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS NATIONAL_ID
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT EXTRN_PRSNA_IDS 
(MKTNG_PGM_NBR,
REGIS_PRSNA_ID,
SYS_SOURCE,
CNTRY_CODE,
LEGAL_ENT_NBR,
REGIS_CNSMR_ID_VAL,
SYS_TARGET_ID)
SELECT DISTINCT 
A.MKTNG_PGM_NBR,
A.REGIS_PRSNA_ID,
B.SYS_SOURCE,
A.CNTRY_CODE,
A.LEGAL_ENT_NBR,
A.REGIS_CNSMR_ID_VAL,
A.SYS_TARGET_ID
FROM NATIONAL_ID B
INNER JOIN REGIS_PRSNA A
ON A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.NATIONAL_ID_NBR=B.NATIONAL_ID_NBR;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

COLLECT STATS EXTRN_PRSNA_IDS
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS EXTRN_PRSNA_IDS
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS EXTRN_PRSNA_IDS
COLUMN LEGAL_ENT_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE REGIS_PICK AS (
SEL B.MKTNG_PGM_NBR,B.REGIS_PRSNA_ID,B.SYS_SOURCE
FROM EXTRN_PRSNA_IDS B
WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN)
QUALIFY RANK() OVER (PARTITION BY B.MKTNG_PGM_NBR,B.REGIS_PRSNA_ID
ORDER BY B.SYS_SOURCE DESC)<>1)
WITH DATA
PRIMARY INDEX(MKTNG_PGM_NBR,REGIS_PRSNA_ID)
PARTITION BY MKTNG_PGM_NBR
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

COLLECT STATS REGIS_PICK
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS REGIS_PICK
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

COLLECT STATS EXTRN_PRSNA_IDS
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS EXTRN_PRSNA_IDS
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS EXTRN_PRSNA_IDS
COLUMN LEGAL_ENT_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

DEL FROM EXTRN_PRSNA_IDS
WHERE (MKTNG_PGM_NBR,REGIS_PRSNA_ID,SYS_SOURCE)
IN (SEL B.MKTNG_PGM_NBR,B.REGIS_PRSNA_ID,B.SYS_SOURCE
FROM REGIS_PICK B);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO CNSMR_AFFLTN_STG
(
MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
CNSMR_GRP_NBR, 
AFFLTN_START_DATE, 
AFFLTN_END_DATE, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE
)
SELECT 
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.CNSMR_GRP_NBR, 
STG.AFFLTN_START_DATE, 
STG.AFFLTN_END_DATE, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM CNSMR_AFFLTN STG
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO DPEND_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
DPEND_SEQ_NBR, 
DPEND_NAME, 
DPEND_GENDR_IND, 
DPEND_BRTH_DATE, 
DPEND_AGE_NBR, 
DPEND_TYPE_CODE, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE
)
SELECT
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.DPEND_SEQ_NBR, 
STG.DPEND_NAME, 
STG.DPEND_GENDR_IND, 
STG.DPEND_BRTH_DATE, 
STG.DPEND_AGE_NBR, 
STG.DPEND_TYPE_CODE, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM DPEND STG
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO DPEND_TRT_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
DPEND_SEQ_NBR, 
TRT_NBR, 
DPEND_TRT_DATE, 
DPEND_TRT_INTEGER, 
DPEND_TRT_TXT,
DPEND_TRT_SEQ_NBR, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE
)
SELECT
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.DPEND_SEQ_NBR, 
STG.TRT_NBR, 
STG.DPEND_TRT_DATE, 
'' DPEND_TRT_INTEGER, 
STG.DPEND_TRT_TXT,
STG.DPEND_TRT_SEQ_NBR, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM DPEND_TRT STG
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PET_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
PET_SEQ_NBR, 
PET_NAME, 
PET_GENDR_IND, 
PET_BRTH_DATE, 
PET_AGE_NBR, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE
)
SELECT 
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.PET_SEQ_NBR, 
STG.PET_NAME, 
STG.PET_GENDR_IND, 
STG.PET_BRTH_DATE,
STG.PET_AGE_NBR, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM PET STG
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PET_TRT_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
PET_SEQ_NBR, 
TRT_ID, 
PET_TRT_DATE, 
PET_TRT_INTEGRE, 
PET_TRT_TXT, 
PET_TRT_SEQ_NBR, 
RECORD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE
)
SELECT 
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.PET_SEQ_NBR, 
STG.TRT_NBR, 
STG.PET_TRT_DATE, 
'' PET_TRT_INTEGRE, 
STG.PET_TRT_TXT, 
STG.PET_TRT_SEQ_NBR, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER))
FROM PET_TRT STG
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_EMAIL_ADDR_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
CNTCT_POINT_CATEG_CODE,
EMAIL_ADDR_TXT, 
EMAIL_FORMT_CODE, 
PREFR_IND, 
VALID_IND, 
RECORD_IND,
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
CNTCT_OPTN_NBR,
CNTCT_OPTN_IND, 
CNSMR_CHCE_DATETM,
GUARDN_NAME, 
GUARDN_EMAIL_ADDR_TXT, 
GUARDN_CNSNT_IND, 
ACNLGMT_DATE,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE )

SELECT 
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.CNTCT_POINT_CATEG_CODE, 
STG.EMAIL_ADDR_TXT,
STG.EMAIL_FORMT_CODE, 
STG.PREF_CNTCT_POINT_IND, 
STG.VALID_CNTCT_POINT_IND, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
STG.SUBSCRPTN_OPT_NBR, 
STG.SUBSCRPTN_OPT_IND,
CAST(CAST(STG.CNSMR_CHCE_DATETM AS VARCHAR(19)) AS TIMESTAMP(0)), 
STG.GUARDN_NAME, 
STG.GUARDN_EMAIL_ADDR_TXT, 
STG.GUARDN_CNSNT_IND, 
STG.ACNLGMT_DATE,
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM REGIS_PRSNA_EMAIL_ADDR STG
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_PHONE_STG
(MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
CNTCT_POINT_CATEG_CODE,
PHONE_CNTRY_NBR,
PHONE_AREA_NBR,
PHONE_EXCHG_NBR,
PHONE_LINE_NBR,
PHONE_EXTSN_NUM,
FULL_PHONE_NUM,
SMS_PREFR_IND,
SMS_AVAIL_START_TIME,
SMS_AVAIL_END_TIME,
PREFR_IND,
VALID_IND,
RECORD_IND,
LOAD_ID,
LOAD_TS,
MDM_LOAD_IND,
SYNC_STATUS,
CNTCT_OPTN_NBR,
CNTCT_OPTN_IND,
CNSMR_CHCE_DATETM,
GUARDN_NAME,
GUARDN_EMAIL_ADDR_TXT,
GUARDN_CNSNT_IND,
ACNLGMT_DATE,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE )
SELECT
STG.MKTNG_PGM_NBR,
B.REGIS_CNSMR_ID_VAL,
STG.CNTCT_POINT_CATEG_CODE,
STG.PHONE_CNTRY_NBR,
STG.PHONE_AREA_NBR,
STG.PHONE_EXCHG_NBR,
STG.PHONE_LINE_NBR,
STG.PHONE_EXTSN_NUM,
STG.FULL_PHONE_NUM,
STG.SMS_PREFR_IND,
CAST(CAST(STG.SMS_AVAIL_START_TIME AS VARCHAR(19)) AS TIMESTAMP(0)),
CAST(CAST(STG.SMS_AVAIL_END_TIME AS VARCHAR(19)) AS TIMESTAMP(0)),
STG.PREF_CNTCT_POINT_IND, 
STG.VALID_CNTCT_POINT_IND, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
STG.SUBSCRPTN_OPT_NBR, 
STG.SUBSCRPTN_OPT_IND,
CAST(CAST(STG.CNSMR_CHCE_DATETM AS VARCHAR(19)) AS TIMESTAMP(0)), 
STG.GUARDN_NAME, 
STG.GUARDN_EMAIL_ADDR_TXT, 
STG.GUARDN_CNSNT_IND, 
STG.ACNLGMT_DATE,
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM REGIS_PRSNA_PHONE STG
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_POSTL_ADDR_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
CNTCT_POINT_CATEG_CODE,
ADDR_LINE_1_TXT, 
ADDR_LINE_2_TXT, 
ADDR_LINE_3_TXT, 
STRET_NUM,
STRET_NAME, 
APT_NUM, 
PO_BOX_NUM, 
CITY_NAME, 
TERR_NAME, 
POSTL_AREA_CODE,
GEOC_AREA_TYPE_CODE, 
GEOC_AREA_NAME, 
CNTRY_NAME, 
PREFR_IND, 
VALID_IND, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS, 
CNTCT_OPTN_NBR,
CNTCT_OPTN_IND, 
CNSMR_CHCE_DATETM, 
GUARDN_NAME, 
GUARDN_EMAIL_ADDR_TXT,
GUARDN_CNSNT_IND, 
ACNLGMT_DATE,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE,
POSTL_ADDR_ID,
LAT_MEAS,
LONG_MEAS,
GL_ACCURACY,
GL_MATCH_FLG,
DR_CLEANSE_LVL,
PR_GEOCODE_FAIL,
PR_REV_GROUP,
CITY_CODE)
SELECT DISTINCT
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.CNTCT_POINT_CATEG_CODE, 
STG1.ADDR_LINE_1_TXT,
STG1.ADDR_LINE_2_TXT, 
STG1.ADDR_LINE_3_TXT, 
STG1.STRET_NUM, 
STG1.STRET_NAME, 
STG1.APT_NUM, 
STG1.PO_BOX_NUM, 
STG1.CITY_NAME, 
STG1.TERR_NAME,
STG1.POSTL_AREA_CODE, 
'' GEOC_AREA_TYPE_CODE, 
'' GEOC_AREA_NAME, 
COALESCE(STG.CNTRY_CODE,B.CNTRY_CODE,SUBSTR(C.LEGAL_ENT_SHORT_NAME,1,3)) AS CNTRY_NAME, 
STG.PREF_CNTCT_POINT_IND, 
STG.VALID_CNTCT_POINT_IND, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
STG.SUBSCRPTN_OPT_NBR, 
STG.SUBSCRPTN_OPT_IND,
CAST(CAST(STG.CNSMR_CHCE_DATETM AS VARCHAR(19)) AS TIMESTAMP(0)), 
STG.GUARDN_NAME, 
STG.GUARDN_EMAIL_ADDR_TXT, 
STG.GUARDN_CNSNT_IND, 
STG.ACNLGMT_DATE,
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE,
STG.POSTL_ADDR_ID,
STG.LAT_MEAS,
STG.LONG_MEAS,
STG.GL_ACCURACY,
STG.GL_MATCH_FLG,
STG.DR_CLEANSE_LVL,
STG.PR_GEOCODE_FAIL,
STG.PR_REV_GROUP,
STG.CITY_CODE
FROM REGIS_PRSNA_POSTL_ADDR STG
JOIN PRSNA_POSTL_ADDR_ORIG STG1
ON STG.MKTNG_PGM_NBR=STG1.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID=STG1.REGIS_PRSNA_ID
AND STG.CNTCT_POINT_CATEG_CODE=STG1.CNTCT_POINT_CATEG_CODE
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID
LEFT JOIN LEGAL_ENT C
ON C.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_SOC_NETWK_ACCT_STG 
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
CNTCT_POINT_CATEG_CODE,   
SOCIAL_NETWK_ACCT_ID_VAL, 
PREFR_IND,                     
VALID_IND,                     
RECORD_IND, 
LOAD_ID,   
LOAD_TS, 
MDM_LOAD_IND, 
SYNC_STATUS,
CNTCT_OPTN_NBR, 
CNTCT_OPTN_IND, 
CNSMR_CHCE_DATETM,   
GUARDN_NAME, 
GUARDN_EMAIL_ADDR_TXT, 
GUARDN_CNSNT_IND, 
ACNLGMT_DATE,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE )
SELECT  
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.CNTCT_POINT_CATEG_CODE, 
STG.SOCIAL_NETWK_ACCT_ID_VAL,    
STG.PREF_CNTCT_POINT_IND, 
STG.VALID_CNTCT_POINT_IND, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
STG.SUBSCRPTN_OPT_NBR, 
STG.SUBSCRPTN_OPT_IND,
CAST(CAST(STG.CNSMR_CHCE_DATETM AS VARCHAR(19)) AS TIMESTAMP(0)),  
STG.GUARDN_NAME, 
STG.GUARDN_EMAIL_ADDR_TXT, 
STG.GUARDN_CNSNT_IND, 
STG.ACNLGMT_DATE,
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM REGIS_PRSNA_SOC_NET_ACCT STG
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
USER_NAME, 
PRSNA_REG_DT, 
NAME_PREFX_TXT, 
GVN_NAME, 
MID_NAME, 
FAMLY_NAME, 
NAME_SUFFX_TXT, 
FULL_NAME, 
GENDR_IND, 
BRTH_DATE, 
LANG_CODE, 
PRSNA_STTUS_CODE, 
RECORD_IND,  
LYLTY_ACCT_NUM,
LYLTY_PGM_NBR,
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE,
CNTRY_CODE
)
SELECT 
STG.MKTNG_PGM_NBR, 
STG.REGIS_CNSMR_ID_VAL, 
STG.CNSMR_USER_NAME, 
CAST(CAST(STG.REGIS_DATE AS VARCHAR(19)) AS TIMESTAMP(0)), 
STG.NAME_PREFX_TXT, 
STG.GVN_NAME, 
STG.MID_NAME, 
STG.FAMLY_NAME, 
STG.NAME_SUFFX_TXT, 
STG.FULL_NAME, 
STG.GENDR_IND,
STG.BRTH_DATE, 
STG.LANG_CODE, 
STG.PRSNA_STATUS_CODE, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,  
STG.LYLTY_ACCT_NUM,
STG.LYLTY_PGM_NBR,
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE,
STG.CNTRY_CODE
FROM REGIS_PRSNA STG
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_TRT_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
TRT_NBR, 
PRSNA_TRT_SEQ_NBR, 
PRSNA_TRT_DATE, 
PRSNA_TRT_INTEGER,
PRSNA_TRT_TXT, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE
)
SELECT 
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.TRT_NBR, 
STG.PRSNA_TRT_SEQ_NBR, 
STG.PRSNA_TRT_DATE,  
'' PRSNA_TRT_INTEGER, 
STG.PRSNA_TRT_TXT, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM PRSNA_TRT STG
INNER JOIN
EXTRN_PRSNA_IDS B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

.GOTO CLEANSEPROCESS

.LABEL REMATCH

INSERT INTO CNSMR_AFFLTN_STG
(
MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
CNSMR_GRP_NBR, 
AFFLTN_START_DATE, 
AFFLTN_END_DATE, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE
)
SELECT 
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.CNSMR_GRP_NBR, 
STG.AFFLTN_START_DATE, 
STG.AFFLTN_END_DATE, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM CNSMR_AFFLTN STG
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO DPEND_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
DPEND_SEQ_NBR, 
DPEND_NAME, 
DPEND_GENDR_IND, 
DPEND_BRTH_DATE, 
DPEND_AGE_NBR, 
DPEND_TYPE_CODE, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE
)
SELECT
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.DPEND_SEQ_NBR, 
STG.DPEND_NAME, 
STG.DPEND_GENDR_IND, 
STG.DPEND_BRTH_DATE, 
STG.DPEND_AGE_NBR, 
STG.DPEND_TYPE_CODE, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM DPEND STG
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO DPEND_TRT_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
DPEND_SEQ_NBR, 
TRT_NBR, 
DPEND_TRT_DATE, 
DPEND_TRT_INTEGER, 
DPEND_TRT_TXT,
DPEND_TRT_SEQ_NBR, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE
)
SELECT
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.DPEND_SEQ_NBR, 
STG.TRT_NBR, 
STG.DPEND_TRT_DATE, 
'' DPEND_TRT_INTEGER, 
STG.DPEND_TRT_TXT,
STG.DPEND_TRT_SEQ_NBR, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM DPEND_TRT STG
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PET_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
PET_SEQ_NBR, 
PET_NAME, 
PET_GENDR_IND, 
PET_BRTH_DATE, 
PET_AGE_NBR, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE
)
SELECT 
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.PET_SEQ_NBR, 
STG.PET_NAME, 
STG.PET_GENDR_IND, 
STG.PET_BRTH_DATE,
STG.PET_AGE_NBR, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM PET STG
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PET_TRT_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
PET_SEQ_NBR, 
TRT_ID, 
PET_TRT_DATE, 
PET_TRT_INTEGRE, 
PET_TRT_TXT, 
PET_TRT_SEQ_NBR, 
RECORD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE
)
SELECT 
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.PET_SEQ_NBR, 
STG.TRT_NBR, 
STG.PET_TRT_DATE, 
'' PET_TRT_INTEGRE, 
STG.PET_TRT_TXT, 
STG.PET_TRT_SEQ_NBR, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER))
FROM PET_TRT STG
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_EMAIL_ADDR_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
CNTCT_POINT_CATEG_CODE,
EMAIL_ADDR_TXT, 
EMAIL_FORMT_CODE, 
PREFR_IND, 
VALID_IND, 
RECORD_IND,
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
CNTCT_OPTN_NBR,
CNTCT_OPTN_IND, 
CNSMR_CHCE_DATETM,
GUARDN_NAME, 
GUARDN_EMAIL_ADDR_TXT, 
GUARDN_CNSNT_IND, 
ACNLGMT_DATE,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE )

SELECT 
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.CNTCT_POINT_CATEG_CODE, 
STG.EMAIL_ADDR_TXT,
STG.EMAIL_FORMT_CODE, 
STG.PREF_CNTCT_POINT_IND, 
STG.VALID_CNTCT_POINT_IND, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
STG.SUBSCRPTN_OPT_NBR, 
STG.SUBSCRPTN_OPT_IND,
CAST(CAST(STG.CNSMR_CHCE_DATETM AS VARCHAR(19)) AS TIMESTAMP(0)), 
STG.GUARDN_NAME, 
STG.GUARDN_EMAIL_ADDR_TXT, 
STG.GUARDN_CNSNT_IND, 
STG.ACNLGMT_DATE,
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM REGIS_PRSNA_EMAIL_ADDR STG
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_PHONE_STG
(MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
CNTCT_POINT_CATEG_CODE,
PHONE_CNTRY_NBR,
PHONE_AREA_NBR,
PHONE_EXCHG_NBR,
PHONE_LINE_NBR,
PHONE_EXTSN_NUM,
FULL_PHONE_NUM,
SMS_PREFR_IND,
SMS_AVAIL_START_TIME,
SMS_AVAIL_END_TIME,
PREFR_IND,
VALID_IND,
RECORD_IND,
LOAD_ID,
LOAD_TS,
MDM_LOAD_IND,
SYNC_STATUS,
CNTCT_OPTN_NBR,
CNTCT_OPTN_IND,
CNSMR_CHCE_DATETM,
GUARDN_NAME,
GUARDN_EMAIL_ADDR_TXT,
GUARDN_CNSNT_IND,
ACNLGMT_DATE,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE )
SELECT
STG.MKTNG_PGM_NBR,
B.REGIS_CNSMR_ID_VAL,
STG.CNTCT_POINT_CATEG_CODE,
STG.PHONE_CNTRY_NBR,
STG.PHONE_AREA_NBR,
STG.PHONE_EXCHG_NBR,
STG.PHONE_LINE_NBR,
STG.PHONE_EXTSN_NUM,
STG.FULL_PHONE_NUM,
STG.SMS_PREFR_IND,
CAST(CAST(STG.SMS_AVAIL_START_TIME AS VARCHAR(19)) AS TIMESTAMP(0)),
CAST(CAST(STG.SMS_AVAIL_END_TIME AS VARCHAR(19)) AS TIMESTAMP(0)),
STG.PREF_CNTCT_POINT_IND, 
STG.VALID_CNTCT_POINT_IND, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
STG.SUBSCRPTN_OPT_NBR, 
STG.SUBSCRPTN_OPT_IND,
CAST(CAST(STG.CNSMR_CHCE_DATETM AS VARCHAR(19)) AS TIMESTAMP(0)), 
STG.GUARDN_NAME, 
STG.GUARDN_EMAIL_ADDR_TXT, 
STG.GUARDN_CNSNT_IND, 
STG.ACNLGMT_DATE,
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM REGIS_PRSNA_PHONE STG
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_POSTL_ADDR_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
CNTCT_POINT_CATEG_CODE,
ADDR_LINE_1_TXT, 
ADDR_LINE_2_TXT, 
ADDR_LINE_3_TXT, 
STRET_NUM,
STRET_NAME, 
APT_NUM, 
PO_BOX_NUM, 
CITY_NAME, 
TERR_NAME, 
POSTL_AREA_CODE,
GEOC_AREA_TYPE_CODE, 
GEOC_AREA_NAME, 
CNTRY_NAME, 
PREFR_IND, 
VALID_IND, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS, 
CNTCT_OPTN_NBR,
CNTCT_OPTN_IND, 
CNSMR_CHCE_DATETM, 
GUARDN_NAME, 
GUARDN_EMAIL_ADDR_TXT,
GUARDN_CNSNT_IND, 
ACNLGMT_DATE,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE,
POSTL_ADDR_ID,
LAT_MEAS,
LONG_MEAS,
GL_ACCURACY,
GL_MATCH_FLG,
DR_CLEANSE_LVL,
PR_GEOCODE_FAIL,
PR_REV_GROUP,
CITY_CODE)
SELECT DISTINCT
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.CNTCT_POINT_CATEG_CODE, 
STG1.ADDR_LINE_1_TXT,
STG1.ADDR_LINE_2_TXT, 
STG1.ADDR_LINE_3_TXT, 
STG1.STRET_NUM, 
STG1.STRET_NAME, 
STG1.APT_NUM, 
STG1.PO_BOX_NUM, 
STG1.CITY_NAME, 
STG1.TERR_NAME,
STG1.POSTL_AREA_CODE, 
'' GEOC_AREA_TYPE_CODE, 
'' GEOC_AREA_NAME, 
COALESCE(STG.CNTRY_CODE,B.CNTRY_CODE,SUBSTR(C.LEGAL_ENT_SHORT_NAME,1,3)) AS CNTRY_NAME, 
STG.PREF_CNTCT_POINT_IND, 
STG.VALID_CNTCT_POINT_IND, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
STG.SUBSCRPTN_OPT_NBR, 
STG.SUBSCRPTN_OPT_IND,
CAST(CAST(STG.CNSMR_CHCE_DATETM AS VARCHAR(19)) AS TIMESTAMP(0)), 
STG.GUARDN_NAME, 
STG.GUARDN_EMAIL_ADDR_TXT, 
STG.GUARDN_CNSNT_IND, 
STG.ACNLGMT_DATE,
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE,
STG.POSTL_ADDR_ID,
STG.LAT_MEAS,
STG.LONG_MEAS,
STG.GL_ACCURACY,
STG.GL_MATCH_FLG,
STG.DR_CLEANSE_LVL,
STG.PR_GEOCODE_FAIL,
STG.PR_REV_GROUP,
STG.CITY_CODE
FROM REGIS_PRSNA_POSTL_ADDR STG
JOIN PRSNA_POSTL_ADDR_ORIG STG1
ON STG.MKTNG_PGM_NBR=STG1.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID=STG1.REGIS_PRSNA_ID
AND STG.CNTCT_POINT_CATEG_CODE=STG1.CNTCT_POINT_CATEG_CODE
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID
LEFT JOIN LEGAL_ENT C
ON C.LEGAL_ENT_NBR=B.LEGAL_ENT_NBR

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_SOC_NETWK_ACCT_STG 
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
CNTCT_POINT_CATEG_CODE,   
SOCIAL_NETWK_ACCT_ID_VAL, 
PREFR_IND,                     
VALID_IND,                     
RECORD_IND, 
LOAD_ID,   
LOAD_TS, 
MDM_LOAD_IND, 
SYNC_STATUS,
CNTCT_OPTN_NBR, 
CNTCT_OPTN_IND, 
CNSMR_CHCE_DATETM,   
GUARDN_NAME, 
GUARDN_EMAIL_ADDR_TXT, 
GUARDN_CNSNT_IND, 
ACNLGMT_DATE,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE )
SELECT  
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.CNTCT_POINT_CATEG_CODE, 
STG.SOCIAL_NETWK_ACCT_ID_VAL,    
STG.PREF_CNTCT_POINT_IND, 
STG.VALID_CNTCT_POINT_IND, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
STG.SUBSCRPTN_OPT_NBR, 
STG.SUBSCRPTN_OPT_IND,
CAST(CAST(STG.CNSMR_CHCE_DATETM AS VARCHAR(19)) AS TIMESTAMP(0)),  
STG.GUARDN_NAME, 
STG.GUARDN_EMAIL_ADDR_TXT, 
STG.GUARDN_CNSNT_IND, 
STG.ACNLGMT_DATE,
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM REGIS_PRSNA_SOC_NET_ACCT STG
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
USER_NAME, 
PRSNA_REG_DT, 
NAME_PREFX_TXT, 
GVN_NAME, 
MID_NAME, 
FAMLY_NAME, 
NAME_SUFFX_TXT, 
FULL_NAME, 
GENDR_IND, 
BRTH_DATE, 
LANG_CODE, 
PRSNA_STTUS_CODE, 
RECORD_IND,  
LYLTY_ACCT_NUM,
LYLTY_PGM_NBR,
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE,
CNTRY_CODE
)
SELECT 
STG.MKTNG_PGM_NBR, 
STG.REGIS_CNSMR_ID_VAL, 
STG.CNSMR_USER_NAME, 
CAST(CAST(STG.REGIS_DATE AS VARCHAR(19)) AS TIMESTAMP(0)), 
STG.NAME_PREFX_TXT, 
STG.GVN_NAME, 
STG.MID_NAME, 
STG.FAMLY_NAME, 
STG.NAME_SUFFX_TXT, 
STG.FULL_NAME, 
STG.GENDR_IND,
STG.BRTH_DATE, 
STG.LANG_CODE, 
STG.PRSNA_STATUS_CODE, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,  
STG.LYLTY_ACCT_NUM,
STG.LYLTY_PGM_NBR,
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE,
STG.CNTRY_CODE
FROM REGIS_PRSNA STG
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO PRSNA_TRT_STG
(MKTNG_PGM_NBR, 
REGIS_CNSMR_ID_VAL, 
TRT_NBR, 
PRSNA_TRT_SEQ_NBR, 
PRSNA_TRT_DATE, 
PRSNA_TRT_INTEGER,
PRSNA_TRT_TXT, 
RECORD_IND, 
LOAD_ID, 
LOAD_TS, 
MDM_LOAD_IND,
SYNC_STATUS,
SYS_TARGET_ID,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_CREATION_DATE
)
SELECT 
STG.MKTNG_PGM_NBR, 
B.REGIS_CNSMR_ID_VAL, 
STG.TRT_NBR, 
STG.PRSNA_TRT_SEQ_NBR, 
STG.PRSNA_TRT_DATE,  
'' PRSNA_TRT_INTEGER, 
STG.PRSNA_TRT_TXT, 
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE, 
CAST(TRIM(B.SYS_SOURCE) AS INTEGER), 
STG.SYS_LAST_MODIFIED_DATE, 
'' MDM_LOAD_IND,
'VALIDATED',
B.SYS_TARGET_ID,
TRIM(CAST(B.SYS_SOURCE AS INTEGER)),
COALESCE(STG.SYS_NC_TYPE,'I') AS SYS_NC_TYPE,
STG.SYS_LAST_MODIFIED_DATE
FROM PRSNA_TRT STG
INNER JOIN
REMATCH_STG B
ON
STG.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND STG.REGIS_PRSNA_ID = B.REGIS_PRSNA_ID

WHERE B.SYS_SOURCE IN (
SEL SYS_SOURCE FROM EXTRN);

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

.LABEL CLEANSEPROCESS

/***************** Release 5.8 - Add priority for DTC loads ********************/
CREATE VOLATILE TABLE DTC_LOAD_PICK 
AS
(SEL LOAD_ID,
CASE WHEN DTC_REGIS_PRIOR_IND='Y'
THEN 1
ELSE 2
END AS DTC_IND FROM
PRSNA_STG A
/*Begin Change R6.2*/
LEFT JOIN AGNCY_MKTNG_PGM B
ON A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.SYS_TARGET_ID=B.AGNCY_NBR
/*End Change R6.2*/ 
WHERE LOAD_ID IN (SEL LOAD_ID
FROM MDM.LOAD_INFO
WHERE MDM.LOAD_INFO.PROCESS_NAME='Trillium'
AND MDM.LOAD_INFO.STATUS = 'Ready to Process'
AND MDM.LOAD_INFO.CNTRY_NAME = 'RUS'
AND (MDM.LOAD_INFO.CNTRY_NAME,MDM.LOAD_INFO.LOAD_ID) IN
(SEL CNTRY_NAME,LOAD_ID FROM LOAD_PICK))
GROUP BY 1,2
)
 WITH DATA
 PRIMARY INDEX(LOAD_ID)
 ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

SEL LOAD_ID FROM DTC_LOAD_PICK
WHERE DTC_IND=1
MINUS
SEL LOAD_ID FROM DTC_LOAD_PICK
WHERE DTC_IND=2;

.IF ACTIVITYCOUNT > 0 THEN .GOTO DELNONDTC
.IF ACTIVITYCOUNT = 0 THEN .GOTO CLEANSEUPDATE
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

.LABEL DELNONDTC

DEL FROM LOAD_PICK
WHERE LOAD_ID IN (SEL LOAD_ID FROM DTC_LOAD_PICK
WHERE DTC_IND=2);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
/***************** Release 5.8 - Add priority for DTC loads ********************/

.LABEL CLEANSEUPDATE
UPDATE MDM.LOAD_INFO
SET STATUS = 'In Progress'
,PROCESS_END_TIME = CAST(CURRENT_TIMESTAMP(0) AS VARCHAR(19))
WHERE MDM.LOAD_INFO.PROCESS_NAME='Trillium'
AND MDM.LOAD_INFO.STATUS = 'Ready to Process'
AND MDM.LOAD_INFO.CNTRY_NAME = 'RUS'
AND (MDM.LOAD_INFO.CNTRY_NAME,MDM.LOAD_INFO.LOAD_ID) IN
(SEL CNTRY_NAME,LOAD_ID FROM LOAD_PICK)
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE TSS_CLEANSE_LOAD_NBR
AS 
(

SELECT LC.LOAD_ID
FROM MDM_LOAD_CONTROL LC

INNER JOIN LOAD_INFO LII
ON LC.LOAD_ID = LII.LOAD_ID
AND LII.PROCESS_NAME='Trillium'
AND LII.STATUS = 'In Progress'
AND LII.CNTRY_NAME = 'RUS'
GROUP BY 1
)
WITH DATA
PRIMARY INDEX ( LOAD_ID )
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO MDM.LOAD_INFO
(
LOAD_ID,
PROCESS_NAME,
PROCESS_START_TIME,
PROCESS_END_TIME,
STATUS,
SYS_CREATION_DATE,
SYS_LAST_MODIFIED_DATE,
CNTRY_NAME,
BATCH_ID) 
SELECT
LOAD.LOAD_ID,
'Cleanse Input Load',
CAST(CURRENT_TIMESTAMP(0) AS VARCHAR(19)),
CAST(CURRENT_TIMESTAMP(0) AS VARCHAR(19)),
'In Progress',
CAST(CURRENT_TIMESTAMP(0) AS VARCHAR(19)),
CAST(CURRENT_TIMESTAMP(0) AS VARCHAR(19)),
'RUS',
LI.BATCH_ID
FROM MDM.MDM_LOAD_CONTROL LOAD
INNER JOIN LOAD_INFO LI
ON LOAD.LOAD_ID = LI.LOAD_ID
AND LI.PROCESS_NAME='Trillium'
AND LI.STATUS = 'In Progress'
AND LI.CNTRY_NAME = 'RUS'

INNER JOIN TSS_CLEANSE_LOAD_NBR LOAD1
ON LOAD.LOAD_ID = LOAD1.LOAD_ID

LEFT OUTER JOIN LOAD_INFO LII
ON LOAD.LOAD_ID = LII.LOAD_ID
AND LII.PROCESS_NAME='Wrapper'

WHERE LII.LOAD_ID IS NULL
GROUP BY
LOAD.LOAD_ID,
LI.BATCH_ID
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE


CREATE VOLATILE TABLE REG_PHONE
AS 
(

SELECT
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_TARGET_ID,
PHONE_EXTSN_NUM,
FULL_PHONE_NUM,
PHONE_LINE_NBR,
PHONE_AREA_NBR,
PHONE_EXCHG_NBR,
PHONE_CNTRY_NBR,
SYNC_STATUS,
CNTCT_POINT_CATEG_CODE,
--CNTCT_OPTN_NBR,
RANK() OVER(PARTITION BY MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,SYS_TARGET_ID
ORDER BY SYS_SOURCE DESC,
SYS_NC_TYPE DESC,FULL_PHONE_NUM DESC  ) AS RNK
FROM 
PRSNA_PHONE_STG
WHERE LOAD_ID IN (SEL LOAD_ID FROM TSS_CLEANSE_LOAD_NBR)
AND COALESCE(TRIM(FULL_PHONE_NUM),'') <> ''
)
WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR,REGIS_CNSMR_ID_VAL,SYS_SOURCE,RNK )
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE REG_EMAIL
AS 
(

SELECT
MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,
SYS_SOURCE,
SYS_NC_TYPE,
SYS_TARGET_ID,
EMAIL_ADDR_TXT,
SYNC_STATUS,
CNTCT_POINT_CATEG_CODE,
--CNTCT_OPTN_NBR,
RANK() OVER(PARTITION BY MKTNG_PGM_NBR,
REGIS_CNSMR_ID_VAL,SYS_TARGET_ID
ORDER BY SYS_SOURCE DESC,
SYS_NC_TYPE DESC,EMAIL_ADDR_TXT DESC  ) AS RNK
FROM 
PRSNA_EMAIL_ADDR_STG 
WHERE LOAD_ID IN (SEL LOAD_ID FROM TSS_CLEANSE_LOAD_NBR)
AND COALESCE(TRIM(EMAIL_ADDR_TXT),'') <> ''
)
WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR,REGIS_CNSMR_ID_VAL,SYS_SOURCE,RNK )
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE PHONE_EMAIL
AS 
(

SELECT 
COALESCE(A.MKTNG_PGM_NBR,B.MKTNG_PGM_NBR) MKTNG_PGM_NBR,
COALESCE(A.REGIS_CNSMR_ID_VAL,B.REGIS_CNSMR_ID_VAL) REGIS_CNSMR_ID_VAL,
COALESCE(A.SYS_SOURCE,B.SYS_SOURCE) SYS_SOURCE,
COALESCE(A.SYS_NC_TYPE,B.SYS_NC_TYPE) SYS_NC_TYPE,
A.PHONE_EXTSN_NUM,
A.FULL_PHONE_NUM,
A.PHONE_LINE_NBR,
A.PHONE_AREA_NBR,
A.PHONE_EXCHG_NBR,
A.PHONE_CNTRY_NBR,
B.EMAIL_ADDR_TXT,
A.SYNC_STATUS AS PHONE_SYNC_STATUS,
B.SYNC_STATUS,
A.CNTCT_POINT_CATEG_CODE AS PHONE_CONTACT,
--A.CNTCT_OPTN_NBR AS PHONE_SUBSCRPTN,
B.CNTCT_POINT_CATEG_CODE AS EMAIL_CONTACT,
--B.CNTCT_OPTN_NBR AS EMAIL_SUBSCRPTN,
COALESCE(A.SYS_TARGET_ID,B.SYS_TARGET_ID) SYS_TARGET_ID

FROM 

REG_PHONE A

FULL OUTER JOIN 
REG_EMAIL B
     ON A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
    AND A.REGIS_CNSMR_ID_VAL = B.REGIS_CNSMR_ID_VAL
    AND A.SYS_SOURCE = B.SYS_SOURCE
    AND A.SYS_TARGET_ID = B.SYS_TARGET_ID
     AND A.RNK = B.RNK

)
WITH DATA
PRIMARY INDEX ( MKTNG_PGM_NBR,REGIS_CNSMR_ID_VAL,SYS_SOURCE )
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

DELETE FROM MDM.TSS_CLEANSE_INPUT1_RUS ALL;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO MDM.TSS_CLEANSE_INPUT1_RUS
(LEGAL_ENT_NBR                 
,MKTNG_PGM_NBR                 
,REGIS_CNSMR_ID_VAL            
,NAME_PREFX_TXT                
,GVN_NAME                      
,MID_NAME                      
,FAMLY_NAME                    
,NAME_SUFFX_TXT                
,FULL_NAME                     
,GENDR_IND                     
,BRTH_DATE                     
,ADDR_LINE_1_TXT               
,ADDR_LINE_2_TXT               
,ADDR_LINE_3_TXT               
,STRET_NUM                     
,STRET_NAME                    
,APT_NUM                       
,PO_BOX_NUM                    
,CITY_NAME                     
,POSTL_AREA_CODE               
,TERR_NAME                     
,CNTRY_NAME                    
,DPEND_NAME                    
,PET_NAME                      
,WIN_KEY                       
,SYNC_STATUS                   
,USER_NAME                     
,LANG_CODE                     
,SYS_SOURCE                    
,SYS_NC_TYPE                   
,SYS_CREATION_DATE     
,SYS_TARGET_ID
,EMAIL_ADDR_TXT                
,PHONE_EXTSN_NUM               
,FULL_PHONE_NUM                
,PHONE_LINE_NBR                
,PHONE_AREA_NBR                
,PHONE_EXCHG_NBR               
,PHONE_CNTRY_NBR               
,PRSNA_REG_DT       
,ADDRESS_CONTACT
,ADDRESS_SUBSCRPTN
,EMAIL_CONTACT
--,EMAIL_SUBSCRPTN
,PHONE_CONTACT
--,PHONE_SUBSCRPTN
)
SELECT DISTINCT
   MKTNG_PGM_1.LEGAL_ENT_NBR
  ,PRSNA_STG_1.MKTNG_PGM_NBR
  ,PRSNA_STG_1.REGIS_CNSMR_ID_VAL
  ,PRSNA_STG_1.NAME_PREFX_TXT
  ,PRSNA_STG_1.GVN_NAME
  ,PRSNA_STG_1.MID_NAME
  ,PRSNA_STG_1.FAMLY_NAME
  ,PRSNA_STG_1.NAME_SUFFX_TXT
  ,CASE WHEN COALESCE(TRIM(PRSNA_STG_1.FULL_NAME),'')='' THEN TRIM(PRSNA_STG_1.GVN_NAME)||' '||TRIM(PRSNA_STG_1.FAMLY_NAME)
	ELSE TRIM(PRSNA_STG_1.FULL_NAME)
	END
  ,PRSNA_STG_1.GENDR_IND
  ,PRSNA_STG_1.BRTH_DATE
  ,PRSNA_POSTL_ADDR_STG_1.ADDR_LINE_1_TXT
  ,PRSNA_POSTL_ADDR_STG_1.ADDR_LINE_2_TXT
  ,PRSNA_POSTL_ADDR_STG_1.ADDR_LINE_3_TXT
  ,PRSNA_POSTL_ADDR_STG_1.STRET_NUM
  ,PRSNA_POSTL_ADDR_STG_1.STRET_NAME
  ,PRSNA_POSTL_ADDR_STG_1.APT_NUM
  ,PRSNA_POSTL_ADDR_STG_1.PO_BOX_NUM
  ,NULLIF(PRSNA_POSTL_ADDR_STG_1.CITY_NAME,'UNK') CITY_NAME
  ,PRSNA_POSTL_ADDR_STG_1.POSTL_AREA_CODE
  ,NULLIF(PRSNA_POSTL_ADDR_STG_1.TERR_NAME,'UNK') TERR_NAME
  ,COALESCE(PRSNA_POSTL_ADDR_STG_1.CNTRY_NAME,PRSNA_STG_1.CNTRY_CODE) AS CNTRY_NAME
  ,'' DPEND_NAME
  ,'' PET_NAME
  ,PRSNA_STG_1.WIN_KEY
  ,PRSNA_STG_1.SYNC_STATUS
  ,PRSNA_STG_1.USER_NAME
  ,PRSNA_STG_1.LANG_CODE
  ,TRIM(CAST(PRSNA_STG_1.SYS_SOURCE AS INTEGER)) AS SYS_SOURCE
  ,PRSNA_STG_1.SYS_NC_TYPE      
  ,PRSNA_STG_1.SYS_CREATION_DATE
  ,PRSNA_STG_1.SYS_TARGET_ID
  ,PRSNA_EMAIL_ADDR_STG_1.EMAIL_ADDR_TXT AS EMAIL_ADDR_TXT_1
  ,PRSNA_EMAIL_ADDR_STG_1.PHONE_EXTSN_NUM AS PHONE_EXTSN_NUM_1
  ,PRSNA_EMAIL_ADDR_STG_1.FULL_PHONE_NUM AS FULL_PHONE_NUM_1
  ,PRSNA_EMAIL_ADDR_STG_1.PHONE_LINE_NBR  AS PHONE_LINE_NBR_1
  ,PRSNA_EMAIL_ADDR_STG_1.PHONE_AREA_NBR  AS PHONE_AREA_NBR_1
  ,PRSNA_EMAIL_ADDR_STG_1.PHONE_EXCHG_NBR AS PHONE_EXCHG_NBR_1
  ,PRSNA_EMAIL_ADDR_STG_1.PHONE_CNTRY_NBR AS PHONE_CNTRY_NBR_1
  ,PRSNA_STG_1.PRSNA_REG_DT
  ,PRSNA_POSTL_ADDR_STG_1.CNTCT_POINT_CATEG_CODE AS ADDRESS_CONTACT
  ,CAST(TRIM(CAST(PRSNA_POSTL_ADDR_STG_1.CNTCT_OPTN_NBR AS INTEGER)) AS VARCHAR(5)) AS ADDRESS_SUBSCRPTN
  ,PRSNA_EMAIL_ADDR_STG_1.EMAIL_CONTACT
  --,CAST(TRIM(CAST(PRSNA_EMAIL_ADDR_STG_1.EMAIL_SUBSCRPTN AS INTEGER)) AS VARCHAR(5)) EMAIL_SUBSCRPTN
  ,PRSNA_EMAIL_ADDR_STG_1.PHONE_CONTACT
  --,CAST(TRIM(CAST(PRSNA_EMAIL_ADDR_STG_1.PHONE_SUBSCRPTN AS INTEGER)) AS VARCHAR(5)) PHONE_SUBSCRPTN  
 
   FROM MDM.PRSNA_STG PRSNA_STG_1
   
   INNER JOIN TSS_CLEANSE_LOAD_NBR LOAD
   ON PRSNA_STG_1.LOAD_ID = LOAD.LOAD_ID
 
   LEFT OUTER JOIN MDM.PRSNA_POSTL_ADDR_STG PRSNA_POSTL_ADDR_STG_1
     ON PRSNA_STG_1.MKTNG_PGM_NBR = PRSNA_POSTL_ADDR_STG_1.MKTNG_PGM_NBR
    AND PRSNA_STG_1.REGIS_CNSMR_ID_VAL = PRSNA_POSTL_ADDR_STG_1.REGIS_CNSMR_ID_VAL
    AND PRSNA_STG_1.SYS_SOURCE = PRSNA_POSTL_ADDR_STG_1.SYS_SOURCE
    AND PRSNA_STG_1.SYS_TARGET_ID = PRSNA_POSTL_ADDR_STG_1.SYS_TARGET_ID
 
   LEFT OUTER JOIN PHONE_EMAIL PRSNA_EMAIL_ADDR_STG_1

     ON PRSNA_STG_1.MKTNG_PGM_NBR = PRSNA_EMAIL_ADDR_STG_1.MKTNG_PGM_NBR
    AND PRSNA_STG_1.REGIS_CNSMR_ID_VAL = PRSNA_EMAIL_ADDR_STG_1.REGIS_CNSMR_ID_VAL
    AND PRSNA_STG_1.SYS_SOURCE = PRSNA_EMAIL_ADDR_STG_1.SYS_SOURCE
    AND PRSNA_STG_1.SYS_TARGET_ID = PRSNA_EMAIL_ADDR_STG_1.SYS_TARGET_ID
    
   LEFT OUTER JOIN MDM.MKTNG_PGM MKTNG_PGM_1
     ON PRSNA_STG_1.MKTNG_PGM_NBR = MKTNG_PGM_1.MKTNG_PGM_NBR
 
 QUALIFY RANK() OVER (PARTITION BY PRSNA_STG_1.MKTNG_PGM_NBR
  ,PRSNA_STG_1.REGIS_CNSMR_ID_VAL 
  ,PRSNA_STG_1.SYS_TARGET_ID 
 ORDER BY PRSNA_STG_1.PRSNA_REG_DT DESC
 ,PRSNA_STG_1.LOAD_TS DESC
 ,PRSNA_STG_1.LOAD_ID DESC
 ,PRSNA_STG_1.RECORD_IND DESC
) = 1;

COLLECT STATS ON MDM.TSS_CLEANSE_INPUT1_RUS
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS ON MDM.TSS_CLEANSE_INPUT1_RUS
COLUMN REGIS_CNSMR_ID_VAL;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS ON MDM.TSS_CLEANSE_INPUT1_RUS
COLUMN (MKTNG_PGM_NBR,REGIS_CNSMR_ID_VAL);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS ON MDM.TSS_CLEANSE_INPUT1_RUS
COLUMN LEGAL_ENT_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE EMAIL AS (
SEL B.EMAIL_ADDR_TXT 
FROM 
(SEL EMAIL_ADDR_TXT 
FROM TSS_CLEANSE_INPUT1_RUS 
GROUP BY LEGAL_ENT_NBR, MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL, SYS_TARGET_ID, EMAIL_ADDR_TXT
UNION ALL
SEL EMAIL_ADDR_TXT
FROM REGIS_PRSNA_EMAIL_ADDR
WHERE MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM 
MKTNG_PGM WHERE LEGAL_ENT_NBR IN (SEL LEGAL_ENT_NBR FROM 
TSS_CLEANSE_INPUT1_RUS))
GROUP BY REGIS_PRSNA_ID, EMAIL_ADDR_TXT
) B
GROUP BY 1
HAVING COUNT(*) >= 50
) WITH DATA
ON COMMIT PRESERVE ROWS
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

DELETE FROM REF_EMAIL_DATA_IGNORE_RUS ALL;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO REF_EMAIL_DATA_IGNORE_RUS
SEL B.EMAIL_ADDR_TXT 
FROM 
EMAIL B
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE PHONE AS (
SEL B.FULL_PHONE_NUM 
FROM 
(SEL FULL_PHONE_NUM
FROM TSS_CLEANSE_INPUT1_RUS
GROUP BY LEGAL_ENT_NBR, MKTNG_PGM_NBR, REGIS_CNSMR_ID_VAL, SYS_TARGET_ID, FULL_PHONE_NUM
UNION ALL
SEL FULL_PHONE_NUM
FROM REGIS_PRSNA_PHONE
WHERE MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM 
MKTNG_PGM WHERE LEGAL_ENT_NBR IN (SEL LEGAL_ENT_NBR FROM 
TSS_CLEANSE_INPUT1_RUS))
GROUP BY REGIS_PRSNA_ID, FULL_PHONE_NUM
) B
GROUP BY 1
HAVING COUNT(*) >= 50
) WITH DATA
ON COMMIT PRESERVE ROWS
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

DELETE FROM REF_PHONE_DATA_IGNORE_RUS ALL;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO REF_PHONE_DATA_IGNORE_RUS
SEL B.FULL_PHONE_NUM 
FROM 
PHONE B
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

COLLECT STATS REF_EMAIL_DATA_IGNORE_RUS
COLUMN EMAIL_ADDR_TXT;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE
COLLECT STATS REF_PHONE_DATA_IGNORE_RUS
COLUMN FULL_PHONE_NUM;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE 

UPDATE TSS_CLEANSE_INPUT1_RUS
SET FULL_PHONE_NUM = ''
WHERE FULL_PHONE_NUM IN (SEL FULL_PHONE_NUM
FROM REF_PHONE_DATA_IGNORE_RUS);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

UPDATE TSS_CLEANSE_INPUT1_RUS
SET EMAIL_ADDR_TXT = ''
WHERE EMAIL_ADDR_TXT IN (SEL EMAIL_ADDR_TXT
FROM REF_EMAIL_DATA_IGNORE_RUS);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE CNTRY_CODE AS
 (SEL 'RUS' AS CNTRY_CODE) 
 WITH DATA 
 ON COMMIT PRESERVE ROWS;
 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
 
 SEL 1 FROM CNTRY_CODE WHERE CNTRY_CODE IN ('ESP');
.IF ACTIVITYCOUNT > 0 THEN .GOTO SPAIN
.IF ACTIVITYCOUNT = 0 THEN .GOTO CLEANSE

.LABEL SPAIN

UPDATE TSS_CLEANSE_INPUT1_RUS
FROM
(SEL MKTNG_PGM_NBR,REGIS_CNSMR_ID_VAL,SYS_TARGET_ID,LOAD_ID,PRSNA_TRT_TXT
FROM PRSNA_TRT_STG
WHERE TRT_NBR IN (SEL TRT_NBR FROM TRT 
WHERE TRT_NAME='ID - Spanish National')
GROUP BY MKTNG_PGM_NBR,REGIS_CNSMR_ID_VAL,SYS_TARGET_ID,LOAD_ID,PRSNA_TRT_TXT) B
SET NATIONAL_ID_NBR=B.PRSNA_TRT_TXT
WHERE TSS_CLEANSE_INPUT1_RUS.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND TSS_CLEANSE_INPUT1_RUS.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
AND TSS_CLEANSE_INPUT1_RUS.SYS_TARGET_ID=B.SYS_TARGET_ID
AND TSS_CLEANSE_INPUT1_RUS.SYS_SOURCE=TRIM(CAST(B.LOAD_ID AS INTEGER));
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

CREATE VOLATILE TABLE NATIONAL_ID_NBR AS (
SEL B.NATIONAL_ID_NBR 
FROM 
(SEL NATIONAL_ID_NBR 
FROM TSS_CLEANSE_INPUT1_RUS 
UNION ALL
SEL NATIONAL_ID_NBR
FROM REGIS_PRSNA
WHERE MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM 
MKTNG_PGM WHERE LEGAL_ENT_NBR IN (SEL LEGAL_ENT_NBR FROM 
TSS_CLEANSE_INPUT1_RUS))
) B
GROUP BY 1
HAVING COUNT(*) >= 50
) WITH DATA
ON COMMIT PRESERVE ROWS
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

INSERT INTO REF_NATNL_ID_DATA_IGNORE_RUS
SEL B.NATIONAL_ID_NBR 
FROM 
NATIONAL_ID_NBR B
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

UPDATE TSS_CLEANSE_INPUT1_RUS
SET NATIONAL_ID_NBR = ''
WHERE NATIONAL_ID_NBR IN (SEL NATIONAL_ID_NBR
FROM REF_NATNL_ID_DATA_IGNORE_RUS);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

.LABEL CLEANSE

UPDATE MDM.LOAD_INFO
SET STATUS = 'Success'
,PROCESS_END_TIME = CAST(CURRENT_TIMESTAMP(0) AS VARCHAR(19))
WHERE MDM.LOAD_INFO.PROCESS_NAME='Cleanse Input Load'
AND MDM.LOAD_INFO.STATUS = 'In Progress'
AND MDM.LOAD_INFO.CNTRY_NAME = 'RUS'
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE

.LABEL EXIT

.IF ERRORLEVEL > 4 THEN .GOTO ERR ;
.IF ERRORLEVEL <= 4 THEN .GOTO WARN;

.LABEL ERR

/*
UPDATE MDM.LOAD_INFO
SET STATUS = 'Failure'
,PROCESS_END_TIME = CAST(CURRENT_TIMESTAMP(0) AS VARCHAR(19))
WHERE MDM.LOAD_INFO.PROCESS_NAME='Cleanse Input Load'
AND MDM.LOAD_INFO.STATUS = 'In Progress'
AND MDM.LOAD_INFO.CNTRY_NAME = 'RUS'
;
*/

.QUIT ERRORCODE

.LABEL WARN
.QUIT 0

<?xml version="1.0" encoding="UTF-8"?>
<DOCUMENTS>
  <!--
 	 Copyright (c) 2009 by Teradata Corporation. 
	 All Rights Reserved. 
	 Teradata CONFIDENTIAL AND TRADE SECRET 
 -->
  <DEFINE_METHOD Name="constructPGL">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="searchAttribs">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="thisReturn"/>
        <REQUEST Name="cwSearchResultsColumn" ServiceName="UI_WORKFLOW" HandleException="true" AssignToVar="serchResultColums">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
		  <container Value="{$thisParam/container/@Value}"/>
        </REQUEST>
        <IF_TEST Test="$thisParam/container/@Value='result'">
          <THEN>
            <REQUEST Name="getCodeMasterValue" ServiceName="USER_SECURITY" AssignToVar="StatusColorCodes">
              <TYPE_ID Value="Status Color Codes"/>
            </REQUEST>
            <TO_DOCVAR AssignToVar="completeCols">
              <ROOT/>
            </TO_DOCVAR>
            <IF_TEST Test="$thisParam/singleTable/@Value='true' and count($thisParam/LINK_VALUES/RESPONSE/*)>0">
              <THEN>
                <FOR_EACH SelectList="$thisParam/LINK_VALUES/RESPONSE/DOCUMENTLINK" CurrentElement="currMap">
                  <TO_DOCVAR AssignToVar="temp">
                    <DOCUMENT_LINK Name="{$currMap/@Name}"/>
                  </TO_DOCVAR>
                  <FOR_EACH CurrentElement="MapProp" SelectList="$currMap/*">
                    <FOR_EACH CurrentElement="curElm" SelectList="$thisParam/PROP_COLS/RESPONSE/SQL_RESULT">
                      <IF_TEST Test="($MapProp/@To = $curElm/PROP_VALUE/@Value) and ($MapProp/@From=substringAfter($curElm/ATTRIBUTE_NAME/@Value,'.'))">
                        <THEN>
                          <TO_DOCVAR AssignToVar="tempDoc">
                            <ROOT/>
                          </TO_DOCVAR>
                          <SET_NAME DocVar="tempDoc" FromValue="F_{$curElm/PROP_VALUE/@Value}"/>
                          <SET DocVar="tempDoc" Attribute="select" FromValue="{$curElm/ATTRIBUTE_NAME/@Value}/@Value"/>
                        </THEN>
                      </IF_TEST>
                    </FOR_EACH>
                    <ADD_CHILDREN DocVar="temp" FromDocVar="tempDoc"/>
                  </FOR_EACH>
                  <ADD_CHILDREN DocVar="completeCols" FromDocVar="temp"/>
                </FOR_EACH>
              </THEN>
            </IF_TEST>
          </THEN>
        </IF_TEST>
        <FOR_EACH CurrentElement="curMap" SelectList="$thisParam/LINK_VALUES/RESPONSE/DOCUMENTLINK/MAP_PROPERTY">
          <REMOVE_ATTRIBUTE Name="islinkExist" DocVar="curMap"/>
        </FOR_EACH>
        <GET_DOCUMENT AssignToVar="cwSearchResultsTables" Name="cwSearchResultsTables" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <SELECT>
            <serviceName/>
            <tableName/>
            <dbName/>
          </SELECT>
        </GET_DOCUMENT>
        <IF_TEST Test="$cwSearchResultsTables/cwSearchResultsTables/serviceName/@Value != 'nonMDM'">
          <THEN>
            <GET_DOC_PROPERTIES ServiceName="{$cwSearchResultsTables/cwSearchResultsTables/serviceName/@Value}" TableName="{$cwSearchResultsTables/cwSearchResultsTables/tableName/@Value}" AssignToVar="DocPropertiesVar" HandleException="true"/>
          </THEN>
        </IF_TEST>
        <FOR_EACH CurrentElement="currRoles" SelectList="$serchResultColums/cwSearchResultsColumns">
          <IF_TEST Test="$thisParam/joinMechanism/@Value='Explicit Join'">
            <THEN>
              <SET Var="attributeName" FromValue="{$currRoles/dbName/@Value}.{$currRoles/tableNamePhy/@Value}.{$currRoles/columnNamePhy/@Value}"/>
            </THEN>
            <ELSE>
              <SET Var="attributeName" FromValue="{$currRoles/tableName/@Value}.{$currRoles/columnName/@Value}"/>
            </ELSE>
          </IF_TEST>
          <GET_DOCUMENT AssignToVar="serchResultAttrib" Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
            <container Value="{$thisParam/container/@Value}"/>
            <attributeName Value="{$attributeName}"/>
            <workflowId Value="{$thisParam/workflowId/@Value}"/>
            <ORDER_BY>
              <propName Sort="Ascending"/>
            </ORDER_BY>
          </GET_DOCUMENT>
          <IF_TEST Test="$thisParam/singleTable/@Value='true' and count($thisParam/LINK_VALUES/RESPONSE/*)>0 and strlen($thisParam/PROP_COLS/RESPONSE/SQL_RESULT/ATTRIBUTE_NAME[@Value=$attributeName]/@Value)!=0">
            <THEN>
              <SET Var="countLink" FromValue="0"/>
              <SET Var="ColumnNameTemp" FromValue="{substringAfter($attributeName/@Value,'.')}"/>
              <SET Var="foundLinkMatch" FromValue="false"/>
              <FOR_EACH CurrentElement="curMap" SelectList="$thisParam/LINK_VALUES/RESPONSE/DOCUMENTLINK">
                <IF_TEST Test="$foundLinkMatch = 'true'">
                  <THEN>
                    <BREAK/>
                  </THEN>
                </IF_TEST>
                <SET Var="foundLinkPropMatch" FromValue="false"/>
                <FOR_EACH CurrentElement="mappedPropTemp" SelectList="$curMap/MAP_PROPERTY">
                  <IF_TEST Test="$foundLinkPropMatch = 'true'">
                    <THEN>
                      <BREAK/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test=" $ColumnNameTemp = $mappedPropTemp/@From">
                    <THEN>
                      <IF_TEST Test="strlen($curMap/MAP_PROPERTY/@Referenced) != 0 or $countLink/@Value != 0">
                        <THEN>
                          <BREAK/>
                        </THEN>
                        <ELSE>
                          <TO_DOCVAR AssignToVar="completeColsTemp">
                            <ROOT/>
                          </TO_DOCVAR>
                          <FOR_EACH SelectList="$curMap/*" CurrentElement="MapProp">
                            <IF_TEST Test="strlen($MapProp/@islinkExist) != 0">
                              <THEN>
                                <CONTINUE/>
                              </THEN>
                            </IF_TEST>
                            <IF_TEST Test="$MapProp/@From = $ColumnNameTemp/@Value">
                              <THEN>
                                <SET DocVar="curDocLink" FromSelect="$completeCols/DOCUMENT_LINK[@Name = $curMap/@Name]"/>
                                <FOR_EACH CurrentElement="curElm" SelectList="$curDocLink/*">
                                  <IF_TEST Test="$MapProp/@To = substringAfter($curElm/name(),'F_')">
                                    <THEN>
                                      <ADD_CHILDREN DocVar="completeColsTemp" FromSelectList="$curDocLink/*"/>
                                    </THEN>
                                  </IF_TEST>
                                </FOR_EACH>
                                <SET Var="countLink" FromValue="1"/>
                                <SET Var="docName" FromValue="{$curMap/@LinkedDocument}"/>
                                <SET Var="url" FromValue="{$thisParam/webuiContextPath/@Value}/start.x2ps?START_WORKFLOW=TableEditorUIWf&amp;DOCUMENT_NAME={$docName}&amp;DOC_SERVICE_NAME={$thisParam/TABLE_DETAILS/*/*/serviceName/@Value}"/>
                                <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="generate" AssignToVar="nativeReturn">
                                  <PARAM Var="serchResultAttrib" Caption="serchResultAttrib"/>
                                </NATIVE_FUNCTION>
                                <TO_DOCVAR AssignToVar="nativeReturn">
                                  <RESPONSE>
                                    <ui:link-field xmlns:ui="http://www.teradata.com/ui" title="{$nativeReturn/*/@title}" id="{$nativeReturn/*/@id}" name="{$nativeReturn/*/@name}" displayText="{$nativeReturn/*/@displayText}" sortable="{$nativeReturn/*/@sortable}">
                                      <ui:url page="{$url}">
                                        <TO_XML SelectList="$completeColsTemp/*"/>
                                      </ui:url>
                                    </ui:link-field>
                                  </RESPONSE>
                                </TO_DOCVAR>
                                <SET Attribute="islinkExist" FromValue="added" DocVar="MapProp"/>
                              </THEN>
                            </IF_TEST>
                          </FOR_EACH>
                        </ELSE>
                      </IF_TEST>
                      <SET Var="foundLinkMatch" FromValue="true"/>
                      <SET Var="foundLinkPropMatch" FromValue="true"/>
                    </THEN>
                  </IF_TEST>
                </FOR_EACH>
              </FOR_EACH>
            </THEN>
            <ELSE>
              <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="generate" AssignToVar="nativeReturn">
                <PARAM Var="serchResultAttrib" Caption="serchResultAttrib"/>
              </NATIVE_FUNCTION>
            </ELSE>
          </IF_TEST>
          <FOR_EACH CurrentElement="uiElems" SelectList="$nativeReturn/*">
            <IF_TEST Test="$thisParam/container/@Value='search'">
              <THEN>
                <SET DocVar="uiElems" Attribute="align" FromValue="left"/>
                <IF_TEST Test="$uiElems/@codeSet != null and $lookupID/@codeSet != ''">
                  <THEN>
                    <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SELECT PARENT_CODE_SET.NAME FROM MST_CODE_SET CODE_SET,MST_CODE_SET PARENT_CODE_SET where  CODE_SET.PARENT_CODE_SET_ID=PARENT_CODE_SET.CODE_SET_ID AND  CODE_SET.NAME='{$uiElems/@codeSet}';" AssignToVar="parentCodeSet" ReturnRowCount="true"/>
                    <ADD_ATTRIBUTE DocVar="uiElems" Name="parentCodeSet" Value="{$parentCodeSet/*/NAME/@Value}"/>
                  </THEN>
                </IF_TEST>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$thisParam/container/@Value='result'">
              <THEN>
                <SET Var="ColorValue" FromValue="{$serchResultAttrib/cwSearchResultsConfigAttr[propName/@Value='ColorCode']/propValue/@Value}"/>
                <SET Var="styleValue" FromValue="{concat('#',$StatusColorCodes/CODE_MASTER_VALUE[VALUE_ID/@Value=$ColorValue]/DESCRIPTION/@Value)}"/>
                <SET Var="searchable" FromValue="{$serchResultAttrib/cwSearchResultsConfigAttr[propName/@Value='searchable']/propValue/@Value}"/>
                <SET Var="i18nizeVar" FromValue="{$serchResultAttrib/cwSearchResultsConfigAttr[propName/@Value='i18nize']/propValue/@Value}"/>
                <SET Var="noWrapVar" FromValue="{$serchResultAttrib/cwSearchResultsConfigAttr[propName/@Value='noWrap']/propValue/@Value}"/>
                <ADD_ATTRIBUTE DocVar="uiElems" Name="filter" Value="{$searchable}"/>
                <IF_TEST Test="lowerCase($currRoles/dataType/@Value) = 'string' or lowerCase($currRoles/dataType/@Value)='char'">
                  <THEN>
                    <ADD_ATTRIBUTE DocVar="uiElems" Name="unFormat" Value="true"/>
                  </THEN>
                </IF_TEST>
                <IF_TEST Test="$i18nizeVar='true'">
                  <THEN>
                    <ADD_ATTRIBUTE DocVar="uiElems" Name="unFormat" Value="false"/>
                  </THEN>
                </IF_TEST>
                <IF_TEST Test="$noWrapVar='false'">
                  <THEN>
                    <ADD_ATTRIBUTE DocVar="uiElems" Name="displayNoWrap" Value="false"/>
                  </THEN>
                </IF_TEST>
                <IF_TEST Test="strlen($styleValue)>1">
                  <THEN>
                    <ADD_ATTRIBUTE DocVar="uiElems" Name="style" Value="background-color:{$styleValue};"/>
                  </THEN>
                </IF_TEST>
                <IF_TEST Test="$thisParam/serviceNameVar/@Value='Audit'">
                  <THEN>
                    <SET Var="uiElemVar" FromValue="{strReplaceAll($uiElems/@id,'_AT.','.')}"/>
                    <IF_TEST Test="strlen($thisParam/LOOK_UP_DATA/*[name()=$uiElemVar]/name())!=0">
                      <THEN>
                        <ADD_ATTRIBUTE DocVar="uiElems" Name="filterType" Value="Dropdown"/>
                        <ADD_ATTRIBUTE DocVar="uiElems" Name="filterValuesSelect" Value="$root/LOOK_UP_DATA_FILTER/{$uiElemVar}/*"/>
                      </THEN>
                    </IF_TEST>
                  </THEN>
                  <ELSE>
                    <IF_TEST Test="strlen($thisParam/LOOK_UP_DATA/*[name()=$uiElems/@id]/name())!=0">
                      <THEN>
                        <ADD_ATTRIBUTE DocVar="uiElems" Name="filterType" Value="Dropdown"/>
                        <ADD_ATTRIBUTE DocVar="uiElems" Name="filterValuesSelect" Value="$root/LOOK_UP_DATA_FILTER/{$uiElems/@id}/*"/>
                      </THEN>
                    </IF_TEST>
                  </ELSE>
                </IF_TEST>
              </THEN>
            </IF_TEST>
            <SET Var="dataType" FromValue="{lowerCase($currRoles/dataType/@Value)}"/>
            <IF_TEST Test="$dataType='date'">
              <THEN>
                <SET Var="dataType" FromValue="Date"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$dataType='datetime' or $dataType='timestamp'">
              <THEN>
                <SET Var="dataType" FromValue="DateTime"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$dataType='perioddate'">
              <THEN>
                <SET Var="dataType" FromValue="PeriodDate"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$dataType='periodtimestamp6' or $dataType='periodtimestamp' or $dataType='periodtime'">
              <THEN>
                <SET Var="dataType" FromValue="PeriodTime"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$dataType='char' or $dataType='string'">
              <THEN>
                <SET Var="dataType" FromValue="Text"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$dataType='int' or $dataType='bigint'">
              <THEN>
                <ADD_ATTRIBUTE DocVar="uiElems" Name="onKeyUp" Value="javascript:nonDecimalInteger();"/>
                <SET Var="dataType" FromValue="Number"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$dataType='decimal'">
              <THEN>
                <ADD_ATTRIBUTE DocVar="uiElems" Name="onKeyUp" Value="javascript:onlyDecimal(this);"/>
                <SET Var="dataType" FromValue="Number"/>
                <IF_TEST Test="$cwSearchResultsTables/cwSearchResultsTables/serviceName/@Value != 'nonMDM'">
                  <THEN>
                    <SET Var="colName" FromValue="{substringAfter($attributeName/@Value,concat($thisParam/TABLE_DETAILS/RESPONSE/cwSearchResultsTables/tableName/@Value,'.'))}"/>
                    <SET Var="decimalPreciseValue" FromValue="{$DocPropertiesVar/DOCUMENT/PROPERTY[@Name=$colName]/PRESENTATION/DECIMALS/@Value}"/>
                    <IF_TEST Test="$decimalPreciseValue != null">
                      <THEN>
                        <ADD_ATTRIBUTE DocVar="uiElems" Name="decimals" Value="{$decimalPreciseValue}"/>
                      </THEN>
                    </IF_TEST>
                  </THEN>
                </IF_TEST>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$dataType='float'">
              <THEN>
                <ADD_ATTRIBUTE DocVar="uiElems" Name="onKeyUp" Value="javascript:onlyCurrency();"/>
                <SET Var="dataType" FromValue="float"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$dataType='boolean'">
              <THEN>
                <ADD_ATTRIBUTE DocVar="uiElems" Name="dataType" Value="{$dataType}"/>
                <ADD_ATTRIBUTE DocVar="uiElems" Name="filterType" Value="Dropdown"/>
                <ADD_ATTRIBUTE DocVar="uiElems" Name="filterValuesSelect" Value="$root/DATA/BOOLEAN_VALUE/*"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="strlen($currRoles/dataType/@Value)>0">
              <THEN>
                <ADD_ATTRIBUTE DocVar="uiElems" Name="dataType" Value="{$dataType}"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="((strlen($currRoles/maxLength/@Value)>0) and (starts-with($dataType,'Date')='false')) and $thisParam/container/@Value='search'">
              <THEN>
                <ADD_ATTRIBUTE DocVar="uiElems" Name="maxlength" Value="{$currRoles/maxLength/@Value}"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$dataType='file' and $thisParam/container/@Value='result'">
              <THEN>
                <SET Var="idValue" FromValue="{$uiElems/@id}"/>
                <SET Var="displayText" FromValue="{$uiElems/@displayText}"/>
                <SET Var="title" FromValue="{$uiElems/@title}"/>
                <TO_DOCVAR AssignToVar="nativeReturn">
                  <RESPONSE xmlns:ui="http://www.teradata.com/ui">
                    <ui:link-field xmlns:ui="http://www.teradata.com/ui" displayText="{$displayText}" title="{$title}" id="{$idValue}" name="{$idValue}" value="View" dataType="file">
                      <ui:url page="{concat($webuiContextPath,'/fileDownload')}">
                        <FILE_ID select="{$idValue}/@Value"/>
                      </ui:url>
                    </ui:link-field>
                  </RESPONSE>
                </TO_DOCVAR>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
          <APPEND_CHILDREN DocVar="searchAttribs" FromDocVar="nativeReturn"/>
        </FOR_EACH>
        <TO_DOCVAR AssignToVar="keyProperties">
          <ROOT/>
        </TO_DOCVAR>
        <FOR_EACH SelectList="$thisParam/rowId" CurrentElement="params">
          <SET Var="keyHiddenValues" FromValue="&lt;ui:display-field xmlns:ui='http://www.teradata.com/ui' displayText='{$params/@Value}' id='{$params/@Value}' name='{$params/@Value}' dataType='string' displayCondition='false'/>"/>
          <STRING_TO_XML DocVar="propXML" FromValue="{string($keyHiddenValues/@Value)}"/>
          <ADD_CHILDREN DocVar="keyProperties" FromVar="propXML"/>
        </FOR_EACH>
        <APPEND_CHILDREN DocVar="thisReturn" FromDocVar="keyProperties"/>
        <APPEND_CHILDREN DocVar="thisReturn" FromDocVar="searchAttribs"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="constructCreateEditPGL">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="sysColsToRemove">
          <ROOT>
            <SYSCOLS>
              <SYS_TARGET_ID Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_AUTH_ID Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_SOURCE Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_CREATED_BY Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_CREATION_DATE Value="true"/>
            </SYSCOLS>
            <!--<SYSCOLS>
              <SYS_ENT_STATE Value="true"/>
            </SYSCOLS>-->
            <SYSCOLS>
              <SYS_LAST_MODIFIED_BY Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_LAST_MODIFIED_DATE Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_NC_TYPE Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_ERR_CODE Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_ERR_SVRTY Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_WORKFLOW_ID Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_FILTER Value="true"/>
            </SYSCOLS>
            <SYSCOLS>
              <SYS_DOCUMENT Value="true"/>
            </SYSCOLS>
          </ROOT>
        </TO_DOCVAR>
        <SET Var="workflowId" FromValue="{$thisParam/workflowId/@Value}"/>
        <GET_DOCUMENT AssignToVar="cwSearchResultsTables" Name="cwSearchResultsTables" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <workflowId Value="{$workflowId}"/>
          <ORDER_BY>
            <tableRank Sort="Ascending"/>
          </ORDER_BY>
        </GET_DOCUMENT>
        <REQUEST Name="cwSearchResultsColumn" ServiceName="UI_WORKFLOW" HandleException="true" AssignToVar="cwSearchResultsColumns">
          <workflowId Value="{$workflowId}"/>
		  <container Value="create_edit"/>
        </REQUEST>
        <GET_DOCUMENT AssignToVar="cwSearchResultsConfigAttr" Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true" MaxRows="10000">
          <workflowId Value="{$workflowId}"/>
          <container Value="create_edit"/>
          <fieldType Value="column"/>
          <SELECT>
            <attributeName/>
            <propName/>
            <propValue/>
          </SELECT>
        </GET_DOCUMENT>
	        <SET Var="ConfUIName" FromValue="{substringBefore($cwSearchResultsConfigAttr/cwSearchResultsConfigAttr[1]/attributeName/@Value,'.')}"/>
        <FOR_EACH CurrentElement="curElement" SelectList="$cwSearchResultsConfigAttr/cwSearchResultsConfigAttr">
          <IF_TEST Test="$curElement/attributeName/@Value=concat($ConfUIName,'.ENTITY_STATE') and $curElement/propName/@Value='Editable'">
            <THEN>
              <SET_PROPS Select="$curElement">
                <propValue Value="true"/>
              </SET_PROPS>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <GET_DOCUMENT AssignToVar="cwSearchSurrogateConfigAttr" Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <workflowId Value="{$workflowId}"/>
          <container Value="result"/>
          <fieldType Value="table"/>
          <propName Value="SurrogateKey"/>
          <SELECT>
            <propName/>
            <attributeName/>
            <propValue/>
          </SELECT>
        </GET_DOCUMENT>
        <TO_DOCVAR AssignToVar="surrogateDetails">
          <SURROGATE_DETAIL/>
        </TO_DOCVAR>
        <IF_TEST Test="$thisParam/mode/@Value ='create'">
          <THEN>
            <FOR_EACH CurrentElement="currElement" SelectList="$cwSearchSurrogateConfigAttr/*">
              <TO_DOCVAR AssignToVar="currOptionsVar">
                <SURROGATE>
                  <TO_XML SelectList="$currElement/*"/>
                </SURROGATE>
              </TO_DOCVAR>
              <REQUEST Name="getUniqueId" ServiceName="BCM_MASTER" HandleException="true" AssignToVar="autoGenerateId">
                <DOCUMENT_NAME Value="{$currElement/propValue/@Value}"/>
              </REQUEST>
              <APPEND_CHILDREN ChildName="UNIQUE_ID" DocVar="currOptionsVar" FromDocVar="autoGenerateId"/>
              <ADD_CHILDREN DocVar="surrogateDetails" FromDocVar="currOptionsVar"/>
            </FOR_EACH>
          </THEN>
        </IF_TEST>
        <!--Monsanto-->
        <IF_TEST Test="$thisParam/VerId/@Value !=null and $thisParam/VerId/@Value != ''">
          <THEN>
            <SET Var="tabName" FromValue="{$cwSearchResultsTables/cwSearchResultsTables[tableRank/@Value = 1]/tableName/@Value}"/>
            <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SEL PHY_VER FROM SYS_TABLE_MAP WHERE LOG_NAME = '{$tabName}'" AssignToVar="verPhyVar"/>
            <SET Var="verPhyName" FromValue="{$verPhyVar/SQL_RESULT/PHY_VER/@Value}"/>
            <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SEL * FROM SYS_DB_MAP" AssignToVar="dbMap"/>
            <SET Var="coreDBName" FromValue="{$dbMap/SQL_RESULT[LOGICAL_DB/@Value = 'BCM_MASTER']/PHYSICAL_DB/@Value}"/>
            <SET Var="versionDBName" FromValue="{$dbMap/SQL_RESULT[LOGICAL_DB/@Value = 'BCM_VERSION_STAGING']/PHYSICAL_DB/@Value}"/>
            <TO_DOCVAR AssignToVar="currOptionsVar">
              <SURROGATE>
                <propName Value="SurrogateKey"/>
                <attributeName Value="{concat($versionDBName,'.',$verPhyName)}"/>
                <propValue Value="{$tabName}"/>
              </SURROGATE>
            </TO_DOCVAR>
            <REQUEST Name="getUniqueId" ServiceName="BCM_MASTER" HandleException="true" AssignToVar="autoGenerateId">
              <DOCUMENT_NAME Value="{$tabName}"/>
            </REQUEST>
            <APPEND_CHILDREN ChildName="UNIQUE_ID" DocVar="currOptionsVar" FromDocVar="autoGenerateId"/>
            <ADD_CHILDREN DocVar="surrogateDetails" FromDocVar="currOptionsVar"/>
          </THEN>
        </IF_TEST>
        <TO_DOCVAR AssignToVar="availableColumns">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="tableRow">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="lookUpTableData">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="lookUpTableExpData">
          <ROOT/>
        </TO_DOCVAR>
        <FOR_EACH CurrentElement="currTable" SelectList="$cwSearchResultsTables/cwSearchResultsTables">
          <SET Var="tabName" FromValue="{$currTable/tableName/@Value}"/>
          <SET Var="SRVC_NAME" FromValue="{$currTable/serviceName/@Value}"/>
          <SET Var="dbName" FromValue="{$currTable/dbName/@Value}"/>
          <SET Var="tabNamePhy" FromValue="{$currTable/tableNamePhy/@Value}"/>
          <IF_TEST Test="$SRVC_NAME!='nonMDM'">
            <THEN>
              <REQUEST Name="getValidValue" AssignToVar="validLookUpTableData">
                <tabName Value="{$tabName}"/>
                <SRVC_NAME Value="{$SRVC_NAME}"/>
              </REQUEST>
              <FOR_EACH CurrentElement="lookupColumns" SelectList="$validLookUpTableData/*">
                <SET DocVar="lookupColumns" Attribute="tabNamePhy" FromValue="{$tabNamePhy}"/>
              </FOR_EACH>
              <XML_TO_STRING DocVar="validLookUpString" FromVar="validLookUpTableData"/>
              <SET FromValue="{strReplaceAll($validLookUpString,'&lt;VALID_VALUE','&lt;OPTION')}" Var="validLookUpString"/>
              <SET FromValue="{strReplaceAll($validLookUpString,'Description=','Title=')}" Var="validLookUpString"/>
              <STRING_TO_XML DocVar="validLookUpTableData" FromValue="{$validLookUpString}"/>
              <ADD_CHILDREN DocVar="lookUpTableData" FromSelectList="$validLookUpTableData/*"/>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <FOR_EACH CurrentElement="currColumns" SelectList="$cwSearchResultsColumns/cwSearchResultsColumns">
          <IF_TEST Test="strlen($sysColsToRemove/SYSCOLS/*[name()=$currColumns/columnNamePhy/@Value]/@Value)!=0">
            <THEN>
              <CONTINUE/>
            </THEN>
          </IF_TEST>
          <SET Var="tabName" FromValue="{$currColumns/tableName/@Value}"/>
          <SET Var="dbName" FromValue="{$currColumns/dbName/@Value}"/>
          <SET Var="tabNamePhy" FromValue="{$currColumns/tableNamePhy/@Value}"/>
          <IF_TEST Test="$thisParam/ID/@Value != null">
            <THEN>
              <IF_TEST Test="contains($thisParam/ID/@Value,concat($dbName,'.',$tabNamePhy)) or $thisParam/joinMechanism/@Value='Document Links' or $thisParam/joinMechanism/@Value='No Link' or $thisParam/mode/@Value!=null">
                <THEN>
                  <SET Var="editableFlag" FromValue="true"/>
                </THEN>
                <ELSE>
                  <SET Var="editableFlag" FromValue="false"/>
                </ELSE>
              </IF_TEST>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="$thisParam/joinMechanism/@Value='Explicit Join' and $tabName!=$tabNamePhy">
            <THEN>
              <FOR_EACH CurrentElement="lookupColumns" SelectList="$lookUpTableData/*">
                <SET Var="lookUpColumnName" FromValue="{$lookupColumns/name()}"/>
                <SET Var="curColumnName" FromValue="{$tabName}.{$currColumns/columnName/@Value}"/>
                <SET Var="lookupTabNamePhy" FromValue="{$lookupColumns/@tabNamePhy}"/>
                <IF_TEST Test="$lookUpColumnName=$curColumnName and $lookupTabNamePhy=$tabNamePhy">
                  <THEN>
                    <SET Var="tempVar" FromValue="&lt;{$dbName}.{$tabNamePhy}.{$currColumns/columnNamePhy/@Value}/>"/>
                    <STRING_TO_XML DocVar="propXML" FromValue="{string($tempVar/@Value)}"/>
                    <ADD_CHILDREN DocVar="propXML" FromSelectList="$lookupColumns/*"/>
                    <ADD_CHILDREN DocVar="lookUpTableExpData" FromSelectList="$propXML"/>
                  </THEN>
                </IF_TEST>
              </FOR_EACH>
            </THEN>
          </IF_TEST>
          <TO_DOCVAR AssignToVar="columnProperties">
            <ROOT/>
          </TO_DOCVAR>
          <SET Var="colName" FromValue="{$currColumns/columnName/@Value}"/>
          <IF_TEST Test="$thisParam/joinMechanism/@Value='Explicit Join'">
            <THEN>
              <SET Var="colName" FromValue="{$currColumns/columnNamePhy/@Value}"/>
              <SET Var="tabName" FromValue="{$currColumns/dbName/@Value}.{$currColumns/tableNamePhy/@Value}"/>
            </THEN>
          </IF_TEST>
          <SET Var="dataType" FromValue="{$currColumns/dataType/@Value}"/>
          <SET Var="placeHolder" FromValue="text"/>
          <SET Var="maxLength" FromValue="{$currColumns/maxLength/@Value}"/>
          <SET Var="onKeyUp" FromValue=""/>
          <SET Var="editable" FromValue="true"/>
          <FOR_EACH CurrentElement="currAttr" SelectList="$cwSearchResultsConfigAttr/cwSearchResultsConfigAttr">
            <IF_TEST Test="$currAttr/attributeName/@Value=concat($currColumns/tableName/@Value,'.',$currColumns/columnName/@Value) or $currAttr/attributeName/@Value=concat($currColumns/dbName/@Value,'.',$currColumns/tableNamePhy/@Value,'.',$currColumns/columnNamePhy/@Value)">
              <THEN>
                <REQUEST Name="stringToXML" AssignToVar="xmlValue">
                  <tagName Value="{$currAttr/propName/@Value}"/>
                  <propValue Value="{$currAttr/propValue/@Value}"/>
                </REQUEST>
                <ADD_CHILDREN DocVar="columnProperties" FromSelectList="$xmlValue/*"/>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
          <IF_TEST Test="$columnProperties/PrimaryKey/@Value='yes' and $thisParam/mode/@Value='massUpdate'">
            <THEN>
              <CONTINUE/>
            </THEN>
          </IF_TEST>
          <SET Var="displayCondition" FromValue="true"/>
          <IF_TEST Test="$thisParam/mode/@Value!='massUpdate'">
            <THEN>
              <FOR_EACH CurrentElement="entryFields" SelectList="$availableColumns/*">
                <IF_TEST Test="$entryFields/@displayText=$columnProperties/displayName/@Value">
                  <THEN>
                    <SET Var="displayCondition" FromValue="false"/>
                    <SET Var="ext" FromValue="{ifElse($dataType='date','_DC',ifElse(lowerCase($dataType)='datetime' or lowerCase($dataType)='timestamp','_DT',''))}"/>
                    <TO_DOCVAR AssignToVar="temp">
                      <ui:hidden-field xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}{$ext}" name="{$tabName}.{$colName}{$ext}" title="{$columnProperties/hoverText/@Value}" dataType="{$dataType}" maxlength="{$maxLength}" required="{$required}" onKeyUp="{$onKeyUp}" value="{$entryFields/@id}{$ext}#dup#"/>
                    </TO_DOCVAR>
                    <ADD_CHILDREN DocVar="availableColumns" FromDocVar="temp"/>
                    <BREAK/>
                  </THEN>
                </IF_TEST>
              </FOR_EACH>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="$displayCondition='false'">
            <THEN>
              <CONTINUE/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="$columnProperties/Required/@Value='yes'">
            <THEN>
              <SET Var="required" FromValue="true"/>
            </THEN>
            <ELSE>
              <SET Var="required" FromValue="{$columnProperties/Required/@Value}"/>
            </ELSE>
          </IF_TEST>
          <IF_TEST Test="$columnProperties/Editable/@Value='yes'">
            <THEN>
              <SET Var="editable" FromValue="true"/>
            </THEN>
            <ELSE>
              <IF_TEST Test="contains($thisParam/ID/@Value,concat($tabName,'.',$columnProperties/displayName/@Value,'='))">
                <THEN>
                  <SET Var="editable" FromValue="false"/>
                </THEN>
                <ELSE>
                  <SET Var="editable" FromValue="{$columnProperties/Editable/@Value}"/>
                </ELSE>
              </IF_TEST>
            </ELSE>
          </IF_TEST>
          <IF_TEST Test="$editableFlag = 'false'">
            <THEN>
              <SET Var="editable" FromValue="false"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="lowerCase($dataType)='string' and $columnProperties/PrimaryKey/@Value='yes'">
            <THEN>
              <SET Var="onKeyUp" FromValue="javascript:checkSpecialChars(this);"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="lowerCase($dataType)='int' or lowerCase($dataType)='bigint'">
            <THEN>
              <SET Var="singleQuoteChar" FromValue="'"/>
              <SET Var="onKeyUp" FromValue="javascript:nonDecimalInteger();"/>
              <SET Var="onKeyUp" FromValue="{ifElse(lowerCase($dataType)='int',concat($onKeyUp,'checkMaxValue(this,',$singleQuoteChar,'int',$singleQuoteChar,');'),$onKeyUp)}"/>
              <SET Var="placeHolder" FromValue="number"/>
              <SET Var="dataType" FromValue=""/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="lowerCase($dataType)='decimal'">
            <THEN>
              <SET Var="dataType" FromValue="number"/>
              <SET Var="onKeyUp" FromValue="javascript:onlyDecimal(this);"/>
              <SET Var="placeHolder" FromValue="decimal"/>
              <IF_TEST Test="strlen(substringAfter($currColumns/maxLength/@Value,'#')) > 0">
                <THEN>
                  <SET Var="fieldDecimalPrecision" FromValue="{substringAfter($currColumns/maxLength/@Value,'#')}"/>
                </THEN>
                <ELSE>
                  <SET Var="fieldDecimalPrecision" FromValue="0"/>
                </ELSE>
              </IF_TEST>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="lowerCase($dataType)='float'">
            <THEN>
              <SET Var="dataType" FromValue=""/>
              <SET Var="onKeyUp" FromValue="javascript:onlyCurrency();"/>
              <SET Var="placeHolder" FromValue="float"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="lowerCase($dataType)='datetime' or lowerCase($dataType)='timestamp'">
            <THEN>
              <SET Var="dataType" FromValue="DateTime"/>
              <SET Var="placeHolder" FromValue="dateTime"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="lowerCase($dataType)='date'">
            <THEN>
              <SET Var="dataType" FromValue="Date"/>
              <SET Var="placeHolder" FromValue="date"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="lowerCase($dataType)='perioddate'">
            <THEN>
              <SET Var="dataType" FromValue="PeriodDate"/>
              <SET Var="placeHolder" FromValue="periodDate"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="lowerCase($dataType)='periodtimestamp6' or lowerCase($dataType)='periodtimestamp' or lowerCase($dataType)='periodtime'">
            <THEN>
              <SET Var="dataType" FromValue="PeriodTime"/>
              <SET Var="placeHolder" FromValue="periodTime"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="lowerCase($dataType)='st_geometry'">
            <THEN>
              <SET Var="placeHolder" FromValue="st_geometry"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="$thisParam/mode/@Value='create' and strlen($columnProperties/DefaultValue/@Value)>0">
            <THEN>
              <SET Var="defaultValue" FromValue="{$columnProperties/DefaultValue/@Value}"/>
            </THEN>
            <ELSE>
              <SET Var="defaultValue" FromValue=""/>
            </ELSE>
          </IF_TEST>
          <FOR_EACH CurrentElement="currSurrogateKey" SelectList="$surrogateDetails/*">
            <IF_TEST Test="$columnProperties/PrimaryKey/@Value='yes' and ($currSurrogateKey/attributeName/@Value=$tabName or $currSurrogateKey/propValue/@Value=$tabName)">
              <THEN>
                <!--Monsanto-->
                <IF_TEST Test="(($currColumns/columnName/@Value='verId'))">
                  <THEN>
                    <!--Connotes Version-->
                    <SET Var="defaultValue" FromValue="{$thisParam/VerId/@Value}"/>
                  </THEN>
                  <ELSE>
                    <!-- connotes version-->
                    <SET Var="defaultValue" FromValue="{$currSurrogateKey/UNIQUE_ID/@Value}"/>
                  </ELSE>
                </IF_TEST>
                <BREAK/>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
          <IF_TEST Test="$thisParam/mode/@Value='massUpdate'">
            <THEN>
              <SET Var="required" FromValue="false"/>
            </THEN>
          </IF_TEST>
          <GET_DOCUMENT AssignToVar="hideEditableClm" Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" DirtyRead="true" ReturnRowCount="true">
            <workflowId Value="{$workflowId}"/>
            <container Value="create_edit"/>
            <propName Value="hideNonEditableColumn"/>
            <SELECT>
              <propValue/>
            </SELECT>
          </GET_DOCUMENT>
          <IF_TEST Test="$hideEditableClm/*/propValue/@Value='true'">
            <THEN>
              <IF_TEST Test="$editable='false'">
                <THEN>
                  <SET Var="hideColumn" FromValue="false"/>
                </THEN>
                <ELSE>
                  <SET Var="hideColumn" FromValue="true"/>
                </ELSE>
              </IF_TEST>
            </THEN>
            <ELSE>
              <SET Var="hideColumn" FromValue="true"/>
            </ELSE>
          </IF_TEST>
          <IF_TEST Test="lowerCase($dataType)='boolean'">
            <THEN>
              <TO_DOCVAR AssignToVar="temp">
                <ui:dropdown xmlns:ui="http://www.teradata.com/ui" sort="true" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" name="{$tabName}.{$colName}" required="{$required}" selectOne="true" title="{$columnProperties/hoverText/@Value}" disabled="{$editable='false'}" defaultValue="{$defaultValue}" displayCondition="{$hideColumn/@Value}">
                  <ui:option value="true"/>
                  <ui:option value="false"/>
                </ui:dropdown>
              </TO_DOCVAR>
            </THEN>
            <ELSE>
              <SET Var="hideSurrogateColumn" FromValue="false"/>
              <IF_TEST Test="$columnProperties/PrimaryKey/@Value='yes'">
                <THEN>
                  <IF_TEST Test="$thisParam/mode/@Value='create'">
                    <THEN>
                      <SET Var="editable" FromValue="true"/>
                      <FOR_EACH CurrentElement="currSurrogateKey" SelectList="$surrogateDetails/*">
                        <IF_TEST Test="$currSurrogateKey/attributeName/@Value=$tabName or $currSurrogateKey/propValue/@Value=$tabName">
                          <THEN>
                            <SET Var="editable" FromValue="false"/>
                            <SET Var="hideSurrogateColumn" FromValue="true"/>
                            <BREAK/>
                          </THEN>
                          <ELSE>
                            <SET Var="editable" FromValue="true"/>
                            <SET Var="hideSurrogateColumn" FromValue="false"/>
                          </ELSE>
                        </IF_TEST>
                      </FOR_EACH>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$hideSurrogateColumn='true'">
                    <THEN>
                      <TO_DOCVAR AssignToVar="temp">
                        <ui:hidden-field xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" title="{$columnProperties/hoverText/@Value}" name="{$tabName}.{$colName}" dataType="{$dataType}" placeholder="{$placeHolder}" maxlength="{$maxLength}" required="{$required}" onKeyUp="{$onKeyUp}" disabled="{$editable='false'}" defaultValue="{$defaultValue}" value="{$defaultValue}" displayCondition="{$hideColumn/@Value}"/>
                      </TO_DOCVAR>
                    </THEN>
                    <ELSE>
                      <IF_TEST Test="strlen($columnProperties/IsValidValue/@Value)>0">
                        <THEN>
                          <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SELECT PARENT_CODE_SET.NAME FROM MST_CODE_SET CODE_SET,MST_CODE_SET PARENT_CODE_SET where  CODE_SET.PARENT_CODE_SET_ID=PARENT_CODE_SET.CODE_SET_ID AND  CODE_SET.NAME='{$columnProperties/IsValidValue/@Value}';" AssignToVar="parentCodeSet" ReturnRowCount="true"/>
                          <TO_DOCVAR AssignToVar="temp">
                            <ui:dropdown xmlns:ui="http://www.teradata.com/ui" sort="true" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" name="{$tabName}.{$colName}" title="{$columnProperties/hoverText/@Value}" required="{$required}" selectOne="true" optionSrc="$root/DATA/LOOKUP_DATA/{$tabName}.{$colName}/*" disabled="{$editable='false'}" defaultValue="{$defaultValue}" codeSet="{$columnProperties/IsValidValue/@Value}" parentCodeSet="{$parentCodeSet/*/NAME/@Value}">
                              <ui:links>
                                <ui:link>
                                  <ui:image src="/primary_key.gif" displayText="Primary Key"/>
                                </ui:link>
                              </ui:links>
                            </ui:dropdown>
                          </TO_DOCVAR>
                        </THEN>
                        <ELSE>
                          <IF_TEST Test="lowerCase($dataType/@Value) = 'string' or lowerCase($dataType/@Value)='char'">
                            <THEN>
                              <SET Var="unFormatValue" FromValue="true"/>
                            </THEN>
                            <ELSE>
                              <SET Var="unFormatValue" FromValue="false"/>
                            </ELSE>
                          </IF_TEST>
                          <IF_TEST Test="$dataType='DateTime' or $dataType='Date' or $dataType = 'PeriodTime' or $dataType = 'periodDate'">
                            <THEN>
                              <TO_DOCVAR AssignToVar="temp">
                                <ui:entry-field xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" title="{$columnProperties/hoverText/@Value}" name="{$tabName}.{$colName}" dataType="{$dataType}" placeholder="{$placeHolder}" maxlength="{$maxLength}" required="{$required}" onKeyUp="{$onKeyUp}" disabled="{$editable='false'}" defaultValue="{$defaultValue}">
                                  <ui:links>
                                    <ui:link>
                                      <ui:image src="/primary_key.gif" displayText="Primary Key"/>
                                    </ui:link>
                                  </ui:links>
                                </ui:entry-field>
                              </TO_DOCVAR>
                            </THEN>
                            <ELSE>
                              <IF_TEST Test="$dataType='Number'">
                                <THEN>
                                  <TO_DOCVAR AssignToVar="temp">
                                    <ui:entry-field xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" title="{$columnProperties/hoverText/@Value}" name="{$tabName}.{$colName}" dataType="{$dataType}" placeholder="{$placeHolder}" maxlength="{$maxLength}" required="{$required}" onKeyUp="{$onKeyUp}" disabled="{$editable='false'}" defaultValue="{$defaultValue}" unFormat="{$unFormatValue}" decimals="{$fieldDecimalPrecision}">
                                      <ui:links>
                                        <ui:link>
                                          <ui:image src="/primary_key.gif" displayText="Primary Key"/>
                                        </ui:link>
                                      </ui:links>
                                    </ui:entry-field>
                                  </TO_DOCVAR>
                                </THEN>
                                <ELSE>
                                  <TO_DOCVAR AssignToVar="temp">
                                    <ui:entry-field xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" title="{$columnProperties/hoverText/@Value}" name="{$tabName}.{$colName}" dataType="{$dataType}" placeholder="{$placeHolder}" maxlength="{$maxLength}" required="{$required}" onKeyUp="{$onKeyUp}" disabled="{$editable='false'}" defaultValue="{$defaultValue}" unFormat="{$unFormatValue}">
                                      <ui:links>
                                        <ui:link>
                                          <ui:image src="/primary_key.gif" displayText="Primary Key"/>
                                        </ui:link>
                                      </ui:links>
                                    </ui:entry-field>
                                  </TO_DOCVAR>
                                </ELSE>
                              </IF_TEST>
                            </ELSE>
                          </IF_TEST>
                        </ELSE>
                      </IF_TEST>
                    </ELSE>
                  </IF_TEST>
                  <!--- MDM-18186 Enable Copy button on config UI (auto generated/TE) to copy PK fields -->
                  <!--IF_TEST Test="$thisParam/copy/@Value='true' and $hideSurrogateColumn != 'true'">
                    <THEN>
                      <SET DocVar="temp" Attribute="value" FromValue=""/>
                    </THEN>
                  </IF_TEST-->
                  <SET Var="pkColumns" FromValue="{$colName}#{$pkColumns}"/>
                </THEN>
                <ELSE>
                  <IF_TEST Test="strlen($columnProperties/IsValidValue/@Value)>0">
                    <THEN>
                      <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SELECT PARENT_CODE_SET.NAME FROM MST_CODE_SET CODE_SET,MST_CODE_SET PARENT_CODE_SET where  CODE_SET.PARENT_CODE_SET_ID=PARENT_CODE_SET.CODE_SET_ID AND  CODE_SET.NAME='{$columnProperties/IsValidValue/@Value}';" AssignToVar="parentCodeSet" ReturnRowCount="true"/>
                      <TO_DOCVAR AssignToVar="temp">
                        <ui:dropdown xmlns:ui="http://www.teradata.com/ui" sort="true" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" name="{$tabName}.{$colName}" title="{$columnProperties/hoverText/@Value}" required="{$required}" selectOne="true" optionSrc="$root/DATA/LOOKUP_DATA/{$tabName}.{$colName}/*" disabled="{$editable='false'}" defaultValue="{$defaultValue}" codeSet="{$columnProperties/IsValidValue/@Value}" parentCodeSet="{$parentCodeSet/*/NAME/@Value}" displayCondition="{$hideColumn/@Value}"/>
                      </TO_DOCVAR>
                    </THEN>
                    <ELSE>
                      <IF_TEST Test="lowerCase($dataType)='file'">
                        <THEN>
                          <SET Var="singleQuoteChar" FromValue="'"/>
                          <IF_TEST Test="$thisParam/mode/@Value='create'">
                            <THEN>
                              <TO_DOCVAR AssignToVar="temp">
                                <ui:entry-field xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" name="{$tabName}.{$colName}" id="{$tabName}.{$colName}" value="" displayCondition="{$hideColumn/@Value}" dataType="{$dataType}">
                                </ui:entry-field>
                              </TO_DOCVAR>
                            </THEN>
                            <ELSE>
                              <TO_DOCVAR AssignToVar="temp">
                                <ui:display-field xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" name="{$tabName}.{$colName}" id="{$tabName}.{$colName}" value="" displayCondition="{$hideColumn/@Value}">
                                  <ui:links name="{$colName}">
                                    <ui:link id="{concat($colName,'_view')}" displayText="View">
                                      <ui:url page="{concat($webuiContextPath,'/fileDownload')}">
                                        <FILE_ID select="{concat($tabName,'.',$colName,'/@Value')}"/>
                                      </ui:url>
                                    </ui:link>
                                    <ui:link id="{concat($colName,'_modify')}" displayText="Modify" onClick="{concat('javascript:modifyFileContentForColumn(event,',$singleQuoteChar,$tabName,'.',$colName,$singleQuoteChar,')')}"/>
                                  </ui:links>
                                </ui:display-field>
                              </TO_DOCVAR>
                            </ELSE>
                          </IF_TEST>
                        </THEN>
                        <ELSE>
                          <IF_TEST Test="lowerCase($dataType/@Value) = 'string' or lowerCase($dataType/@Value)='char'">
                            <THEN>
                              <SET Var="unFormatValue" FromValue="true"/>
                            </THEN>
                            <ELSE>
                              <SET Var="unFormatValue" FromValue="false"/>
                            </ELSE>
                          </IF_TEST>
                          <IF_TEST Test="$dataType='DateTime' or $dataType ='Date' or $dataType = 'PeriodTime' or $dataType = 'PeriodDate'">
                            <THEN>
                              <TO_DOCVAR AssignToVar="temp">
                                <ui:entry-field xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" name="{$tabName}.{$colName}" title="{$columnProperties/hoverText/@Value}" dataType="{$dataType}" placeholder="{$placeHolder}" maxlength="{$maxLength}" required="{$required}" onKeyUp="{$onKeyUp}" disabled="{$editable='false'}" defaultValue="{$defaultValue}" displayCondition="{$hideColumn/@Value}"/>
                              </TO_DOCVAR>
                            </THEN>
                            <ELSE>
                              <IF_TEST Test="$dataType='Number'">
                                <THEN>
                                  <TO_DOCVAR AssignToVar="temp">
                                    <ui:entry-field xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" name="{$tabName}.{$colName}" title="{$columnProperties/hoverText/@Value}" dataType="{$dataType}" placeholder="{$placeHolder}" maxlength="{$maxLength}" required="{$required}" onKeyUp="{$onKeyUp}" disabled="{$editable='false'}" defaultValue="{$defaultValue}" displayCondition="{$hideColumn/@Value}" decimals="{$fieldDecimalPrecision}"/>
                                  </TO_DOCVAR>
                                </THEN>
                                <ELSE>
                                  <IF_TEST Test="$dataType='json'">
                                    <THEN>
                                      <TO_DOCVAR AssignToVar="temp">
                                        <ui:textarea xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" name="{$tabName}.{$colName}" title="{$columnProperties/hoverText/@Value}" dataType="{$dataType}" placeholder="{$placeHolder}" maxlength="{$maxLength}" required="{$required}" onKeyUp="{$onKeyUp}" disabled="{$editable='false'}" defaultValue="{$defaultValue}" unFormat="{$unFormatValue}" displayCondition="{$hideColumn/@Value}"/>
                                      </TO_DOCVAR>
                                    </THEN>
                                    <ELSE>
                                      <TO_DOCVAR AssignToVar="temp">
                                        <ui:entry-field xmlns:ui="http://www.teradata.com/ui" displayText="{$columnProperties/displayName/@Value}" id="{$tabName}.{$colName}" name="{$tabName}.{$colName}" title="{$columnProperties/hoverText/@Value}" dataType="{$dataType}" placeholder="{$placeHolder}" maxlength="{$maxLength}" required="{$required}" onKeyUp="{$onKeyUp}" disabled="{$editable='false'}" defaultValue="{$defaultValue}" unFormat="{$unFormatValue}" displayCondition="{$hideColumn/@Value}"/>
                                      </TO_DOCVAR>
                                    </ELSE>
                                  </IF_TEST>
                                </ELSE>
                              </IF_TEST>
                            </ELSE>
                          </IF_TEST>
                        </ELSE>
                      </IF_TEST>
                    </ELSE>
                  </IF_TEST>
                  <IF_TEST Test="$thisParam/copy/@Value='true' and $editable='false' and strlen($defaultValue)=0">
                    <THEN>
                      <SET DocVar="temp" Attribute="value" FromValue=""/>
                    </THEN>
                  </IF_TEST>
                </ELSE>
              </IF_TEST>
            </ELSE>
          </IF_TEST>
          <IF_TEST Test="$thisParam/mode/@Value='massUpdate'">
            <THEN>
              <TO_DOCVAR AssignToVar="checkBoxVal">
                <ui:checkbox xmlns:ui="http://www.teradata.com/ui" id="checkBox_-_{$tabName}.{$colName}_-_ter" name="checkBox_-_{$tabName}.{$colName}_-_ter" disabled="{$editable='false'}" displayCondition="{$hideColumn/@Value}"/>
              </TO_DOCVAR>
              <ADD_CHILDREN DocVar="availableColumns" FromDocVar="checkBoxVal"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="$thisParam/mode/@Value!='create' and $columnProperties/Editable/@Value='false'">
            <THEN/>
            <ELSE>
              <IF_TEST Test="strlen($columnProperties/Refers/@Value)!=0">
                <THEN>
                  <FOR_EACH CurrentElement="currTabVal" SelectList="$cwSearchResultsTables/cwSearchResultsTables">
                    <IF_TEST Test="$currTabVal/dbName/@Value=$currColumns/dbName/@Value and $currTabVal/tableName/@Value=$currColumns/tableName/@Value  and $currTabVal/tableNamePhy/@Value=$currColumns/tableNamePhy/@Value">
                      <THEN>
                        <BREAK/>
                      </THEN>
                    </IF_TEST>
                  </FOR_EACH>
                  <TO_DOCVAR AssignToVar="tempDocVar">
                    <ui:links xmlns:ui="http://www.teradata.com/ui">
                      <ui:link onClick="javascript:onRefTableClick('{$columnProperties/Refers/@Value}','{$columnProperties/ToProperty/@Value}','{$columnProperties/LinkName/@Value}','{$thisParam/joinMechanism/@Value}','{$tabName}','{$currTabVal/serviceName/@Value}','{$currTabVal/tableRank/@Value}',this)">
                        <ui:image src="/pop_up_window.gif" displayText="Primary Key"/>
                      </ui:link>
                    </ui:links>
                  </TO_DOCVAR>
                  <ADD_CHILDREN DocVar="temp" FromDocVar="tempDocVar"/>
                </THEN>
              </IF_TEST>
            </ELSE>
          </IF_TEST>
          <ADD_CHILDREN DocVar="availableColumns" FromDocVar="temp"/>
        </FOR_EACH>
        <APPEND_TO_XML Select="$thisReturn">
          <PGL>
            <TO_XML SelectList="$availableColumns"/>
          </PGL>
        </APPEND_TO_XML>
        <APPEND_TO_XML Select="$thisReturn">
          <DATA>
            <TO_XML SelectList="$lookUpTableData/*"/>
            <TO_XML SelectList="$lookUpTableExpData/*"/>
          </DATA>
        </APPEND_TO_XML>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getTableConfig">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="tableProperties">
          <ROOT/>
        </TO_DOCVAR>
        <GET_DOCUMENT AssignToVar="tableConfig" Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <!--<attributeName Value="resultTable"/>-->
          <container Value="result"/>
          <fieldType Value="table"/>
          <SELECT>
            <propName/>
            <propValue/>
          </SELECT>
          <ORDER_BY>
            <ATTRIBUTE_NAME Sort="Descending"/>
          </ORDER_BY>
        </GET_DOCUMENT>
        <FOR_EACH SelectList="$tableConfig/cwSearchResultsConfigAttr" CurrentElement="currElement">
          <REQUEST Name="stringToXML" AssignToVar="xmlValue">
            <tagName Value="{$currElement/propName/@Value}"/>
            <propValue Value="{$currElement/propValue/@Value}"/>
          </REQUEST>
          <ADD_CHILDREN DocVar="tableProperties" FromSelectList="$xmlValue/*"/>
        </FOR_EACH>
        <APPEND_CHILDREN DocVar="thisReturn" FromDocVar="tableProperties"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getTableData">
    <RULE>
      <ACTION>
        <REQUEST Name="getFilterExpressionSingleTable" ServiceName="UI_WORKFLOW" HandleException="true" AssignToVar="filExp">
          <TO_XML SelectList="$thisParam/*"/>
        </REQUEST>
        <TO_DOCVAR AssignToVar="tableData">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="selectData">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="tableProperties">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="filters">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="tableRowId">
          <ROOT/>
        </TO_DOCVAR>
        <FOR_EACH CurrentElement="SelectTag" SelectList="$thisParam/TEST/*">
          <ADD_CHILDREN DocVar="tableRowId" FromVar="SelectTag"/>
        </FOR_EACH>
        <GET_DOCUMENT AssignToVar="serchResultColums" Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <container Value="result"/>
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
        </GET_DOCUMENT>
        <FOR_EACH SelectList="$serchResultColums/cwSearchResultsColumns" CurrentElement="currElement">
          <SET Var="propName" FromValue="&lt;{$currElement/columnName/@Value}/>"/>
          <STRING_TO_XML DocVar="propXML" FromValue="{string($propName/@Value)}"/>
          <ADD_CHILDREN DocVar="selectData" FromVar="propXML"/>
        </FOR_EACH>
        <SET Var="tabName" FromValue="{$serchResultColums/cwSearchResultsColumns/tableName/@Value}"/>
        <FOR_EACH SelectList="$thisParam/PARAMS/*" CurrentElement="params">
          <IF_TEST Test="substringBefore($params/name(),'.')=$tabName ">
            <THEN>
              <!--<SET Var="propName" FromValue="&lt;{substringAfter($params,'.')}"/>
                  <SET Var="propName" FromValue="{string($params)}"/>
                  <STRING_TO_XML DocVar="propXML" FromValue="{string($propName/@Value)}"/>-->
              <IF_TEST Test="strlen(trim($params/@Value)) > 0 and $thisParam/actionButton/@Value='searchRecord'">
                <THEN>
                  <SET DocVar="params" Attribute="MatchBy" FromValue="CONTAINS"/>
                  <ADD_CHILDREN DocVar="tableProperties" FromVar="params"/>
                </THEN>
              </IF_TEST>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <FORM_SEARCH_FILTER Value="{$thisParam/PARAMS}" AssignToVar="tableProperties">
          <TO_XML SelectList="$tableProperties/*"/>
        </FORM_SEARCH_FILTER>
        <GET_DOCUMENT AssignToVar="serchColums" Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <container Value="search"/>
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
        </GET_DOCUMENT>
        <FOR_EACH SelectList="$tableProperties/*/*" CurrentElement="curr">
          <SET Var="filterName" FromValue="&lt;{substringAfter($curr,'.')}"/>
          <STRING_TO_XML DocVar="filterXML" FromValue="{string($filterName/@Value)}"/>
          <FOR_EACH SelectList="$serchColums/cwSearchResultsColumns" CurrentElement="currElement">
            <IF_TEST Test=" $currElement/dataType/@Value='periodDate' or $currElement/dataType/@Value='periodTimestamp' or $currElement/dataType/@Value ='periodTimestamp6'">
              <THEN>
                <SET Var="dbDotTableDotColumName" FromValue="{$tabName}.{$currElement/columnName/@Value}"/>
                <SET Var="columnPeriodStart" FromValue="{concat($currElement/columnName/@Value,'_PeriodStart')}"/>
                <SET Var="columnPeriodEnd" FromValue="{concat($currElement/columnName/@Value,'_PeriodEnd')}"/>
                <IF_TEST Test="$filterXML/name()=$columnPeriodStart/@Value and $filterXML/@Value != ''">
                  <THEN>
                    <REQUEST Name="createPeriodDataTimeDocVar" ServiceName="UI_WORKFLOW" AssignToVar="periodDoc">
                      <TO_XML SelectList="$thisParam/*"/>
                      <TABLE_DOT_COLUMN_NAME Value="{$dbDotTableDotColumName/@Value}"/>
                      <COLUMN_NAME Value="{$currElement/columnName/@Value}"/>
                    </REQUEST>
                    <ADD_CHILDREN DocVar="filters" FromSelectList="$periodDoc/*"/>
                    <SET DocVar="filterXML" FromValue=""/>
                  </THEN>
                  <ELSE>
                    <IF_TEST Test="$filterXML/name()=$columnPeriodEnd/@Value">
                      <THEN>
                        <SET DocVar="filterXML" FromValue=""/>
                      </THEN>
                    </IF_TEST>
                  </ELSE>
                </IF_TEST>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$currElement/columnName/@Value=$filterXML/name()">
              <THEN>
                <SET Var="dataType" FromValue="{lowerCase($currElement/dataType/@Value)}"/>
                <!--IF_TEST Test="$dataType='perioddate' or $dataType='periodtimestamp6' or $dataType='periodtimestamp'">
                  <THEN>
                    <REMOVE_ATTRIBUTE DocVar="filterXML" Name="MatchBy"/>
                    <ADD_ATTRIBUTE DocVar="filterXML" Name="MatchBy" Value="AS_ON"/>
                  </THEN>
                </IF_TEST-->
                <IF_TEST Test="$dataType='datetime'">
                  <THEN>
                    <REMOVE_ATTRIBUTE DocVar="filterXML" Name="MatchBy"/>
                    <ADD_ATTRIBUTE DocVar="filterXML" Name="MatchBy" Value="GREATER_EQUAL"/>
                    <!--LESS_EQUAL-->
                    <CLONE_XML AssignToVar="filterXML1" DocVar="filterXML"/>
                    <REMOVE_ATTRIBUTE DocVar="filterXML1" Name="MatchBy"/>
                    <ADD_ATTRIBUTE DocVar="filterXML1" Name="MatchBy" Value="LESS_EQUAL"/>
                    <SET Var="timeVal" FromValue="{subString($filterXML1/@Value,0,strlen($filterXML1/@Value)-2)}59"/>
                    <REMOVE_ATTRIBUTE DocVar="filterXML1" Name="Value"/>
                    <ADD_ATTRIBUTE DocVar="filterXML1" Name="Value" Value="{$timeVal}"/>
                    <ADD_CHILDREN DocVar="filters" FromVar="filterXML1"/>
                  </THEN>
                </IF_TEST>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
          <ADD_CHILDREN DocVar="filters" FromVar="filterXML"/>
        </FOR_EACH>
        <TO_DOCVAR AssignToVar="orderByXml">
          <ORDER_BY/>
        </TO_DOCVAR>
        <!-- For sorting -->
        <SET Var="defaultRowId" FromValue=""/>
        <SET Var="sortOrder" FromValue="{ifElse($thisParam/PARAMS/SORT_ORDER/@Value = null, 'Ascending', $thisParam/PARAMS/SORT_ORDER/@Value)}"/>
        <SET Var="sortBy" FromValue="{$thisParam/PARAMS/SORT_BY/@Value}"/>
        <IF_TEST Test="($sortBy = 'ID') or ($sortBy = 'null') or ($sortBy = '') or ($sortBy = null) ">
          <THEN>
            <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="curRowElem">
              <SET Var="sortBy" FromValue="{substringAfter($curRowElem/@Value,'.')}"/>
              <SET Var="sortOrder" FromValue="Ascending"/>
              <TO_DOCVAR AssignToVar="sortByColumn">
                <TEMP/>
              </TO_DOCVAR>
              <SET_NAME DocVar="sortByColumn" FromValue="{substringAfter($sortBy,'.')}"/>
              <SET Attribute="Sort" DocVar="sortByColumn" FromValue="{$sortOrder}"/>
              <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumn"/>
            </FOR_EACH>
          </THEN>
          <ELSE>
            <TO_DOCVAR AssignToVar="sortByColumn">
              <TEMP/>
            </TO_DOCVAR>
            <SET_NAME DocVar="sortByColumn" FromValue="{substringAfter($sortBy,'.')}"/>
            <SET Attribute="Sort" DocVar="sortByColumn" FromValue="{$sortOrder}"/>
            <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumn"/>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="$thisParam/PARAMS/MULTISORT_XML/@Value!=null and $thisParam/PARAMS/MULTISORT_XML/@Value!=''">
          <THEN>
            <TO_DOCVAR AssignToVar="orderByXml">
              <ORDER_BY/>
            </TO_DOCVAR>
            <STRING_TO_XML DocVar="orderByXmlTemp" FromValue="{string($thisParam/PARAMS/MULTISORT_XML/@Value)}"/>
            <FOR_EACH SelectList="$orderByXmlTemp/*" CurrentElement="curElem">
              <TO_DOCVAR AssignToVar="sortByColumnTemp">
                <TEMP/>
              </TO_DOCVAR>
              <SET_NAME DocVar="sortByColumnTemp" FromValue="{substringAfter($curElem/name(),'.')}"/>
              <SET Attribute="Sort" DocVar="sortByColumnTemp" FromValue="{$curElem/@Sort}"/>
              <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumnTemp"/>
            </FOR_EACH>
          </THEN>
        </IF_TEST>
        <!--              </THEN>
            </IF_TEST>-->
        <!-- For sorting -->
        <!-- For paginating -->
        <SET Var="paginateStart" FromValue="{int(ifElse($thisParam/PARAMS/START_COUNT/@Value = null, 0, $thisParam/PARAMS/START_COUNT/@Value))}"/>
        <!-- For paginating -->
        <IF_TEST Test="$thisParam/PARAMS/SRVC_NAME/@Value='BCM_MASTER' and starts-with($tabName,'error_')='false' or $thisParam/PARAMS/SRVC_NAME/@Value='BCM_VERSION_STAGING' or $thisParam/PARAMS/SRVC_NAME/@Value='BCM_OUTPUT_STAGING'">
          <THEN>
            <SET Var="entityStateFilter" FromValue="{$filExp/*/*/ENTITY_STATE/@Value}"/>
            <IF_TEST Test="($entityStateFilter = 'SELECT_ALL') or (ends-with($tabName/@Value,'AT')='true' and $entityStateFilter/@Value = null)">
              <THEN>
                <TO_DOCVAR AssignToVar="ENTITY_STATE">
                  <ROOT/>
                </TO_DOCVAR>
                <REMOVE_CHILDREN ChildName="ENTITY_STATE" SelectList="$filExp/*/*"/>
              </THEN>
              <ELSE>
                <IF_TEST Test="$entityStateFilter/@Value = null or $entityStateFilter/@Value = ''">
                  <THEN>
                    <TO_DOCVAR AssignToVar="ENTITY_STATE">
                      <ROOT>
                        <ENTITY_STATE Value="ACTIVE"/>
                      </ROOT>
                    </TO_DOCVAR>
                  </THEN>
                </IF_TEST>
              </ELSE>
            </IF_TEST>
          </THEN>
          <ELSE>
            <ELSE>
              <TO_DOCVAR AssignToVar="ENTITY_STATE">
                <ROOT/>
              </TO_DOCVAR>
            </ELSE>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="$thisParam/PARAMS/showHistory/@Value='true'">
          <THEN>
            <SET Var="GetTemporalHistory" FromValue="false"/>
          </THEN>
          <ELSE>
            <SET Var="GetTemporalHistory" FromValue="true"/>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="$thisParam/PARAMS/IsTemporalTable/@Value='false'">
          <THEN>
            <SET Var="GetTemporalHistory" FromValue="false"/>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="$thisParam/FILTER_DETAILS/@TotalRowCount='1'">
          <THEN>
            <IF_TEST Test="$thisParam/PARAMS/operation/@Value='AS_ON'">
              <THEN>
                <TO_DOCVAR AssignToVar="filExp">
                  <RESPONSE Status="Success">
                    <FILTERS>
                      <FILTER Name="{substringBefore($thisParam/PARAMS/displayFilterExp/@Value,'AS_ON')}">
                        <Temporal_Column Value="{substringBefore(trim(substringAfter($thisParam/PARAMS/displayFilterExp/@Value,'AS_ON')),'-_-')}" MatchBy="AS_ON"/>
                      </FILTER>
                    </FILTERS>
                  </RESPONSE>
                </TO_DOCVAR>
                <SET_NAME SelectList="$filExp/FILTERS/FILTER/*" FromValue="{trim(substringAfter($filExp/FILTERS/FILTER/@Name,'.'))}"/>
              </THEN>
              <ELSE>
                <TO_DOCVAR AssignToVar="adFilterExp">
                  <RESPONSE Status="Success">
                    <Advanced_Exp Value="{strReplaceAll($thisParam/FILTER_DETAILS/executable_Expression/@Value,'-_-',' ')}"/>
                  </RESPONSE>
                </TO_DOCVAR>
              </ELSE>
            </IF_TEST>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="strlen($adFilterExp/Advanced_Exp/@Value)!=0">
          <THEN/>
          <ELSE>
            <GET_DOCUMENT Name="cwAdvancedFilter" ServiceName="USER_SECURITY" AssignToVar="filRel" DirtyRead="true" ReturnRowCount="yes">
              <workflowId Value="{$thisParam/workflowId/@Value}"/>
              <sequence Value="-1"/>
            </GET_DOCUMENT>
            <IF_TEST Test="$filRel/@TotalRowCount!='0'">
              <THEN>
                <TO_DOCVAR AssignToVar="adFilterExp">
                  <RESPONSE Status="Success">
                    <Advanced_Exp Value="{strReplaceAll($filRel/cwAdvancedFilter/executable_Expression/@Value,'-_-',' ')}"/>
                  </RESPONSE>
                </TO_DOCVAR>
              </THEN>
            </IF_TEST>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="$thisParam/FILTER_DETAILS/@TotalRowCount='1'">
          <THEN>
            <IF_TEST Test="contains($thisParam/FILTER_DETAILS/display_Expression/@Value,'ENTITY_STATE') and $thisParam/actionButton/@Value!='searchRecord'">
              <THEN>
                <IF_TEST Test="$filExp/FILTERS/FILTER/ENTITY_STATE!=null">
                  <THEN>
                    <REMOVE_CHILDREN ChildName="ENTITY_STATE" SelectList="$filExp/FILTERS/FILTER"/>
                  </THEN>
                </IF_TEST>
              </THEN>
            </IF_TEST>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="$thisParam/PARAMS/ID/@Value != null and $thisParam/PARAMS/showHistory/@Value='false'">
          <THEN>
            <TO_DOCVAR AssignToVar="idValue">
              <OR/>
            </TO_DOCVAR>
            <FOR_EACH SelectList="$thisParam/PARAMS/ID" CurrentElement="curID">
              <IF_TEST Test="contains($curID/@Value,'#')">
                <THEN>
                  <IF_TEST Test="contains($curID/@Value,'#')">
                    <THEN>
                      <SET Var="tempRowId" FromValue="{strSplit($curID/@Value,'#')}"/>
                    </THEN>
                  </IF_TEST>
                  <TO_DOCVAR AssignToVar="rowIdAndXML">
                    <AND/>
                  </TO_DOCVAR>
                  <FOR_EACH SelectList="$tempRowId/*" CurrentElement="curElem">
                    <SET Var="temp" FromValue="{strSplit($curElem/@Value,'=')}"/>
                    <SET Var="ConfigDataType" FromValue="{$cwSearchResultsColumns/cwSearchResultsColumns[concat(dbName/@Value,'.',tableNamePhy/@Value,'.',columnNamePhy/@Value)=$temp/TOKEN[1]/@Value]/dataType/@Value}"/>
                    <SET Var="rowId" FromValue="&lt;{$temp/TOKEN[1]/@Value} Value= '{$temp/TOKEN[2]/@Value}'  DataType='{$ConfigDataType}'/>"/>
                    <STRING_TO_XML DocVar="tempRowIdXML" FromValue="{string($rowId/@Value)}"/>
                    <ADD_CHILDREN DocVar="rowIdAndXML" FromVar="tempRowIdXML"/>
                  </FOR_EACH>
                </THEN>
              </IF_TEST>
              <ADD_CHILDREN DocVar="idValue" FromVar="rowIdAndXML"/>
            </FOR_EACH>
            <XML_TO_STRING DocVar="idValueString" FromVar="idValue"/>
            <SET FromValue="{substringBefore($thisParam/PARAMS/ID[1]/@Value,'.')}\." Var="replaceString"/>
            <SET FromValue="{strReplaceAll($idValue,$replaceString,'')}" Var="idValueString"/>
            <STRING_TO_XML FromDocVar="idValueString" DocVar="idValue"/>
            <GET_DOCUMENT AssignToVar="dyanmicTableData" Name="{$serchResultColums/cwSearchResultsColumns/tableName/@Value}" GetTemporalHistory="{$GetTemporalHistory}" ServiceName="{$thisParam/PARAMS/SRVC_NAME/@Value}" MaxRows="{$thisParam/maxRows/@Value}" StartAtRow="{$paginateStart}" ReturnRowCount="true" DirtyRead="true" Prefix="p1" Expression="{$adFilterExp/Advanced_Exp/@Value}">
              <TO_XML SelectList="$ENTITY_STATE/*"/>
              <TO_XML SelectList="$filters/*"/>
              <TO_XML SelectList="$filExp/*/*/*"/>
              <TO_XML SelectList="$idValue"/>
              <TO_XML SelectList="$tableRowId/*"/>
              <ORDER_BY>
                <TO_XML SelectList="$orderByXml/*"/>
              </ORDER_BY>
            </GET_DOCUMENT>
          </THEN>
          <ELSE>
            <IF_TEST Test="$thisParam/PARAMS/HIERARCHY_ACTION/@Value = 'showChild'">
              <THEN>
                <IF_TEST Test="$thisParam/PARAMS/REL_ID/@Value != ''">
                  <THEN>
                    <SET Var="romId" FromValue="{$thisParam/PARAMS/REL_ID/@Value}"/>
                  </THEN>
                  <ELSE>
                    <SET Var="romId" FromValue="{$thisParam/PARAMS/ROM_ID/@Value}"/>
                  </ELSE>
                </IF_TEST>
                <EXECUTE_SQL_QUERY AssignToVar="tgtTable" Value="LOCKING ROW FOR ACCESS sel mst_tbl_phy_name from mst_relational_object where ro_id = ( sel tgt_tbl_ro_id from mst_rel_obj_map where rom_id = '{$romId/@Value}')" ReturnRowCount="yes"/>
                <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
                  <THEN>
                    <TO_DOCVAR AssignToVar="filterVersion">
                      <ROOT>
                        <verId Value="{$thisParam/PARAMS/VerId/@Value}"/>
                      </ROOT>
                    </TO_DOCVAR>
                    <SET Var="mstRltnTbl" FromValue="{$tgtTable/SQL_RESULT/MST_TBL_PHY_NAME/@Value}"/>
                    <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SEL PHY_VER FROM SYS_TABLE_MAP WHERE PHY_MST = '{$mstRltnTbl}'" AssignToVar="tgtVerRltnTbl"/>
                    <SET Var="verRltnTbl" FromValue="{$tgtVerRltnTbl/SQL_RESULT/PHY_VER/@Value}"/>
                    <SET Var="nodeId" FromValue="{trim(substringBefore(substringAfter($thisParam/PARAMS/ID/@Value,'NODE_ID='),'#'))}"/>
                    <EXECUTE_SQL_QUERY AssignToVar="childNodeId" Value="LOCKING ROW FOR ACCESS sel NODE_ID from {$verRltnTbl} where parent_node_id='{$nodeId}' AND sys_ver_id='{$thisParam/PARAMS/VerId/@Value}'" ReturnRowCount="yes"/>
                  </THEN>
                  <ELSE>
                    <EXECUTE_SQL_QUERY AssignToVar="childNodeId" Value="LOCKING ROW FOR ACCESS sel NODE_ID from {$tgtTable/SQL_RESULT/MST_TBL_PHY_NAME/@Value} where parent_node_id='{$thisParam/PARAMS/ID/@Value}'" ReturnRowCount="yes"/>
                  </ELSE>
                </IF_TEST>
                <TO_DOCVAR AssignToVar="NodeId">
                  <ROOT>
                    <TO_XML SelectList="$childNodeId/SQL_RESULT/NODE_ID"/>
                  </ROOT>
                </TO_DOCVAR>
                <DO_TRANSACTION>
                  <IF_TEST Test="$childNodeId/@TotalRowCount !=0 ">
                    <THEN>
                      <GET_DOCUMENT AssignToVar="dyanmicTableData" Name="{$serchResultColums/cwSearchResultsColumns/tableName/@Value}" GetTemporalHistory="{$GetTemporalHistory}" ServiceName="{$thisParam/PARAMS/SRVC_NAME/@Value}" MaxRows="{$thisParam/maxRows/@Value}" StartAtRow="{$paginateStart}" ReturnRowCount="true" DirtyRead="true" Prefix="p1" Expression="{$adFilterExp/Advanced_Exp/@Value}">
                        <OR>
                          <TO_XML SelectList="$NodeId/*"/>
                        </OR>
                        <TO_XML SelectList="$filterVersion/*"/>
                        <TO_XML SelectList="$tableRowId/*"/>
                        <TO_XML SelectList="$ENTITY_STATE/*"/>
                        <TO_XML SelectList="$filters/*"/>
                        <TO_XML SelectList="$filExp/*/*/*"/>
                        <ORDER_BY>
                          <TO_XML SelectList="$orderByXml/*"/>
                        </ORDER_BY>
                      </GET_DOCUMENT>
                    </THEN>
                  </IF_TEST>
                </DO_TRANSACTION>
              </THEN>
              <ELSE>
                <IF_TEST Test="$thisParam/PARAMS/HIERARCHY_ACTION/@Value = 'showSib'">
                  <THEN>
                    <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
                      <THEN>
                        <TO_DOCVAR AssignToVar="filterVersion">
                          <ROOT>
                            <verId Value="{$thisParam/PARAMS/VerId/@Value}"/>
                          </ROOT>
                        </TO_DOCVAR>
                      </THEN>
                    </IF_TEST>
                    <EXECUTE_SQL_QUERY AssignToVar="tgtTable" Value="sel mst_tbl_phy_name from mst_relational_object where ro_id = ( sel tgt_tbl_ro_id from mst_rel_obj_map where rom_id = '{$thisParam/PARAMS/ROM_ID/@Value}')" ReturnRowCount="yes"/>
                    <!--IF_TEST Test="$thisParam/PARAMS/ID/@Value = ''">
                      <THEN>
                        <GET_DOCUMENT AssignToVar="dyanmicTableData" Name="{$serchResultColums/cwSearchResultsColumns/tableName/@Value}" GetTemporalHistory="{$GetTemporalHistory}" ServiceName="{$thisParam/PARAMS/SRVC_NAME/@Value}" MaxRows="{$thisParam/maxRows/@Value}" StartAtRow="{$paginateStart}" ReturnRowCount="true" DirtyRead="true" Prefix="p1" Expression="{$adFilterExp/Advanced_Exp/@Value}">
                          <TO_XML SelectList="$ENTITY_STATE/*"/>
                          <TO_XML SelectList="$filterVersion/*"/>
                          <TO_XML SelectList="$filters/*"/>
                          <TO_XML SelectList="$filExp/*/*/*"/>
                          <ORDER_BY>
                            <TO_XML SelectList="$orderByXml/*"/>
                          </ORDER_BY>
                        </GET_DOCUMENT>
                      </THEN>
                      <ELSE-->
                    <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
                      <THEN>
                        <TO_DOCVAR AssignToVar="filterVersion">
                          <ROOT>
                            <verId Value="{$thisParam/PARAMS/VerId/@Value}"/>
                          </ROOT>
                        </TO_DOCVAR>
                        <SET Var="mstRltnTbl" FromValue="{$tgtTable/SQL_RESULT/MST_TBL_PHY_NAME/@Value}"/>
                        <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SEL PHY_VER FROM SYS_TABLE_MAP WHERE PHY_MST = '{$mstRltnTbl}'" AssignToVar="tgtVerRltnTbl"/>
                        <SET Var="verRltnTbl" FromValue="{$tgtVerRltnTbl/SQL_RESULT/PHY_VER/@Value}"/>
                        <SET Var="nodeId" FromValue="{trim(substringBefore(substringAfter($thisParam/PARAMS/ID/@Value,'NODE_ID='),'#'))}"/>
                        <EXECUTE_SQL_QUERY AssignToVar="childNodeId" Value="LOCKING ROW FOR ACCESS sel NODE_ID from {$verRltnTbl} where parent_node_id= (SELECT PARENT_NODE_ID FROM {$verRltnTbl} WHERE NODE_ID = '{$nodeId}' AND sys_ver_id='{$thisParam/PARAMS/VerId/@Value}') AND sys_ver_id='{$thisParam/PARAMS/VerId/@Value}'" ReturnRowCount="yes"/>
                      </THEN>
                      <ELSE>
                        <EXECUTE_SQL_QUERY AssignToVar="childNodeId" Value="LOCKING ROW FOR ACCESS sel NODE_ID from {$tgtTable/SQL_RESULT/MST_TBL_PHY_NAME/@Value} where parent_node_id= (SELECT PARENT_NODE_ID FROM {$tgtTable/SQL_RESULT/MST_TBL_PHY_NAME/@Value} WHERE NODE_ID = '{$thisParam/PARAMS/ID/@Value}')" ReturnRowCount="yes"/>
                      </ELSE>
                    </IF_TEST>
                    <TO_DOCVAR AssignToVar="NodeId">
                      <ROOT>
                        <TO_XML SelectList="$childNodeId/SQL_RESULT/NODE_ID"/>
                      </ROOT>
                    </TO_DOCVAR>
                    <DO_TRANSACTION>
                      <GET_DOCUMENT AssignToVar="dyanmicTableData" Name="{$serchResultColums/cwSearchResultsColumns/tableName/@Value}" GetTemporalHistory="{$GetTemporalHistory}" ServiceName="{$thisParam/PARAMS/SRVC_NAME/@Value}" MaxRows="{$thisParam/maxRows/@Value}" StartAtRow="{$paginateStart}" ReturnRowCount="true" DirtyRead="true" Prefix="p1" Expression="{$adFilterExp/Advanced_Exp/@Value}">
                        <OR>
                          <TO_XML SelectList="$NodeId/*"/>
                        </OR>
                        <TO_XML SelectList="$filterVersion/*"/>
                        <TO_XML SelectList="$ENTITY_STATE/*"/>
                        <TO_XML SelectList="$filterVersion/*"/>
                        <TO_XML SelectList="$filters/*"/>
                        <TO_XML SelectList="$filExp/*/*/*"/>
                        <ORDER_BY>
                          <TO_XML SelectList="$orderByXml/*"/>
                        </ORDER_BY>
                      </GET_DOCUMENT>
                    </DO_TRANSACTION>
                    <!--/ELSE>
                    </IF_TEST-->
                  </THEN>
                  <ELSE>
                    <IF_TEST Test="$thisParam/PARAMS/HIERARCHY_ACTION/@Value = 'showPeers'">
                      <THEN>
                        <EXECUTE_SQL_QUERY AssignToVar="tgtTable" Value="LOCKING ROW FOR ACCESS SELECT MST_TBL_PHY_NAME, VER_TBL_PHY_NAME FROM MST_RELATIONAL_OBJECT WHERE RO_ID = ( SEL TGT_TBL_RO_ID FROM MST_REL_OBJ_MAP WHERE ROM_ID = '{$thisParam/PARAMS/ROM_ID/@Value}')" ReturnRowCount="yes"/>
                        <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
                          <THEN>
                            <TO_DOCVAR AssignToVar="filterVersion">
                              <ROOT>
                                <verId Value="{$thisParam/PARAMS/VerId/@Value}"/>
                              </ROOT>
                            </TO_DOCVAR>
                            <SET Var="phyTableName" FromValue="{$tgtTable/SQL_RESULT/VER_TBL_PHY_NAME/@Value}"/>
                            <SET Var="verQuery" FromValue=" WHERE SYS_VER_ID = '{$thisParam/PARAMS/VerId/@Value}'"/>
                          </THEN>
                          <ELSE>
                            <SET Var="phyTableName" FromValue="{$tgtTable/SQL_RESULT/MST_TBL_PHY_NAME/@Value}"/>
                            <SET Var="verQuery" FromValue=""/>
                          </ELSE>
                        </IF_TEST>
                        <IF_TEST Test="$thisParam/PARAMS/H_ID/@Value != null">
                          <THEN>
                            <EXECUTE_SQL_QUERY AssignToVar="roLevel" Value="LOCKING ROW FOR ACCESS SELECT LVL FROM HIERARCHY_RO_LVL WHERE HIERARCHY_ID={$thisParam/PARAMS/H_ID/@Value} AND RO_ID={$thisParam/PARAMS/RO_ID/@Value}"/>
                            <IF_TEST Test="$roLevel/SQL_RESULT/LVL/@Value = '1'">
                              <THEN>
                                <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SELECT DISTINCT PARENT_NODE_ID FROM {$phyTableName} {$verQuery}" AssignToVar="nodeIds"/>
                              </THEN>
                              <ELSE>
                                <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SELECT DISTINCT NODE_ID FROM {$phyTableName} {$verQuery}" AssignToVar="nodeIds"/>
                              </ELSE>
                            </IF_TEST>
                          </THEN>
                          <ELSE>
                            <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SELECT DISTINCT NODE_ID FROM {$phyTableName} {$verQuery}" AssignToVar="nodeIds"/>
                          </ELSE>
                        </IF_TEST>
                        <TO_DOCVAR AssignToVar="NodeId">
                          <NODE_IDS/>
                        </TO_DOCVAR>
                        <FOR_EACH CurrentElement="currElem" SelectList="$nodeIds/*">
                          <TO_DOCVAR AssignToVar="currOptionVar">
                            <NODE_ID Value="{$currElem/*/@Value}"/>
                          </TO_DOCVAR>
                          <ADD_CHILDREN DocVar="NodeId" FromDocVar="currOptionVar"/>
                        </FOR_EACH>
                        <DO_TRANSACTION>
                          <GET_DOCUMENT AssignToVar="dyanmicTableData" Name="{$serchResultColums/cwSearchResultsColumns/tableName/@Value}" GetTemporalHistory="{$GetTemporalHistory}" ServiceName="{$thisParam/PARAMS/SRVC_NAME/@Value}" MaxRows="{$thisParam/maxRows/@Value}" StartAtRow="{$paginateStart}" ReturnRowCount="true" DirtyRead="true" Prefix="p1" Expression="{$adFilterExp/Advanced_Exp/@Value}">
                            <OR>
                              <TO_XML SelectList="$NodeId/*"/>
                            </OR>
                            <TO_XML SelectList="$filterVersion/*"/>
                            <TO_XML SelectList="$ENTITY_STATE/*"/>
                            <TO_XML SelectList="$filters/*"/>
                            <TO_XML SelectList="$filExp/*/*/*"/>
                            <TO_XML SelectList="$tableRowId/*"/>
                            <ORDER_BY>
                              <TO_XML SelectList="$orderByXml/*"/>
                            </ORDER_BY>
                          </GET_DOCUMENT>
                        </DO_TRANSACTION>
                      </THEN>
                      <ELSE>
                        <DO_TRANSACTION>
                          <GET_DOCUMENT AssignToVar="dyanmicTableData" Name="{$serchResultColums/cwSearchResultsColumns/tableName/@Value}" GetTemporalHistory="{$GetTemporalHistory}" ServiceName="{$thisParam/PARAMS/SRVC_NAME/@Value}" MaxRows="{$thisParam/maxRows/@Value}" StartAtRow="{$paginateStart}" ReturnRowCount="true" DirtyRead="true" Prefix="p1" Expression="{$adFilterExp/Advanced_Exp/@Value}">
                            <TO_XML SelectList="$ENTITY_STATE/*"/>
                            <TO_XML SelectList="$filters/*"/>
                            <TO_XML SelectList="$filExp/*/*/*"/>
                            <TO_XML SelectList="$tableRowId/*"/>
                            <ORDER_BY>
                              <TO_XML SelectList="$orderByXml/*"/>
                            </ORDER_BY>
                          </GET_DOCUMENT>
                        </DO_TRANSACTION>
                      </ELSE>
                    </IF_TEST>
                  </ELSE>
                </IF_TEST>
              </ELSE>
            </IF_TEST>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="$thisParam/PARAMS/SRVC_NAME/@Value ='BCM_MASTER' and (starts-with($serchResultColums/cwSearchResultsColumns[1]/tableName/@Value,'error_')='true')">
          <THEN>
            <REQUEST Name="changeGetDocDateFormat" ServiceName="E2E" AssignToVar="dyanmicTableData">
              <TO_XML SelectList="$dyanmicTableData"/>
            </REQUEST>
          </THEN>
        </IF_TEST>
        <FOR_EACH SelectList="$dyanmicTableData/*" CurrentElement="curElem">
          <TO_DOCVAR AssignToVar="tableRow">
            <ROOT/>
          </TO_DOCVAR>
          <FOR_EACH SelectList="$curElem/*" CurrentElement="props">
            <REQUEST Name="stringToXML" AssignToVar="xmlValue">
              <tagName Value="{concat($curElem/name(),'.',$props/name())}"/>
              <propValue Value="{$props/@Value}"/>
            </REQUEST>
            <ADD_CHILDREN DocVar="tableRow" FromSelectList="$xmlValue/*"/>
          </FOR_EACH>
          <ADD_CHILDREN DocVar="tableData" FromVar="tableRow"/>
        </FOR_EACH>
        <APPEND_CHILDREN DocVar="thisReturn" FromDocVar="tableData"/>
        <!-- For paginating -->
        <SET DocVar="thisReturn" Attribute="StartRowCount" FromValue="{$paginateStart}"/>
        <SET DocVar="thisReturn" Attribute="TotalRowCount" FromValue="{$dyanmicTableData/@TotalRowCount}"/>
        <!-- For paginating -->
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getEditTableData">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="tableData">
          <ROOT/>
        </TO_DOCVAR>
        <!-- For sorting -->
        <TO_DOCVAR AssignToVar="orderByXml">
          <ORDER_BY/>
        </TO_DOCVAR>
        <SET Var="defaultRowId" FromValue=""/>
        <SET Var="sortOrder" FromValue="{ifElse($thisParam/PARAMS/SORT_ORDER/@Value = null, 'Ascending', $thisParam/PARAMS/SORT_ORDER/@Value)}"/>
        <SET Var="sortBy" FromValue="{$thisParam/PARAMS/SORT_BY/@Value}"/>
        <IF_TEST Test="($sortBy = 'ID') or ($sortBy = 'null') or ($sortBy = '') or ($sortBy = null) ">
          <THEN>
            <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="curRowElem">
              <SET Var="sortBy" FromValue="{substringAfter($curRowElem/@Value,'.')}"/>
              <SET Var="sortOrder" FromValue="Ascending"/>
              <TO_DOCVAR AssignToVar="sortByColumn">
                <TEMP/>
              </TO_DOCVAR>
              <SET_NAME DocVar="sortByColumn" FromValue="{substringAfter($sortBy,'.')}"/>
              <SET Attribute="Sort" DocVar="sortByColumn" FromValue="{$sortOrder}"/>
              <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumn"/>
            </FOR_EACH>
          </THEN>
          <ELSE>
            <TO_DOCVAR AssignToVar="sortByColumn">
              <TEMP/>
            </TO_DOCVAR>
            <SET_NAME DocVar="sortByColumn" FromValue="{substringAfter($sortBy,'.')}"/>
            <SET Attribute="Sort" DocVar="sortByColumn" FromValue="{$sortOrder}"/>
            <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumn"/>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="$thisParam/PARAMS/MULTISORT_XML/@Value!=null and $thisParam/PARAMS/MULTISORT_XML/@Value!=''">
          <THEN>
            <TO_DOCVAR AssignToVar="orderByXml">
              <ORDER_BY/>
            </TO_DOCVAR>
            <STRING_TO_XML DocVar="orderByXmlTemp" FromValue="{string($thisParam/PARAMS/MULTISORT_XML/@Value)}"/>
            <FOR_EACH SelectList="$orderByXmlTemp/*" CurrentElement="curElem">
              <TO_DOCVAR AssignToVar="sortByColumnTemp">
                <TEMP/>
              </TO_DOCVAR>
              <SET_NAME DocVar="sortByColumnTemp" FromValue="{substringAfter($curElem/name(),'.')}"/>
              <SET Attribute="Sort" DocVar="sortByColumnTemp" FromValue="{$curElem/@Sort}"/>
              <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumnTemp"/>
            </FOR_EACH>
          </THEN>
        </IF_TEST>
        <!--              </THEN>
        </IF_TEST>-->
        <!-- For sorting -->
        <TO_DOCVAR AssignToVar="idValue">
          <TO_XML SelectList="$thisParam/ID/*"/>
        </TO_DOCVAR>
        <XML_TO_STRING DocVar="idValueString" FromVar="idValue"/>
        <SET FromValue="{$thisParam/PARAMS/tableName/@Value}\." Var="replaceString"/>
        <SET FromValue="{strReplaceAll($idValueString,$replaceString,'')}" Var="idValueString"/>
        <STRING_TO_XML FromDocVar="idValueString" DocVar="idValue"/>
        <GET_DOCUMENT AssignToVar="dyanmicTableData" Name="{$thisParam/PARAMS/tableName/@Value}" ServiceName="{$thisParam/PARAMS/SRVC_NAME/@Value}" DirtyRead="true">
          <TO_XML SelectList="$idValue"/>
          <ORDER_BY>
            <TO_XML SelectList="$orderByXml/*"/>
          </ORDER_BY>
        </GET_DOCUMENT>
        <IF_TEST Test="$thisParam/PARAMS/SRVC_NAME/@Value ='BCM_MASTER' and (starts-with($thisParam/PARAMS/tableName/@Value,'error_')='true')">
          <THEN>
            <REQUEST Name="changeGetDocDateFormat" ServiceName="E2E" AssignToVar="dyanmicTableData">
              <TO_XML SelectList="$dyanmicTableData"/>
            </REQUEST>
          </THEN>
        </IF_TEST>
        <FOR_EACH SelectList="$dyanmicTableData/*" CurrentElement="curElem">
          <TO_DOCVAR AssignToVar="tableRow">
            <ROOT/>
          </TO_DOCVAR>
          <FOR_EACH SelectList="$curElem/*" CurrentElement="props">
            <REQUEST Name="stringToXML" AssignToVar="xmlValue">
              <tagName Value="{concat($curElem/name(),'.',$props/name())}"/>
              <propValue Value="{$props/@Value}"/>
            </REQUEST>
            <ADD_CHILDREN DocVar="tableRow" FromSelectList="$xmlValue/*"/>
          </FOR_EACH>
          <ADD_CHILDREN DocVar="tableData" FromVar="tableRow"/>
        </FOR_EACH>
        <APPEND_CHILDREN DocVar="thisReturn" FromDocVar="tableData"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getMultipleTableData">
    <RULE>
      <ACTION>
        <REQUEST Name="getFilterExpressionMultipleTable" ServiceName="UI_WORKFLOW" HandleException="true" AssignToVar="filExp">
          <TO_XML SelectList="$thisParam/*"/>
        </REQUEST>
        <TO_DOCVAR AssignToVar="tableData">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="tableProperties">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="colAliasRel">
          <ROOT/>
        </TO_DOCVAR>
        <SET Var="col" FromValue="0"/>
        <TO_DOCVAR AssignToVar="filters">
          <ROOT/>
        </TO_DOCVAR>
        <IF_TEST Test="$thisParam/FILTER_DETAILS/@TotalRowCount='1'">
          <THEN>
            <TO_DOCVAR AssignToVar="adFilterExp">
              <RESPONSE Status="Success">
                <Advanced_Exp Value="{strReplaceAll($thisParam/FILTER_DETAILS/executable_Expression/@Value,'-_-',' ')}"/>
              </RESPONSE>
            </TO_DOCVAR>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="strlen($adFilterExp/Advanced_Exp/@Value)!=0">
          <THEN/>
          <ELSE>
            <GET_DOCUMENT Name="cwAdvancedFilter" ServiceName="USER_SECURITY" AssignToVar="filRel" DirtyRead="true" ReturnRowCount="yes">
              <workflowId Value="{$thisParam/workflowId/@Value}"/>
              <sequence Value="-1"/>
            </GET_DOCUMENT>
            <IF_TEST Test="$filRel/@TotalRowCount!='0'">
              <THEN>
                <TO_DOCVAR AssignToVar="adFilterExp">
                  <RESPONSE Status="Success">
                    <Advanced_Exp Value="{strReplaceAll($filRel/cwAdvancedFilter/executable_Expression/@Value,'-_-',' ')}"/>
                  </RESPONSE>
                </TO_DOCVAR>
              </THEN>
            </IF_TEST>
          </ELSE>
        </IF_TEST>
        <SET Var="parentTabName" FromValue="{$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/cwSearchResultsTables[1]/tableName/@Value}"/>
        <SET Var="parentSRVC_NAME" FromValue="{$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/cwSearchResultsTables[1]/serviceName/@Value}"/>
        <IF_TEST Test="$parentSRVC_NAME='BCM_MASTER' and starts-with($parentTabName,'error_')='false'">
          <THEN>
            <TO_DOCVAR AssignToVar="ENTITY_STATE">
              <ROOT>
                <ENTITY_STATE Value="ACTIVE"/>
              </ROOT>
            </TO_DOCVAR>
          </THEN>
          <ELSE>
            <TO_DOCVAR AssignToVar="ENTITY_STATE">
              <ROOT/>
            </TO_DOCVAR>
          </ELSE>
        </IF_TEST>
        <FOR_EACH SelectList="$thisParam/PARAMS/*" CurrentElement="params">
          <SET Var="before" FromValue="{substringBefore($params/name(),'.')}"/>
          <SET Var="after" FromValue="{substringAfter($params/name(),'.')}"/>
          <SET Var="tagExist" FromValue="{$thisParam/PARAMS/*[name()=concat($before,'.',$after)]/@Value}"/>
          <IF_TEST Test="(strlen(trim($params/@Value)) > 0) and ( ($before!=$after) or strlen($tagExist)!=0 ) and $thisParam/actionButton/@Value ='searchRecord'">
            <THEN>
              <SET DocVar="params" Attribute="MatchBy" FromValue="CONTAINS"/>
              <ADD_CHILDREN DocVar="tableProperties" FromVar="params"/>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <FORM_SEARCH_FILTER Value="{$thisParam/PARAMS}" AssignToVar="tableProperties">
          <TO_XML SelectList="$tableProperties/*"/>
        </FORM_SEARCH_FILTER>
        <GET_DOCUMENT AssignToVar="serchColums" Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <container Value="create_edit"/>
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
        </GET_DOCUMENT>
        <FOR_EACH SelectList="$tableProperties/*/*" CurrentElement="curr">
          <IF_TEST Test="substringBefore($curr/name(),'.')=$parentTabName">
            <THEN>
              <SET Var="filterName" FromValue="&lt;{substringAfter($curr,'.')}"/>
              <STRING_TO_XML DocVar="filterXML" FromValue="{string($filterName/@Value)}"/>
              <FOR_EACH SelectList="$serchColums/cwSearchResultsColumns" CurrentElement="currElement">
                <IF_TEST Test="$currElement/columnName/@Value=$filterXML/name()">
                  <THEN>
                    <SET Var="dataType" FromValue="{lowerCase($currElement/dataType/@Value)}"/>
                    <IF_TEST Test="$dataType='perioddate' or $dataType='periodtimestamp6' or $dataType='periodtimestamp'">
                      <THEN>
                        <REMOVE_ATTRIBUTE DocVar="filterXML" Name="MatchBy"/>
                        <ADD_ATTRIBUTE DocVar="filterXML" Name="MatchBy" Value="AS_ON"/>
                      </THEN>
                    </IF_TEST>
                    <IF_TEST Test="$dataType='datetime'">
                      <THEN>
                        <REMOVE_ATTRIBUTE DocVar="filterXML" Name="MatchBy"/>
                        <ADD_ATTRIBUTE DocVar="filterXML" Name="MatchBy" Value="GREATER_EQUAL"/>
                        <!--LESS_EQUAL-->
                        <CLONE_XML AssignToVar="filterXML1" DocVar="filterXML"/>
                        <REMOVE_ATTRIBUTE DocVar="filterXML1" Name="MatchBy"/>
                        <ADD_ATTRIBUTE DocVar="filterXML1" Name="MatchBy" Value="LESS_EQUAL"/>
                        <SET Var="timeVal" FromValue="{subString($filterXML1/@Value,0,strlen($filterXML1/@Value)-2)}59"/>
                        <REMOVE_ATTRIBUTE DocVar="filterXML1" Name="Value"/>
                        <ADD_ATTRIBUTE DocVar="filterXML1" Name="Value" Value="{$timeVal}"/>
                        <ADD_CHILDREN DocVar="filters" FromVar="filterXML1"/>
                      </THEN>
                    </IF_TEST>
                  </THEN>
                </IF_TEST>
              </FOR_EACH>
              <ADD_CHILDREN DocVar="filters" FromVar="filterXML"/>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <!-- For sorting -->
        <TO_DOCVAR AssignToVar="orderByXml">
          <ORDER_BY/>
        </TO_DOCVAR>
        <SET Var="defaultRowId" FromValue=""/>
        <SET Var="sortOrder" FromValue="{ifElse($thisParam/PARAMS/SORT_ORDER/@Value = null, 'Ascending', $thisParam/PARAMS/SORT_ORDER/@Value)}"/>
        <SET Var="sortBy" FromValue="{$thisParam/PARAMS/SORT_BY/@Value}"/>
        <IF_TEST Test="($sortBy = 'ID') or ($sortBy = 'null') or ($sortBy = '') or ($sortBy = null) ">
          <THEN>
            <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="curRowElem">
              <SET Var="sortBy" FromValue="{substringAfter($curRowElem/@Value,'.')}"/>
              <SET Var="sortOrder" FromValue="Ascending"/>
              <TO_DOCVAR AssignToVar="sortByColumn">
                <TEMP/>
              </TO_DOCVAR>
              <SET_NAME DocVar="sortByColumn" FromValue="{substringAfter($sortBy,'.')}"/>
              <SET Attribute="Sort" DocVar="sortByColumn" FromValue="{$sortOrder}"/>
              <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumn"/>
            </FOR_EACH>
          </THEN>
          <ELSE>
            <TO_DOCVAR AssignToVar="sortByColumn">
              <TEMP/>
            </TO_DOCVAR>
            <SET_NAME DocVar="sortByColumn" FromValue="{substringAfter($sortBy,'.')}"/>
            <SET Attribute="Sort" DocVar="sortByColumn" FromValue="{$sortOrder}"/>
            <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumn"/>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="$thisParam/PARAMS/MULTISORT_XML/@Value!=null and $thisParam/PARAMS/MULTISORT_XML/@Value!=''">
          <THEN>
            <TO_DOCVAR AssignToVar="orderByXml">
              <ORDER_BY/>
            </TO_DOCVAR>
            <STRING_TO_XML DocVar="orderByXmlTemp" FromValue="{string($thisParam/PARAMS/MULTISORT_XML/@Value)}"/>
            <FOR_EACH SelectList="$orderByXmlTemp/*" CurrentElement="curElem">
              <TO_DOCVAR AssignToVar="sortByColumnTemp">
                <TEMP/>
              </TO_DOCVAR>
              <SET_NAME DocVar="sortByColumnTemp" FromValue="{substringAfter($curElem/name(),'.')}"/>
              <SET Attribute="Sort" DocVar="sortByColumnTemp" FromValue="{$curElem/@Sort}"/>
              <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumnTemp"/>
            </FOR_EACH>
          </THEN>
        </IF_TEST>
        <!--              </THEN>
        </IF_TEST>-->
        <!-- For sorting -->
        <!-- For paginating -->
        <SET Var="paginateStart" FromValue="{int(ifElse($thisParam/PARAMS/START_COUNT/@Value = null, 0, $thisParam/PARAMS/START_COUNT/@Value))}"/>
        <!-- For paginating -->
        <!--Links involved-->
        <GET_LINKS ServiceName="{$parentSRVC_NAME}" AssignToVar="getLinks">
          <TABLE_NAME Value="{$parentTabName}"/>
        </GET_LINKS>
        <!--Links involved-->
        <TO_DOCVAR AssignToVar="query_doc_links">
          <ROOT/>
        </TO_DOCVAR>
        <!--logic-->
        <SET Var="T" FromValue="0"/>
        <GET_DOCUMENT AssignToVar="resultColums" Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <container Value="create_edit"/>
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
        </GET_DOCUMENT>
        <TO_DOCVAR AssignToVar="parentSelectValue">
          <SELECT/>
        </TO_DOCVAR>
        <FOR_EACH SelectList="$resultColums/*" CurrentElement="colName">
          <IF_TEST Test="($colName/tableName/@Value=$parentTabName)">
            <THEN>
              <SET Var="col" FromValue="{int(sum($col+1))}"/>
              <TO_DOCVAR AssignToVar="colTemp">
                <Column Value="{concat('T_',$T,'_ter_',$col)}" NewValue="{$colName/tableName/@Value}.{$colName/columnNamePhy/@Value}"/>
              </TO_DOCVAR>
              <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
              <SET Var="columnNameString" FromValue="&lt;{$colName/columnName/@Value} Alias='{$colTemp/@Value}'/>"/>
              <STRING_TO_XML DocVar="columnNameXML" FromValue="{string($columnNameString/@Value)}"/>
              <ADD_CHILDREN DocVar="parentSelectValue" FromVar="columnNameXML"/>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="defaultParentRowID">
          <SET FromValue="{substringBefore($defaultParentRowID/@Value,'.')}" Var="curParentTabName"/>
          <IF_TEST Test="($curParentTabName=$parentTabName)">
            <THEN>
              <SET Var="col" FromValue="{int(sum($col+1))}"/>
              <TO_DOCVAR AssignToVar="colTemp">
                <Column Value="{concat('T_',$T,'_ter_',$col)}" NewValue="{$defaultParentRowID/@Value}"/>
              </TO_DOCVAR>
              <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
              <SET Var="columnNameString" FromValue="&lt;{substringAfter($defaultParentRowID/@Value,'.')} Alias='{$colTemp/@Value}'/>"/>
              <STRING_TO_XML DocVar="columnNameXML" FromValue="{string($columnNameString/@Value)}"/>
              <ADD_CHILDREN DocVar="parentSelectValue" FromVar="columnNameXML"/>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <FOR_EACH SelectList="$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/*" CurrentElement="curElem">
          <IF_TEST Test="(int($curElem/tableRank/@Value) > 1)">
            <THEN>
              <SET FromValue="{int(sum($T+1))}" Var="T"/>
              <SET Var="tableName" FromValue="{$curElem/tableName/@Value}"/>
              <FOR_EACH SelectList="$getLinks/*" CurrentElement="linkElem">
                <IF_TEST Test="($linkElem/@Name=$tableName)">
                  <THEN>
                    <SET Var="propName12" FromValue="&lt;QUERY_DOCUMENT_LINK Name='{$linkElem/@LinkName}' Prefix='p{$curElem/tableRank/@Value}'/>"/>
                    <STRING_TO_XML DocVar="propXML12" FromValue="{string($propName12/@Value)}"/>
                    <!--Parent Select Tag-->
                    <TO_DOCVAR AssignToVar="selectValue">
                      <SELECT/>
                    </TO_DOCVAR>
                    <FOR_EACH SelectList="$resultColums/*" CurrentElement="colName">
                      <IF_TEST Test="($colName/tableName/@Value=$tableName)">
                        <THEN>
                          <SET Var="col" FromValue="{int(sum($col+1))}"/>
                          <TO_DOCVAR AssignToVar="colTemp">
                            <Column Value="{concat('T_',$T,'_ter_',$col)}" NewValue="{$colName/tableName/@Value}.{$colName/columnNamePhy/@Value}"/>
                          </TO_DOCVAR>
                          <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
                          <SET Var="columnNameString" FromValue="&lt;{$colName/columnName/@Value} Alias='{$colTemp/@Value}'/>"/>
                          <STRING_TO_XML DocVar="columnNameXML" FromValue="{string($columnNameString/@Value)}"/>
                          <ADD_CHILDREN DocVar="selectValue" FromVar="columnNameXML"/>
                        </THEN>
                      </IF_TEST>
                    </FOR_EACH>
                    <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="defaultRowID">
                      <IF_TEST Test="(substringBefore($defaultRowID/@Value,'.')=$tableName)">
                        <THEN>
                          <SET Var="col" FromValue="{int(sum($col+1))}"/>
                          <TO_DOCVAR AssignToVar="colTemp">
                            <Column Value="{concat('T_',$T,'_ter_',$col)}" NewValue="{$defaultRowID/@Value}"/>
                          </TO_DOCVAR>
                          <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
                          <SET Var="columnNameString" FromValue="&lt;{substringAfter($defaultRowID/@Value,'.')} Alias='{$colTemp/@Value}'/>"/>
                          <STRING_TO_XML DocVar="columnNameXML" FromValue="{string($columnNameString/@Value)}"/>
                          <ADD_CHILDREN DocVar="selectValue" FromVar="columnNameXML"/>
                        </THEN>
                      </IF_TEST>
                    </FOR_EACH>
                    <ADD_CHILDREN DocVar="propXML12" FromVar="selectValue"/>
                    <SET Var="filExpName" FromValue="{concat('TABLE_',$curElem/tableRank/@Value)}"/>
                    <FOR_EACH CurrentElement="filCurr" SelectList="$filExp/*">
                      <IF_TEST Test="$filCurr/name()=$filExpName">
                        <THEN>
                          <TO_DOCVAR AssignToVar="tempFil">
                            <ROOT>
                              <TO_XML SelectList="$filCurr/*/*/*"/>
                            </ROOT>
                          </TO_DOCVAR>
                          <APPEND_CHILDREN DocVar="propXML12" FromDocVar="tempFil"/>
                        </THEN>
                      </IF_TEST>
                    </FOR_EACH>
                    <!--End Parent Select Tag-->
                    <!--Child Table filter-->
                    <FOR_EACH SelectList="$tableProperties/*/*" CurrentElement="curElem">
                      <SET Var="filterTableName" FromValue="{substringBefore($curElem/name(),'.')}"/>
                      <IF_TEST Test="substringBefore($curElem/name(),'.')!=$parentTabName">
                        <THEN>
                          <IF_TEST Test="($linkElem/@Name=$filterTableName)">
                            <THEN>
                              <SET Var="filterName" FromValue="&lt;{substringAfter($curElem,'.')}"/>
                              <STRING_TO_XML DocVar="filterXML" FromValue="{string($filterName/@Value)}"/>
                              <FOR_EACH SelectList="$serchColums/cwSearchResultsColumns" CurrentElement="currElement">
                                <IF_TEST Test="$currElement/columnName/@Value=$filterXML/name()">
                                  <THEN>
                                    <SET Var="dataType" FromValue="{lowerCase($currElement/dataType/@Value)}"/>
                                    <IF_TEST Test="$dataType='perioddate' or $dataType='periodtimestamp6' or $dataType='periodtimestamp'">
                                      <THEN>
                                        <REMOVE_ATTRIBUTE DocVar="filterXML" Name="MatchBy"/>
                                        <ADD_ATTRIBUTE DocVar="filterXML" Name="MatchBy" Value="AS_ON"/>
                                      </THEN>
                                    </IF_TEST>
                                    <IF_TEST Test="$dataType='datetime'">
                                      <THEN>
                                        <REMOVE_ATTRIBUTE DocVar="filterXML" Name="MatchBy"/>
                                        <ADD_ATTRIBUTE DocVar="filterXML" Name="MatchBy" Value="GREATER_EQUAL"/>
                                        <!--LESS_EQUAL-->
                                        <CLONE_XML AssignToVar="filterXML1" DocVar="filterXML"/>
                                        <REMOVE_ATTRIBUTE DocVar="filterXML1" Name="MatchBy"/>
                                        <ADD_ATTRIBUTE DocVar="filterXML1" Name="MatchBy" Value="LESS_EQUAL"/>
                                        <SET Var="timeVal" FromValue="{subString($filterXML1/@Value,0,strlen($filterXML1/@Value)-2)}59"/>
                                        <REMOVE_ATTRIBUTE DocVar="filterXML1" Name="Value"/>
                                        <ADD_ATTRIBUTE DocVar="filterXML1" Name="Value" Value="{$timeVal}"/>
                                        <ADD_CHILDREN DocVar="QDL_XML" FromVar="filterXML1"/>
                                        <!--<ADD_CHILDREN DocVar="FDL_XML" FromVar="filterXML1"/>-->
                                      </THEN>
                                    </IF_TEST>
                                  </THEN>
                                </IF_TEST>
                              </FOR_EACH>
                              <ADD_CHILDREN DocVar="propXML12" FromVar="filterXML"/>
                              <!--<ADD_CHILDREN DocVar="FDL_XML" FromVar="filterXML"/>-->
                              <!--remove table name and add children-->
                            </THEN>
                          </IF_TEST>
                        </THEN>
                      </IF_TEST>
                    </FOR_EACH>
                    <!--End child Table filter-->
                    <!--Order By-->
                    <!--                    <IF_TEST Test="substringBefore($sortBy,'.')=$tableName">
                      <THEN>
                        <SET_NAME DocVar="sortByColumn" FromValue="{substringAfter($sortBy,'.')}"/>
                        <SET Attribute="Sort" DocVar="sortByColumn" FromValue="{$sortOrder}"/>
                        <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumn"/>
                        <ADD_CHILDREN DocVar="propXML12" FromVar="orderByXml"/>
                        <TO_DOCVAR AssignToVar="orderByXml">
                          <ORDER_BY/>
                        </TO_DOCVAR>
                      </THEN>
                    </IF_TEST>-->
                    <!--End Order By-->
                    <ADD_CHILDREN DocVar="query_doc_links" FromVar="propXML12"/>
                  </THEN>
                </IF_TEST>
              </FOR_EACH>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <!--end logic-->
        <APPEND_TO_XML SelectList="$query_doc_links/QUERY_DOCUMENT_LINK">
          <TO_XML SelectList="$ENTITY_STATE/*"/>
        </APPEND_TO_XML>
        <IF_TEST Test="$thisParam/PARAMS/showHistory/@Value='true'">
          <THEN>
            <SET Var="GetTemporalHistory" FromValue="false"/>
          </THEN>
          <ELSE>
            <SET Var="GetTemporalHistory" FromValue="true"/>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="$thisParam/PARAMS/IsTemporalTable/@Value='false'">
          <THEN>
            <SET Var="GetTemporalHistory" FromValue="false"/>
          </THEN>
        </IF_TEST>
        <TO_DOCVAR AssignToVar="tempFil">
          <ROOT/>
        </TO_DOCVAR>
        <SET Var="filExpName" FromValue="TABLE_1"/>
        <FOR_EACH CurrentElement="filCurr" SelectList="$filExp/*">
          <IF_TEST Test="$filCurr/name()=$filExpName">
            <THEN>
              <TO_DOCVAR AssignToVar="tempFil">
                <ROOT>
                  <TO_XML SelectList="$filCurr/*/*/*"/>
                </ROOT>
              </TO_DOCVAR>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <GET_DOCUMENT AssignToVar="dyanmicTableData" Name="{$parentTabName}" Prefix="p1" Expression="{$adFilterExp/Advanced_Exp/@Value}" GetTemporalHistory="{$GetTemporalHistory}" ServiceName="{$parentSRVC_NAME}" MaxRows="{$thisParam/maxRows/@Value}" StartAtRow="{$paginateStart}" ReturnRowCount="true" DirtyRead="true">
          <TO_XML SelectList="$parentSelectValue"/>
          <TO_XML SelectList="$query_doc_links/*"/>
          <TO_XML SelectList="$ENTITY_STATE/*"/>
          <TO_XML SelectList="$filters/*"/>
          <TO_XML SelectList="$tempFil/*"/>
          <ORDER_BY>
            <TO_XML SelectList="$orderByXml/*"/>
          </ORDER_BY>
        </GET_DOCUMENT>
        <XML_TO_STRING FromDocVar="dyanmicTableData" DocVar="queryResultString"/>
        <!--SET FromValue="0" Var="T"/>
        <FOR_EACH SelectList="$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/*" CurrentElement="curElem">
          <SET FromValue="{$curElem/tableName/@Value}." Var="TName"/>
          <SET FromValue="T{$T}_" Var="replaceString"/>
          <SET FromValue="R{$T}_" Var="replaceString1"/>
          <SET FromValue="{strReplaceAll($queryResultString,$replaceString,$TName)}" Var="queryResultString"/>
          <SET FromValue="{strReplaceAll($queryResultString,$replaceString1,$TName)}" Var="queryResultString"/>
          <SET FromValue="{int(sum($T+1))}" Var="T"/>
        </FOR_EACH-->
        <FOR_EACH SelectList="$colAliasRel/Column" CurrentElement="curElem">
          <SET Var="toReplace" FromValue="&lt;{$curElem/@Value} "/>
          <SET Var="replaceWith" FromValue="&lt;{$curElem/@NewValue} "/>
          <SET FromValue="{strReplaceAll($queryResultString,$toReplace,$replaceWith)}" Var="queryResultString"/>
        </FOR_EACH>
        <FOR_EACH SelectList="$resultColums/*" CurrentElement="colName">
          <SET Var="ColNamePhy" FromValue="{$colName/tableName/@Value}.{$colName/columnNamePhy/@Value}"/>
          <SET Var="ColNameLog" FromValue="{$colName/tableName/@Value}.{$colName/columnName/@Value}"/>
          <SET FromValue="{strReplaceAll($queryResultString,$ColNamePhy,$ColNameLog)}" Var="queryResultString"/>
        </FOR_EACH>
        <STRING_TO_XML FromDocVar="queryResultString" DocVar="responseXML"/>
        <ADD_CHILDREN DocVar="thisReturn" FromSelectList="$responseXML/*"/>
        <!--pagination-->
        <SET DocVar="thisReturn" Attribute="StartRowCount" FromValue="{$paginateStart}"/>
        <SET DocVar="thisReturn" Attribute="TotalRowCount" FromValue="{$dyanmicTableData/@TotalRowCount}"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getMultipleEditTableData">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="tableData">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="filters">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="colAliasRel">
          <ROOT/>
        </TO_DOCVAR>
        <SET Var="col" FromValue="0"/>
        <SET Var="parentTabName" FromValue="{$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/cwSearchResultsTables[1]/tableName/@Value}"/>
        <SET Var="parentSRVC_NAME" FromValue="{$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/cwSearchResultsTables[1]/serviceName/@Value}"/>
        <!--entity state-->
        <IF_TEST Test="$parentSRVC_NAME='BCM_MASTER' and starts-with($parentTabName,'error_')='false'">
          <THEN>
            <TO_DOCVAR AssignToVar="ENTITY_STATE">
              <ROOT>
                <ENTITY_STATE Value="ACTIVE"/>
              </ROOT>
            </TO_DOCVAR>
          </THEN>
          <ELSE>
            <TO_DOCVAR AssignToVar="ENTITY_STATE">
              <ROOT/>
            </TO_DOCVAR>
          </ELSE>
        </IF_TEST>
        <!--entity state-->
        <!--Parent Table filter-->
        <TO_DOCVAR AssignToVar="parentIdValueOrig">
          <OR>
            <TO_XML SelectList="$thisParam/ID/*"/>
          </OR>
        </TO_DOCVAR>
        <CLONE_XML AssignToVar="parentIdValue" DocVar="parentIdValueOrig"/>
        <FOR_EACH SelectList="$parentIdValue/*" CurrentElement="parentElem">
          <FOR_EACH SelectList="$parentElem/*" CurrentElement="parentIDVals">
            <SET Var="filterTableName" FromValue="{substringBefore($parentIDVals/name(),'.')}"/>
            <IF_TEST Test="$filterTableName!=$parentTabName">
              <THEN>
                <REMOVE_CHILDREN ChildName="{$parentIDVals/name()}" DocVar="parentElem"/>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
        </FOR_EACH>
        <XML_TO_STRING DocVar="idParValueString" FromVar="parentIdValue"/>
        <SET FromValue="{$parentTabName}\." Var="replaceString"/>
        <SET FromValue="{strReplaceAll($idParValueString,$replaceString,'')}" Var="idParValueString"/>
        <STRING_TO_XML FromDocVar="idParValueString" DocVar="parentIdValue"/>
        <ADD_CHILDREN DocVar="filters" FromVar="parentIdValue"/>
        <!--Parent Table filter-->
        <!-- For sorting -->
        <TO_DOCVAR AssignToVar="orderByXml">
          <ORDER_BY/>
        </TO_DOCVAR>
        <SET Var="defaultRowId" FromValue=""/>
        <SET Var="sortOrder" FromValue="{ifElse($thisParam/PARAMS/SORT_ORDER/@Value = null, 'Ascending', $thisParam/PARAMS/SORT_ORDER/@Value)}"/>
        <SET Var="sortBy" FromValue="{$thisParam/PARAMS/SORT_BY/@Value}"/>
        <IF_TEST Test="($sortBy = 'ID') or ($sortBy = 'null') or ($sortBy = '') or ($sortBy = null) ">
          <THEN>
            <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="curRowElem">
              <SET Var="sortBy" FromValue="{substringAfter($curRowElem/@Value,'.')}"/>
              <SET Var="sortOrder" FromValue="Ascending"/>
              <TO_DOCVAR AssignToVar="sortByColumn">
                <TEMP/>
              </TO_DOCVAR>
              <SET_NAME DocVar="sortByColumn" FromValue="{substringAfter($sortBy,'.')}"/>
              <SET Attribute="Sort" DocVar="sortByColumn" FromValue="{$sortOrder}"/>
              <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumn"/>
            </FOR_EACH>
          </THEN>
          <ELSE>
            <TO_DOCVAR AssignToVar="sortByColumn">
              <TEMP/>
            </TO_DOCVAR>
            <SET_NAME DocVar="sortByColumn" FromValue="{substringAfter($sortBy,'.')}"/>
            <SET Attribute="Sort" DocVar="sortByColumn" FromValue="{$sortOrder}"/>
            <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumn"/>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="$thisParam/PARAMS/MULTISORT_XML/@Value!=null and $thisParam/PARAMS/MULTISORT_XML/@Value!=''">
          <THEN>
            <TO_DOCVAR AssignToVar="orderByXml">
              <ORDER_BY/>
            </TO_DOCVAR>
            <STRING_TO_XML DocVar="orderByXmlTemp" FromValue="{string($thisParam/PARAMS/MULTISORT_XML/@Value)}"/>
            <FOR_EACH SelectList="$orderByXmlTemp/*" CurrentElement="curElem">
              <TO_DOCVAR AssignToVar="sortByColumnTemp">
                <TEMP/>
              </TO_DOCVAR>
              <SET_NAME DocVar="sortByColumnTemp" FromValue="{substringAfter($curElem/name(),'.')}"/>
              <SET Attribute="Sort" DocVar="sortByColumnTemp" FromValue="{$curElem/@Sort}"/>
              <ADD_CHILDREN DocVar="orderByXml" FromDocVar="sortByColumnTemp"/>
            </FOR_EACH>
          </THEN>
        </IF_TEST>
        <!--              </THEN>
        </IF_TEST>-->
        <!-- For sorting -->
        <!--Links involved-->
        <GET_LINKS ServiceName="{$parentSRVC_NAME}" AssignToVar="getLinks">
          <TABLE_NAME Value="{$parentTabName}"/>
        </GET_LINKS>
        <!--Links involved-->
        <TO_DOCVAR AssignToVar="query_doc_links">
          <ROOT/>
        </TO_DOCVAR>
        <!--logic-->
        <SET Var="T" FromValue="0"/>
        <GET_DOCUMENT AssignToVar="resultColums" Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <container Value="create_edit"/>
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
        </GET_DOCUMENT>
        <TO_DOCVAR AssignToVar="parentSelectValue">
          <SELECT/>
        </TO_DOCVAR>
        <FOR_EACH SelectList="$resultColums/*" CurrentElement="colName">
          <IF_TEST Test="($colName/tableName/@Value=$parentTabName)">
            <THEN>
              <SET Var="col" FromValue="{int(sum($col+1))}"/>
              <TO_DOCVAR AssignToVar="colTemp">
                <Column Value="{concat('T_',$T,'_ter_',$col)}" NewValue="{$colName/tableName/@Value}.{$colName/columnNamePhy/@Value}"/>
              </TO_DOCVAR>
              <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
              <SET Var="columnNameString" FromValue="&lt;{$colName/columnName/@Value} Alias='{$colTemp/@Value}'/>"/>
              <STRING_TO_XML DocVar="columnNameXML" FromValue="{string($columnNameString/@Value)}"/>
              <ADD_CHILDREN DocVar="parentSelectValue" FromVar="columnNameXML"/>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="defaultParentRowID">
          <SET FromValue="{substringBefore($defaultParentRowID/@Value,'.')}" Var="curParentTabName"/>
          <IF_TEST Test="($curParentTabName=$parentTabName)">
            <THEN>
              <SET Var="col" FromValue="{int(sum($col+1))}"/>
              <TO_DOCVAR AssignToVar="colTemp">
                <Column Value="{concat('T_',$T,'_ter_',$col)}" NewValue="{$defaultParentRowID/@Value}"/>
              </TO_DOCVAR>
              <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
              <SET Var="columnNameString" FromValue="&lt;{substringAfter($defaultParentRowID/@Value,'.')} Alias='{$colTemp/@Value}'/>"/>
              <STRING_TO_XML DocVar="columnNameXML" FromValue="{string($columnNameString/@Value)}"/>
              <ADD_CHILDREN DocVar="parentSelectValue" FromVar="columnNameXML"/>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <FOR_EACH SelectList="$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/*" CurrentElement="curElem">
          <IF_TEST Test="(int($curElem/tableRank/@Value) > 1)">
            <THEN>
              <SET FromValue="{int(sum($T+1))}" Var="T"/>
              <SET Var="tableName" FromValue="{$curElem/tableName/@Value}"/>
              <FOR_EACH SelectList="$getLinks/*" CurrentElement="linkElem">
                <IF_TEST Test="($linkElem/@Name=$tableName)">
                  <THEN>
                    <SET Var="propName12" FromValue="&lt;QUERY_DOCUMENT_LINK Name='{$linkElem/@LinkName}'/>"/>
                    <STRING_TO_XML DocVar="propXML12" FromValue="{string($propName12/@Value)}"/>
                    <!--Parent Select Tag-->
                    <TO_DOCVAR AssignToVar="selectValue">
                      <SELECT/>
                    </TO_DOCVAR>
                    <!--add all result columns in select-->
                    <FOR_EACH SelectList="$resultColums/*" CurrentElement="colName">
                      <IF_TEST Test="($colName/tableName/@Value=$tableName)">
                        <THEN>
                          <SET Var="col" FromValue="{int(sum($col+1))}"/>
                          <TO_DOCVAR AssignToVar="colTemp">
                            <Column Value="{concat('T_',$T,'_ter_',$col)}" NewValue="{$colName/tableName/@Value}.{$colName/columnNamePhy/@Value}"/>
                          </TO_DOCVAR>
                          <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
                          <SET Var="columnNameString" FromValue="&lt;{$colName/columnName/@Value} Alias='{$colTemp/@Value}'/>"/>
                          <STRING_TO_XML DocVar="columnNameXML" FromValue="{string($columnNameString/@Value)}"/>
                          <ADD_CHILDREN DocVar="selectValue" FromVar="columnNameXML"/>
                        </THEN>
                      </IF_TEST>
                    </FOR_EACH>
                    <!--add all result columns in select-->
                    <!--and-->
                    <!--add all row id as different Alias-->
                    <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="defaultRowID">
                      <IF_TEST Test="(substringBefore($defaultRowID/@Value,'.')=$tableName)">
                        <THEN>
                          <SET Var="col" FromValue="{int(sum($col+1))}"/>
                          <TO_DOCVAR AssignToVar="colTemp">
                            <Column Value="{concat('T_',$T,'_ter_',$col)}" NewValue="{$defaultRowID/@Value}"/>
                          </TO_DOCVAR>
                          <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
                          <SET Var="columnNameString" FromValue="&lt;{substringAfter($defaultRowID/@Value,'.')} Alias='{$colTemp/@Value}'/>"/>
                          <STRING_TO_XML DocVar="columnNameXML" FromValue="{string($columnNameString/@Value)}"/>
                          <ADD_CHILDREN DocVar="selectValue" FromVar="columnNameXML"/>
                        </THEN>
                      </IF_TEST>
                    </FOR_EACH>
                    <!--add all row id as different Alias-->
                    <ADD_CHILDREN DocVar="propXML12" FromVar="selectValue"/>
                    <!--End Parent Select Tag-->
                    <!--Child Table filter-->
                    <TO_DOCVAR AssignToVar="idValueOrig">
                      <OR>
                        <TO_XML SelectList="$thisParam/ID/*"/>
                      </OR>
                    </TO_DOCVAR>
                    <CLONE_XML AssignToVar="idValue" DocVar="idValueOrig"/>
                    <FOR_EACH SelectList="$idValue/*" CurrentElement="curElem11">
                      <FOR_EACH SelectList="$curElem11/*" CurrentElement="curElem12">
                        <SET Var="filterTableName" FromValue="{substringBefore($curElem12/name(),'.')}"/>
                        <IF_TEST Test="$filterTableName!=$tableName">
                          <THEN>
                            <REMOVE_CHILDREN ChildName="{$curElem12/name()}" DocVar="curElem11"/>
                          </THEN>
                        </IF_TEST>
                      </FOR_EACH>
                    </FOR_EACH>
                    <XML_TO_STRING DocVar="idValueString" FromVar="idValue"/>
                    <SET FromValue="{$tableName}\." Var="replaceString"/>
                    <SET FromValue="{strReplaceAll($idValueString,$replaceString,'')}" Var="idValueString"/>
                    <STRING_TO_XML FromDocVar="idValueString" DocVar="idValue"/>
                    <ADD_CHILDREN DocVar="propXML12" FromVar="idValue"/>
                    <!--Child Table filter-->
                    <ADD_CHILDREN DocVar="query_doc_links" FromVar="propXML12"/>
                  </THEN>
                </IF_TEST>
              </FOR_EACH>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <!--end logic-->
        <APPEND_TO_XML SelectList="$query_doc_links/QUERY_DOCUMENT_LINK">
          <TO_XML SelectList="$ENTITY_STATE/*"/>
        </APPEND_TO_XML>
        <GET_DOCUMENT AssignToVar="dyanmicTableData" Name="{$parentTabName}" ServiceName="{$parentSRVC_NAME}" ReturnRowCount="true" DirtyRead="true">
          <TO_XML SelectList="$parentSelectValue"/>
          <TO_XML SelectList="$query_doc_links/*"/>
          <TO_XML SelectList="$ENTITY_STATE/*"/>
          <TO_XML SelectList="$filters/*"/>
          <ORDER_BY>
            <TO_XML SelectList="$orderByXml/*"/>
          </ORDER_BY>
        </GET_DOCUMENT>
        <XML_TO_STRING FromDocVar="dyanmicTableData" DocVar="queryResultString"/>
        <!--SET FromValue="0" Var="T"/>
        <FOR_EACH SelectList="$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/*" CurrentElement="curElem">
          <SET FromValue="{$curElem/tableName/@Value}." Var="TName"/>
          <SET FromValue="T{$T}_" Var="replaceString"/>
          <SET FromValue="R{$T}_" Var="replaceString1"/>
          <SET FromValue="{strReplaceAll($queryResultString,$replaceString,$TName)}" Var="queryResultString"/>
          <SET FromValue="{strReplaceAll($queryResultString,$replaceString1,$TName)}" Var="queryResultString"/>
          <SET FromValue="{int(sum($T+1))}" Var="T"/>
        </FOR_EACH-->
        <FOR_EACH SelectList="$colAliasRel/Column" CurrentElement="curElem">
          <SET Var="toReplace" FromValue="&lt;{$curElem/@Value} "/>
          <SET Var="replaceWith" FromValue="&lt;{$curElem/@NewValue} "/>
          <SET FromValue="{strReplaceAll($queryResultString,$toReplace,$replaceWith)}" Var="queryResultString"/>
        </FOR_EACH>
        <FOR_EACH SelectList="$resultColums/*" CurrentElement="colName">
          <SET Var="ColNamePhy" FromValue="{$colName/tableName/@Value}.{$colName/columnNamePhy/@Value}"/>
          <SET Var="ColNameLog" FromValue="{$colName/tableName/@Value}.{$colName/columnName/@Value}"/>
          <SET FromValue="{strReplaceAll($queryResultString,$ColNamePhy,$ColNameLog)}" Var="queryResultString"/>
        </FOR_EACH>
        <STRING_TO_XML FromDocVar="queryResultString" DocVar="responseXML"/>
        <ADD_CHILDREN DocVar="thisReturn" FromSelectList="$responseXML/*"/>
        <!--pagination-->
        <SET DocVar="thisReturn" Attribute="TotalRowCount" FromValue="{$dyanmicTableData/@TotalRowCount}"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getExplicitJoinEditTableData">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="colAliasRel">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="parentIdValue">
          <OR>
            <TO_XML SelectList="$thisParam/ID/*"/>
          </OR>
        </TO_DOCVAR>
        <SET Var="whereCondition" FromValue=""/>
        <SET Var="findString" FromValue="AND  \) OR"/>
        <SET Var="replaceString" FromValue="\) OR"/>
        <FOR_EACH SelectList="$parentIdValue/*" CurrentElement="parentElem">
          <FOR_EACH SelectList="$parentElem/*" CurrentElement="parentIDVals">
            <IF_TEST Test="$parentIDVals/@DataType='timestamp'">
              <THEN>
                <SET Var="whereCondition" FromValue="{$whereCondition} ({$parentIDVals/name()} = '{$parentIDVals/@Value}' (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS') ) AND "/>
              </THEN>
              <ELSE>
                <IF_TEST Test="$parentIDVals/@DataType='date'">
                  <THEN>
                    <SET Var="dateValue1" FromValue="{trim($parentIDVals/@Value)}"/>
                    <SET Var="dbFormat1" FromValue="MM/dd/yyyy"/>
                    <SET Var="dateFormat1" FromValue="MM/dd/yyyy"/>
                    <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="nativeReturnValue">
                      <PARAM Var="dateValue1" Caption="date"/>
                      <PARAM Var="dateFormat1" Caption="format"/>
                      <PARAM Var="dbFormat1" Caption="dbFormat"/>
                    </NATIVE_FUNCTION>
                    <SET Var="whereCondition" FromValue="{$whereCondition} ({$parentIDVals/name()} = CAST('{trim($nativeReturnValue)}' AS DATE FORMAT 'MM/dd/yyyy')) AND "/>
                  </THEN>
                  <ELSE>
                    <IF_TEST Test="$parentIDVals/@DataType='BIGINT'">
                      <THEN>
                        <SET Var="whereCondition" FromValue="{$whereCondition} ({$parentIDVals/name()} = {$parentIDVals/@Value}) AND "/>
                      </THEN>
                      <ELSE>
                        <SET Var="whereCondition" FromValue="{$whereCondition} ({$parentIDVals/name()} = '{$parentIDVals/@Value}') AND "/>
                      </ELSE>
                    </IF_TEST>
                  </ELSE>
                </IF_TEST>
              </ELSE>
            </IF_TEST>
          </FOR_EACH>
          <SET Var="whereORCondition" FromValue="( {$whereCondition} ) OR {$whereORCondition}"/>
          <SET Var="whereORCondition" FromValue="{strReplaceAll($whereORCondition,$findString,$replaceString)}"/>
          <SET Var="whereCondition" FromValue=""/>
        </FOR_EACH>
        <SET Var="whereORCondition" FromValue="{strReplaceAll($whereORCondition,'OR null','')}"/>
        <SET Var="T" FromValue="0"/>
        <SET Var="dateCols" FromValue=""/>
        <!--get tables & columns involved-->
        <FOR_EACH SelectList="$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/*" CurrentElement="curElem">
          <SET FromValue="{int(sum($T+1))}" Var="T"/>
          <GET_DOCUMENT Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" AssignToVar="serchResultColums" ReturnRowCount="yes" DirtyRead="true">
            <workflowId Value="{$thisParam/workflowId/@Value}"/>
            <container Value="result"/>
            <tableName Value="{$curElem/tableName/@Value}"/>
            <tableNamePhy Value="{$curElem/tableNamePhy/@Value}"/>
            <ORDER_BY>
              <columnOrder Sort="Ascending"/>
            </ORDER_BY>
          </GET_DOCUMENT>
          <SET Var="col" FromValue="0"/>
          <FOR_EACH SelectList="$serchResultColums/cwSearchResultsColumns" CurrentElement="columns">
            <SET Var="col" FromValue="{int(sum($col+1))}"/>
            <TO_DOCVAR AssignToVar="colTemp">
              <Column Value="{concat('T',$T,'_ter_',$col)}" NewValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}"/>
            </TO_DOCVAR>
            <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
            <SET Var="selectValue" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value} as {$colTemp/@Value} , {$selectValue}"/>
            <IF_TEST Test="lowerCase($columns/dataType/@Value)='date'">
              <THEN>
                <SET Var="dateCols" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}#{$dateCols}"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="lowerCase($columns/dataType/@Value)='datetime' or lowerCase($columns/dataType/@Value)='timestamp'">
              <THEN>
                <SET Var="dateTimeCols" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}#{$dateTimeCols}"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="lowerCase($columns/dataType/@Value)='perioddate'">
              <THEN>
                <SET Var="periodDateCols" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}#{$periodDateCols}"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="lowerCase($columns/dataType/@Value)='periodtimestamp6' or lowerCase($columns/dataType/@Value)='periodtimestamp'">
              <THEN>
                <SET Var="periodTimeCols" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}#{$periodTimeCols}"/>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
          <IF_TEST Test="$curElem/tableRank/@Value =1">
            <THEN>
              <SET FromValue="{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value} " Var="tableValue"/>
            </THEN>
          </IF_TEST>
          <!--SET FromValue="{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}, {$tableValue}" Var="tableValue"/-->
          <IF_TEST Test="$curElem/serviceName/@Value='BCM_MASTER'">
            <THEN>
              <SET Var="SYS_ENT_STATE" FromValue="{concat('(',' ')}{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}.SYS_ENT_STATE='ACTIVE' OR {$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}.SYS_ENT_STATE is null) AND {$SYS_ENT_STATE}"/>
              <!--SET Var="SYS_ENT_STATE" FromValue="{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}.SYS_ENT_STATE='ACTIVE' AND {$SYS_ENT_STATE}"/-->
            </THEN>
          </IF_TEST>
          <!--include key colums in query-->
          <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="params">
            <SET Var="dbDotTabName1" FromValue="{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}."/>
            <SET Var="columnValue" FromValue="{substringAfter($params/@Value,$dbDotTabName1)}"/>
            <IF_TEST Test="contains(trim($params/@Value),$dbDotTabName1)">
              <THEN>
                <SET Var="col" FromValue="{int(sum($col+1))}"/>
                <TO_DOCVAR AssignToVar="colTemp">
                  <Column Value="{concat('T',$T,'_ter_',$col)}" NewValue="{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}.{$columnValue}"/>
                </TO_DOCVAR>
                <SET Var="selectValue" FromValue="{$params/@Value} as {$colTemp/@Value} , {$selectValue}"/>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
          <!--include key colums in query-->
        </FOR_EACH>
        <IF_TEST Test="(strlen($SYS_ENT_STATE) > 1)">
          <THEN>
            <SET Var="SYS_ENT_STATE" FromValue=" AND {strReplaceAll($SYS_ENT_STATE,'AND null','')}"/>
          </THEN>
          <ELSE>
            <SET Var="SYS_ENT_STATE" FromValue=""/>
          </ELSE>
        </IF_TEST>
        <!--get joins involved-->
        <GET_DOCUMENT Name="cwJoinColumns" ServiceName="USER_SECURITY" AssignToVar="cwJoinColumns" ReturnRowCount="yes" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <ORDER_BY>
            <sequence Sort="Ascending"/>
          </ORDER_BY>
        </GET_DOCUMENT>
        <FOR_EACH SelectList="$cwJoinColumns/cwJoinColumns" CurrentElement="joins">
          <IF_TEST Test="indexOf($tableValue,concat($joins/LHS_DB_Name/@Value,'.',$joins/LHS_TableName_Phy/@Value)) >= '0'">
            <THEN>
              <SET Var="joinLeftTable" FromValue="{$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}"/>
              <IF_TEST Test="$joinValue != null and indexOf($joinValue,concat($joinLeftTable,' ')) >= '0'">
                <THEN>
                  <SET Var="joinRightTable" FromValue="{$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}"/>
                  <IF_TEST Test="indexOf($joinValue,concat($joinRightTable,' ')) >= '0' or indexOf($tableValue,$joinRightTable) >='0'">
                    <THEN>
                      <SET Var="joinValue" FromValue="{$joinValue} and {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                    </THEN>
                    <ELSE>
                      <SET Var="joinValue" FromValue="{$joinValue} {$joins/Join_Type/@Value} {$joinRightTable/@Value} on {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                    </ELSE>
                  </IF_TEST>
                </THEN>
                <ELSE>
                  <SET Var="joinValue" FromValue="{$joinValue} {$joins/Join_Type/@Value} {$joinLeftTable/@Value} on {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                </ELSE>
              </IF_TEST>
            </THEN>
            <ELSE>
              <SET Var="joinLeftTable" FromValue="{$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}"/>
              <IF_TEST Test="$joinValue != null and indexOf($joinValue,concat($joinLeftTable,' ')) >= '0'">
                <THEN>
                  <SET Var="joinRightTable" FromValue="{$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}"/>
                  <IF_TEST Test="indexOf($joinValue,concat($joinRightTable,' ')) >= '0' or indexOf($tableValue,$joinRightTable) >='0'">
                    <THEN>
                      <SET Var="joinValue" FromValue="{$joinValue} and {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                    </THEN>
                    <ELSE>
                      <SET Var="joinValue" FromValue="{$joinValue} {$joins/Join_Type/@Value} {$joinRightTable/@Value} on {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                    </ELSE>
                  </IF_TEST>
                </THEN>
                <ELSE>
                  <SET Var="joinValue" FromValue="{$joinValue} {$joins/Join_Type/@Value} {$joinLeftTable/@Value} on {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                </ELSE>
              </IF_TEST>
            </ELSE>
          </IF_TEST>
        </FOR_EACH>
        <IF_TEST Test="(strlen($joinValue) > 1)">
          <THEN>
            <SET Var="joinValue" FromValue="{strReplaceAll($joinValue,'AND null','')}"/>
          </THEN>
        </IF_TEST>
        <SET Var="queryString" FromValue="select {strReplaceAll($selectValue,', null','')} from {strReplaceAll($tableValue,', null','')} {$joinValue}"/>
        <SET Var="queryString" FromValue="{strReplaceAll($queryString,'null','')}"/>
        <!--get joins involved-->
        <!-- multi sort-->
        <IF_TEST Test="$thisParam/PARAMS/MULTISORT_XML/@Value!=null and $thisParam/PARAMS/MULTISORT_XML/@Value!=''">
          <THEN>
            <STRING_TO_XML DocVar="orderByXmlTemp" FromValue="{string($thisParam/PARAMS/MULTISORT_XML/@Value)}"/>
            <FOR_EACH SelectList="$orderByXmlTemp/*" CurrentElement="curElem">
              <SET Var="OrderB" FromValue=" {$curElem/name()} {strReplaceAll(strReplaceAll($curElem/@Sort,'Descending','DESC'),'Ascending','ASC')}, {$OrderB}"/>
            </FOR_EACH>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="(strlen($OrderB) > 3)">
          <THEN>
            <SET Var="OrderB" FromValue="ORDER BY {$OrderB}"/>
          </THEN>
          <ELSE>
            <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="curElem">
              <SET Var="OrderB" FromValue=" {$curElem/@Value} ASC, {$OrderB}"/>
            </FOR_EACH>
            <SET Var="OrderB" FromValue=" ORDER BY {$OrderB}"/>
          </ELSE>
        </IF_TEST>
        <SET Var="OrderB" FromValue="{strReplaceAll($OrderB,', null','')}"/>
        <!-- multi sort-->
        <IF_TEST Test="(strlen($joinValue) > 1)">
          <THEN>
            <SET Var="queryString" FromValue="{$queryString}  where {$whereORCondition} {$SYS_ENT_STATE} {$OrderB}"/>
          </THEN>
          <ELSE>
            <SET Var="queryString" FromValue="{$queryString} WHERE {$whereORCondition} {$OrderB}"/>
          </ELSE>
        </IF_TEST>
        <EXECUTE_SQL_QUERY Value="{$queryString}" AssignToVar="queryResult" ReturnRowCount="yes"/>
        <XML_TO_STRING FromDocVar="queryResult" DocVar="queryResultString"/>
        <SET FromValue="0" Var="T"/>
        <!--FOR_EACH SelectList="$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/*" CurrentElement="curElem">
          <SET FromValue="{int(sum($T+1))}" Var="T"/>
          <SET FromValue="{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}." Var="TName"/>
          <SET FromValue="T{$T}_" Var="replaceString"/>
          <SET FromValue="{strReplaceAll($queryResultString,$replaceString,$TName)}" Var="queryResultString"/>
        </FOR_EACH-->
        <FOR_EACH SelectList="$colAliasRel/Column" CurrentElement="curElem">
          <SET Var="toReplace" FromValue="&lt;{$curElem/@Value} "/>
          <SET Var="replaceWith" FromValue="&lt;{$curElem/@NewValue} "/>
          <SET FromValue="{strReplaceAll($queryResultString,$toReplace,$replaceWith)}" Var="queryResultString"/>
        </FOR_EACH>
        <STRING_TO_XML FromDocVar="queryResultString" DocVar="responseXML"/>
        <ADD_CHILDREN DocVar="thisReturn" FromSelectList="$responseXML/*"/>
        <!--pagination-->
        <SET DocVar="thisReturn" Attribute="TotalRowCount" FromValue="{$queryResult/@TotalRowCount}"/>
        <!--pagination-->
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getExplicitJoinTableData">
    <RULE>
      <ACTION>
        <IF_TEST Test="$thisParam/PARAMS/ID/@Value!=null and $thisParam/showHistory/@Value='false'">
          <THEN>
            <SET Var="whereCondition" FromValue="{strReplaceAll($thisParam/PARAMS/ID/@Value,'#','\' and ')}"/>
            <SET Var="whereCondition" FromValue="{strReplaceAll($whereCondition,'=',' =\'')}"/>
            <SET Var="whereCondition" FromValue="{strReplaceAll(concat($whereCondition,'abcde'),'abcde','\'')}"/>
            <SET Var="whereCondition" FromValue="{concat($whereCondition,' and ')}"/>
          </THEN>
        </IF_TEST>
        <REQUEST Name="getFilterExpressionExpJoinData" ServiceName="UI_WORKFLOW" HandleException="true" AssignToVar="filExp">
          <TO_XML SelectList="$thisParam/*"/>
        </REQUEST>
        <TO_DOCVAR AssignToVar="colAliasRel">
          <ROOT/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="tableRowId">
          <ROOT/>
        </TO_DOCVAR>
        <FOR_EACH CurrentElement="SelectTag" SelectList="$thisParam/TEST/*">
          <ADD_CHILDREN DocVar="tableRowId" FromVar="SelectTag"/>
        </FOR_EACH>
        <SET Var="T" FromValue="0"/>
        <SET Var="dateCols" FromValue=""/>
        <!--get tables & columns involved-->
        <TO_DOCVAR AssignToVar="tableProperties">
          <ROOT/>
        </TO_DOCVAR>
        <IF_TEST Test="$thisParam/FILTER_DETAILS/@TotalRowCount='1'">
          <THEN>
            <TO_DOCVAR AssignToVar="adFilterExp">
              <RESPONSE Status="Success">
                <Advanced_Exp Value="{strReplaceAll($thisParam/FILTER_DETAILS/executable_Expression/@Value,'-_-',' ')}"/>
              </RESPONSE>
            </TO_DOCVAR>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="strlen($adFilterExp/Advanced_Exp/@Value)!=0">
          <THEN/>
          <ELSE>
            <GET_DOCUMENT Name="cwAdvancedFilter" ServiceName="USER_SECURITY" AssignToVar="filRel" DirtyRead="true" ReturnRowCount="yes">
              <workflowId Value="{$thisParam/workflowId/@Value}"/>
              <sequence Value="-1"/>
            </GET_DOCUMENT>
            <IF_TEST Test="$filRel/@TotalRowCount!='0'">
              <THEN>
                <TO_DOCVAR AssignToVar="adFilterExp">
                  <RESPONSE Status="Success">
                    <Advanced_Exp Value="{strReplaceAll($filRel/cwAdvancedFilter/executable_Expression/@Value,'-_-',' ')}"/>
                  </RESPONSE>
                </TO_DOCVAR>
              </THEN>
            </IF_TEST>
          </ELSE>
        </IF_TEST>
        <FOR_EACH SelectList="$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/*" CurrentElement="curElem">
          <SET FromValue="{int(sum($T+1))}" Var="T"/>
          <GET_DOCUMENT Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" AssignToVar="serchResultColums" ReturnRowCount="yes" DirtyRead="true">
            <workflowId Value="{$thisParam/workflowId/@Value}"/>
            <container Value="result"/>
            <tableName Value="{$curElem/tableName/@Value}"/>
            <tableNamePhy Value="{$curElem/tableNamePhy/@Value}"/>
            <ORDER_BY>
              <columnOrder Sort="Ascending"/>
            </ORDER_BY>
          </GET_DOCUMENT>
          <SET Var="col" FromValue="0"/>
          <FOR_EACH SelectList="$serchResultColums/cwSearchResultsColumns" CurrentElement="columns">
            <FOR_EACH SelectList="$thisParam/PARAMS/*" CurrentElement="whereParams">
              <SET Var="tableDotColName" FromValue="{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}"/>
              <SET Var="dbDotTableDotColName" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}"/>
              <IF_TEST Test="(strlen(trim($whereParams/@Value)) > 0) and ($whereParams/name()=$dbDotTableDotColName) and ($thisParam/actionButton/@Value = 'searchRecord')">
                <THEN>
                  <SET DocVar="whereParams" Attribute="MatchBy" FromValue="CONTAINS"/>
                  <ADD_CHILDREN DocVar="tableProperties" FromVar="whereParams"/>
                </THEN>
              </IF_TEST>
              <IF_TEST Test="(strlen(trim($whereParams/@Value)) > 0) and ($whereParams/name()=$tableDotColName) and ($thisParam/actionButton/@Value = 'searchRecord')">
                <THEN>
                  <TO_DOCVAR AssignToVar="tempVar">
                    <tempVar/>
                  </TO_DOCVAR>
                  <SET DocVar="tempVar" Property="{$dbDotTableDotColName}" FromValue="{$whereParams/@Value}"/>
                  <ADD_CHILDREN DocVar="tableProperties" FromSelectList="$tempVar/*"/>
                </THEN>
              </IF_TEST>
            </FOR_EACH>
            <SET Var="col" FromValue="{int(sum($col+1))}"/>
            <TO_DOCVAR AssignToVar="colTemp">
              <Column Value="{concat('T',$T,'_ter_',$col)}" NewValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}"/>
            </TO_DOCVAR>
            <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
            <SET Var="selectValue" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value} as {$colTemp/@Value} , {$selectValue}"/>
            <IF_TEST Test="lowerCase($columns/dataType/@Value)='date'">
              <THEN>
                <SET Var="dateCols" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}#{$dateCols}"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="lowerCase($columns/dataType/@Value)='datetime' or lowerCase($columns/dataType/@Value)='timestamp'">
              <THEN>
                <SET Var="dateTimeCols" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}#{$dateTimeCols}"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="lowerCase($columns/dataType/@Value)='perioddate'">
              <THEN>
                <SET Var="periodDateCols" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}#{$periodDateCols}"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="lowerCase($columns/dataType/@Value)='periodtimestamp6' or lowerCase($columns/dataType/@Value)='periodtimestamp'">
              <THEN>
                <SET Var="periodTimeCols" FromValue="{$columns/dbName/@Value}.{$columns/tableNamePhy/@Value}.{$columns/columnNamePhy/@Value}#{$periodTimeCols}"/>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
          <IF_TEST Test="$curElem/tableRank/@Value =1">
            <THEN>
              <SET FromValue="{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value} " Var="tableValue"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="$curElem/serviceName/@Value='BCM_MASTER'">
            <THEN>
              <SET Var="SYS_ENT_STATE" FromValue="{concat('(',' ')}{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}.SYS_ENT_STATE='ACTIVE' OR {$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}.SYS_ENT_STATE is null) AND {$SYS_ENT_STATE}"/>
            </THEN>
          </IF_TEST>
          <!--include key colums in query-->
          <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="params">
            <SET Var="dbDotTabName1" FromValue="{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}."/>
            <SET Var="columnValue" FromValue="{substringAfter($params/@Value,$dbDotTabName1)}"/>
            <IF_TEST Test="contains(trim($params/@Value),$dbDotTabName1)">
              <THEN>
                <SET Var="col" FromValue="{int(sum($col+1))}"/>
                <TO_DOCVAR AssignToVar="colTemp">
                  <Column Value="{concat('T',$T,'_ter_',$col)}" NewValue="{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}.{$columnValue}"/>
                </TO_DOCVAR>
                <ADD_CHILDREN DocVar="colAliasRel" FromDocVar="colTemp"/>
                <SET Var="selectValue" FromValue="{$params/@Value} as {$colTemp/@Value} , {$selectValue}"/>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
          <!--include key colums in query-->
        </FOR_EACH>
        <IF_TEST Test="$tableRowId/*!=null">
          <THEN>
            <SET Var="test" FromValue="{$tableRowId/*/ID/@Value}"/>
            <SET Var="selectValue" FromValue=""/>
            <SET Var="temp" FromValue="{strSplit($test/@Value,',')}"/>
            <FOR_EACH SelectList="$temp/*" CurrentElement="params">
              <SET Var="columnVar" FromValue="{$params/@Value}"/>
              <SET Var="colTemp" FromValue="{$colAliasRel/Column[@NewValue=$columnVar]/@Value}"/>
              <IF_TEST Test="$selectValue/@Value=''">
                <THEN>
                  <SET Var="selectValue" FromValue="{$params/@Value} as {$colTemp/@Value}"/>
                </THEN>
                <ELSE>
                  <SET Var="selectValue" FromValue="{$params/@Value} as {$colTemp/@Value} , {$selectValue}"/>
                </ELSE>
              </IF_TEST>
            </FOR_EACH>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="(strlen($SYS_ENT_STATE) > 1)">
          <THEN>
            <SET Var="SYS_ENT_STATE" FromValue=" AND {strReplaceAll($SYS_ENT_STATE,'AND null','')}"/>
          </THEN>
          <ELSE>
            <SET Var="SYS_ENT_STATE" FromValue=""/>
          </ELSE>
        </IF_TEST>
        <!--get joins involved-->
        <GET_DOCUMENT Name="cwJoinColumns" ServiceName="USER_SECURITY" AssignToVar="cwJoinColumns" ReturnRowCount="yes" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <ORDER_BY>
            <sequence Sort="Ascending"/>
          </ORDER_BY>
        </GET_DOCUMENT>
        <FOR_EACH SelectList="$cwJoinColumns/cwJoinColumns" CurrentElement="joins">
          <IF_TEST Test="indexOf($tableValue,concat($joins/LHS_DB_Name/@Value,'.',$joins/LHS_TableName_Phy/@Value)) >= '0'">
            <THEN>
              <SET Var="joinLeftTable" FromValue="{$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}"/>
              <IF_TEST Test="$joinValue != null and indexOf($joinValue,concat($joinLeftTable,' ')) >= '0'">
                <THEN>
                  <SET Var="joinRightTable" FromValue="{$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}"/>
                  <IF_TEST Test="indexOf($joinValue,concat($joinRightTable,' ')) >= '0' or indexOf($tableValue,$joinRightTable) >='0'">
                    <THEN>
                      <SET Var="joinValue" FromValue="{$joinValue} and {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                    </THEN>
                    <ELSE>
                      <SET Var="joinValue" FromValue="{$joinValue} {$joins/Join_Type/@Value} {$joinRightTable/@Value} on {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                    </ELSE>
                  </IF_TEST>
                </THEN>
                <ELSE>
                  <SET Var="joinValue" FromValue="{$joinValue} {$joins/Join_Type/@Value} {$joinLeftTable/@Value} on {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                </ELSE>
              </IF_TEST>
            </THEN>
            <ELSE>
              <SET Var="joinLeftTable" FromValue="{$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}"/>
              <IF_TEST Test="$joinValue != null and indexOf($joinValue,concat($joinLeftTable,' ')) >= '0'">
                <THEN>
                  <SET Var="joinRightTable" FromValue="{$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}"/>
                  <IF_TEST Test="indexOf($joinValue,concat($joinRightTable,' ')) >= '0' or indexOf($tableValue,$joinRightTable) >='0'">
                    <THEN>
                      <SET Var="joinValue" FromValue="{$joinValue} and {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                    </THEN>
                    <ELSE>
                      <SET Var="joinValue" FromValue="{$joinValue} {$joins/Join_Type/@Value} {$joinRightTable/@Value} on {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                    </ELSE>
                  </IF_TEST>
                </THEN>
                <ELSE>
                  <SET Var="joinValue" FromValue="{$joinValue} {$joins/Join_Type/@Value} {$joinLeftTable/@Value} on {$joins/LHS_DB_Name/@Value}.{$joins/LHS_TableName_Phy/@Value}.{$joins/LHS_ColumnName_Phy/@Value} {$joins/Comparison_Operator/@Value} {$joins/RHS_DB_Name/@Value}.{$joins/RHS_TableName_Phy/@Value}.{$joins/RHS_ColumnName_Phy/@Value}"/>
                </ELSE>
              </IF_TEST>
            </ELSE>
          </IF_TEST>
        </FOR_EACH>
        <IF_TEST Test="(strlen($joinValue) > 1)">
          <THEN>
            <SET Var="joinValue" FromValue="{strReplaceAll($joinValue,'AND null','')}"/>
          </THEN>
        </IF_TEST>
        <SET Var="temporalQuery" FromValue=""/>
        <IF_TEST Test="$thisParam/IsTemporalTable/@Value = 'true'">
          <THEN>
            <IF_TEST Test="$thisParam/IsTransactionTimeTemporalTable/@Value = 'true'">
              <THEN>
                <SET Var="temporalQuery" FromValue="NONSEQUENCED TRANSACTIONTIME "/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$thisParam/IsValidTimeTemporalTable/@Value = 'true'">
              <THEN>
                <IF_TEST Test="strlen($temporalQuery) > 0">
                  <THEN>
                    <SET Var="temporalQuery" FromValue="{$temporalQuery} AND NONSEQUENCED VALIDTIME "/>
                  </THEN>
                  <ELSE>
                    <SET Var="temporalQuery" FromValue="NONSEQUENCED VALIDTIME "/>
                  </ELSE>
                </IF_TEST>
              </THEN>
            </IF_TEST>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="$thisParam/showHistory/@Value='true'">
          <THEN>
            <SET Var="temporalQuery" FromValue=""/>
          </THEN>
        </IF_TEST>
        <!--SET Var="joinValue" FromValue="{strReplaceAll($joinValue,'null' ,' AND')}"/-->
        <SET Var="queryString" FromValue="{$temporalQuery}select {strReplaceAll($selectValue,', null','')} from {strReplaceAll($tableValue,', null','')} {$joinValue}"/>
        <SET Var="queryString" FromValue="{strReplaceAll($queryString,'null','')}"/>
        <!--pagination-->
        <SET Var="paginateStart" FromValue="{int(ifElse($thisParam/PARAMS/START_COUNT/@Value = null, 0, $thisParam/PARAMS/START_COUNT/@Value))}"/>
        <!--pagination-->
        <!-- multi sort-->
        <IF_TEST Test="$thisParam/PARAMS/MULTISORT_XML/@Value!=null and $thisParam/PARAMS/MULTISORT_XML/@Value!=''">
          <THEN>
            <STRING_TO_XML DocVar="orderByXmlTemp" FromValue="{string($thisParam/PARAMS/MULTISORT_XML/@Value)}"/>
            <FOR_EACH SelectList="$orderByXmlTemp/*" CurrentElement="curElem">
              <SET Var="OrderB" FromValue="{$OrderB}, {$curElem/name()} {strReplaceAll(strReplaceAll($curElem/@Sort,'Descending','DESC'),'Ascending','ASC')}"/>
            </FOR_EACH>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="(strlen($OrderB) > 3)">
          <THEN>
            <SET Var="OrderB" FromValue="ORDER BY {$OrderB}"/>
          </THEN>
          <ELSE>
            <FOR_EACH SelectList="$thisParam/PARAMS/rowId" CurrentElement="curElem">
              <SET Var="OrderB" FromValue=" {$curElem/@Value} ASC, {$OrderB}"/>
            </FOR_EACH>
            <SET Var="OrderB" FromValue=" ORDER BY {$OrderB}"/>
          </ELSE>
        </IF_TEST>
        <SET Var="OrderB" FromValue="{strReplaceAll($OrderB,'null,','')}"/>
        <!-- multi sort-->
        <!--filtering/ serch-->
        <FOR_EACH SelectList="$tableProperties/*" CurrentElement="whereParams">
          <SET DocVar="whereParams" Attribute="MatchBy" FromValue="CONTAINS"/>
        </FOR_EACH>
        <FORM_SEARCH_FILTER Value="{$thisParam/PARAMS}" AssignToVar="tableProperties">
          <TO_XML SelectList="$tableProperties/*"/>
        </FORM_SEARCH_FILTER>
        <SET Var="filterCondition" FromValue=""/>
        <FOR_EACH SelectList="$tableProperties/FILTER/*" CurrentElement="params">
          <IF_TEST Test="contains($periodDateCols,trim($params/name()))">
            <THEN>
              <SET Var="dbFormat" FromValue="MM/dd/yyyy"/>
              <SET Var="dateFormat" FromValue="MM/dd/yyyy"/>
              <SET Var="dateValue" FromValue="{trim($params/@Value)}"/>
              <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="nativeReturn">
                <PARAM Var="dateValue" Caption="date"/>
                <PARAM Var="dateFormat" Caption="format"/>
                <PARAM Var="dbFormat" Caption="dbFormat"/>
              </NATIVE_FUNCTION>
              <SET Var="filterCondition" FromValue="(BEGIN({$params/name()}) &lt;= CAST('{trim($nativeReturn)}' AS DATE FORMAT 'MM/dd/yyyy') AND END({$params/name()}) > CAST('{trim($nativeReturn)}' AS DATE FORMAT 'MM/dd/yyyy') )  AND"/>
              <CONTINUE/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="contains($periodTimeCols,trim($params/name()))">
            <THEN>
              <SET Var="timeValue" FromValue="{trim($params/@Value)}"/>
              <SET Var="timeFormat" FromValue="MM/dd/yyyy HH:mm:ss"/>
              <SET Var="dbFormat" FromValue="MM/dd/yyyy HH:mm:ss"/>
              <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="nativeReturn">
                <PARAM Var="timeValue" Caption="date"/>
                <PARAM Var="timeFormat" Caption="format"/>
                <PARAM Var="dbFormat" Caption="dbFormat"/>
              </NATIVE_FUNCTION>
              <SET Var="filterCondition" FromValue="{$filterCondition} (BEGIN({$params/name()}) &lt;= '{trim($nativeReturn)}' (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS') AND END({$params/name()}) > '{trim($nativeReturn)}' (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS') )  AND"/>
              <CONTINUE/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="contains($dateCols,trim($params/name()))">
            <THEN>
              <SET Var="dbFormat" FromValue="MM/dd/yyyy"/>
              <SET Var="dateFormat" FromValue="MM/dd/yyyy"/>
              <SET Var="dateValue" FromValue="{trim($params/@Value)}"/>
              <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="nativeReturn">
                <PARAM Var="dateValue" Caption="date"/>
                <PARAM Var="dateFormat" Caption="format"/>
                <PARAM Var="dbFormat" Caption="dbFormat"/>
              </NATIVE_FUNCTION>
              <SET Var="filterCondition" FromValue="{$filterCondition} {$params/name()} = CAST('{trim($nativeReturn)}' AS DATE FORMAT 'MM/dd/yyyy')"/>
            </THEN>
            <ELSE>
              <IF_TEST Test="contains($dateTimeCols,trim($params/name()))">
                <THEN>
                  <SET Var="timeValue" FromValue="{trim($params/@Value)}"/>
                  <SET Var="timeFormat" FromValue="MM/dd/yyyy HH:mm:ss"/>
                  <SET Var="dbFormat" FromValue="MM/dd/yyyy HH:mm:ss"/>
                  <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="nativeReturn">
                    <PARAM Var="timeValue" Caption="date"/>
                    <PARAM Var="timeFormat" Caption="format"/>
                    <PARAM Var="dbFormat" Caption="dbFormat"/>
                  </NATIVE_FUNCTION>
                  <SET Var="nativeReturn1" FromValue="{subString($nativeReturn,0,strlen($nativeReturn/@Value)-2)}59"/>
                  <SET Var="filterCondition" FromValue="{$filterCondition} ({$params/name()} >= '{trim($nativeReturn)}' (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS')) AND ({$params/name()} &lt;= '{trim($nativeReturn1)}' (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS'))"/>
                  <!--<SET Var="filterCondition" FromValue="{$filterCondition} {$params/name()} = '{trim($nativeReturn)}' (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS')"/>-->
                </THEN>
                <ELSE>
                  <IF_TEST Test="$params/@MatchBy='EQUAL'">
                    <THEN>
                      <SET Var="filterCondition" FromValue="{$filterCondition} {$params/name()} = '{$params/@Value}'"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$params/@MatchBy='STARTS_WITH'">
                    <THEN>
                      <SET Var="filterCondition" FromValue="{$filterCondition} {$params/name()} LIKE '{$params/@Value}%'"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$params/@MatchBy='ENDS_WITH'">
                    <THEN>
                      <SET Var="filterCondition" FromValue="{$filterCondition} {$params/name()} LIKE '%{$params/@Value}'"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$params/@MatchBy='CONTAINS'">
                    <THEN>
                      <SET Var="filterCondition" FromValue="{$filterCondition} {$params/name()} LIKE '%{$params/@Value}%'"/>
                    </THEN>
                  </IF_TEST>
                </ELSE>
              </IF_TEST>
            </ELSE>
          </IF_TEST>
          <SET Var="filterCondition" FromValue="{$filterCondition} AND"/>
        </FOR_EACH>
        <IF_TEST Test="ends-with($filterCondition,' AND')">
          <THEN>
            <SET Var="filterCondition" FromValue="{subString($filterCondition,0,(strlen($filterCondition)-4))}"/>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="strlen($adFilterExp/Advanced_Exp/@Value)>0">
          <THEN>
            <SET Var="filAnd" FromValue="{ifElse(strlen($filterCondition) > 1,'AND','')}"/>
            <IF_TEST Test="contains($adFilterExp/Advanced_Exp/@Value,'AS_ON')">
              <THEN>
                <SET Var="filterColumnName" FromValue="{trim(substringBefore($adFilterExp/Advanced_Exp/@Value,'AS_ON'))}"/>
                <SET Var="filterColumValue" FromValue="{trim(substringBefore(substringAfter($adFilterExp/Advanced_Exp/@Value,'AS_ON'),'(timestamp(0)'))}"/>
                <SET Var="filterCondition" FromValue="{$filterCondition} (BEGIN({$filterColumnName/@Value}) &lt;= {$filterColumValue} (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS') AND END({$filterColumnName/@Value}) > {trim($filterColumValue)} (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS') )"/>
                <SET Var="filterCondition" FromValue="{$filterCondition} {$filAnd}"/>
              </THEN>
              <ELSE>
                <SET Var="filterCondition" FromValue="{$filterCondition} {$filAnd} {$adFilterExp/Advanced_Exp/@Value}"/>
              </ELSE>
            </IF_TEST>
          </THEN>
        </IF_TEST>
        <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
          <THEN>
            <!--Monsanto-->
            <!--SET Var="versionId" FromValue="{substringAfter($thisParam/PARAMS/ID/@Value,'verId=')}"/-->
            <IF_TEST Test="$versionId = null or $versionId = ''">
              <THEN>
                <SET Var="versionId" FromValue="{$thisParam/PARAMS/VerId/@Value}"/>
              </THEN>
            </IF_TEST>
            <SET Var="rowId1" FromValue="{$thisParam/PARAMS/rowId[1]/@Value}"/>
            <SET Var="rowId2" FromValue="{$thisParam/PARAMS/rowId[2]/@Value}"/>
            <IF_TEST Test="contains($rowId1, 'SYS_VER_ID')">
              <THEN>
                <SET Var="filterCondition" FromValue="{concat($thisParam/PARAMS/rowId[1]/@Value,' = ',$versionId)}"/>
                <SET Var="nodeIdVal" FromValue="{$rowId2}"/>
                <SET Var="verIdVal" FromValue="{$rowId1}"/>
              </THEN>
              <ELSE>
                <IF_TEST Test="contains($rowId2, 'SYS_VER_ID')">
                  <THEN>
                    <SET Var="filterCondition" FromValue="{concat($thisParam/PARAMS/rowId[2]/@Value,' = ',$versionId)}"/>
                    <SET Var="nodeIdVal" FromValue="{$rowId1}"/>
                    <SET Var="verIdVal" FromValue="{$rowId2}"/>
                  </THEN>
                </IF_TEST>
              </ELSE>
            </IF_TEST>
          </THEN>
        </IF_TEST>
        <SET Var="isShowChildSibling" FromValue="false"/>
        <IF_TEST Test="$thisParam/PARAMS/HIERARCHY_ACTION/@Value='showChild'">
          <THEN>
            <SET Var="isShowChildSibling" FromValue="true"/>
            <IF_TEST Test="$thisParam/PARAMS/REL_ID/@Value != ''">
              <THEN>
                <SET Var="romId" FromValue="{$thisParam/PARAMS/REL_ID/@Value}"/>
              </THEN>
              <ELSE>
                <SET Var="romId" FromValue="{$thisParam/PARAMS/ROM_ID/@Value}"/>
              </ELSE>
            </IF_TEST>
            <GET_DOC_SMART Name="RelationalObjectMap" AssignToVar="trgtTblRo" ServiceName="BCM_MASTER">
              <SELECT>
                <TargetTableRelObjId/>
              </SELECT>
              <RomId Value="{$romId/@Value}"/>
            </GET_DOC_SMART>
            <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
              <THEN>
                <GET_DOC_SMART Name="RelationalObject" AssignToVar="relTblName" ServiceName="BCM_MASTER">
                  <SELECT>
                    <PhysicalTableNameVersion/>
                  </SELECT>
                  <RoId Value="{$trgtTblRo/RelationalObjectMap/TargetTableRelObjId/@Value}"/>
                </GET_DOC_SMART>
                <SET Var="relTblName_str" FromValue="{$relTblName/RelationalObject/PhysicalTableNameVersion/@Value}"/>
              </THEN>
              <ELSE>
                <GET_DOC_SMART Name="RelationalObject" AssignToVar="relTblName" ServiceName="BCM_MASTER">
                  <SELECT>
                    <PhysicalTableName/>
                  </SELECT>
                  <RoId Value="{$trgtTblRo/RelationalObjectMap/TargetTableRelObjId/@Value}"/>
                </GET_DOC_SMART>
                <SET Var="relTblName_str" FromValue="{$relTblName/RelationalObject/PhysicalTableName/@Value}"/>
              </ELSE>
            </IF_TEST>
            <SET Var="quot" FromValue="'"/>
            <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
              <THEN>
                <EXECUTE_SQL_QUERY AssignToVar="dbName_rel" Value="LOCKING ROW FOR ACCESS SELECT PHYSICAL_DB FROM SYS_DB_MAP WHERE LOGICAL_DB='BCM_VERSION_STAGING'"/>
              </THEN>
              <ELSE>
                <EXECUTE_SQL_QUERY AssignToVar="dbName_rel" Value="LOCKING ROW FOR ACCESS SELECT PHYSICAL_DB FROM SYS_DB_MAP WHERE LOGICAL_DB='BCM_MASTER'"/>
              </ELSE>
            </IF_TEST>
            <IF_TEST Test="$thisParam/PARAMS/ID/@Value != null">
              <THEN>
                <SET Var="pkVal" FromValue="{$thisParam/PARAMS/ID/@Value}"/>
                <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
                  <THEN>
                    <SET Var="pkVal" FromValue="{trim(substringBefore(substringAfter($thisParam/PARAMS/ID/@Value,'NODE_ID='),'#'))}"/>
                  </THEN>
                </IF_TEST>
              </THEN>
              <ELSE>
                <SET Var="pkVal" FromValue="{$thisParam/PARAMS/SELECTED_PK_VALUE/@Value}"/>
              </ELSE>
            </IF_TEST>
            <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
              <THEN>
                <SET Var="verIdRelVal" FromValue="{concat($dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$relTblName_str,'.','SYS_VER_ID')}"/>
                <!--SET Var="whereCondition" FromValue="{concat('(',$nodeIdVal,' IN (SELECT NODE_ID FROM ',$dbName_rel/SQL_RESULT/DatabaseName/@Value,'.',$relTblName_str,' WHERE PARENT_NODE_ID=',$quot,$pkVal,$quot,')) ')}"/-->
                <!--SET Var="whereCondition" FromValue="{concat('(',$nodeIdVal,' IN (SELECT NODE_ID FROM ',$dbName_rel/SQL_RESULT/DatabaseName/@Value,'.',$relTblName_str,' WHERE PARENT_NODE_ID=',$quot,$pkVal,$quot, ') AND ',$verIdVal,' = ',$thisParam/PARAMS/VerId/@Value,')')}"/-->
                <SET Var="whereCondition" FromValue="{concat('(',$nodeIdVal,' IN (SELECT NODE_ID FROM ',$dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$relTblName_str,' WHERE PARENT_NODE_ID=',$quot,$pkVal,$quot, ' AND ',$verIdRelVal,' = ',$thisParam/PARAMS/VerId/@Value,') AND ',$verIdVal,' = ',$thisParam/PARAMS/VerId/@Value,') AND ')}"/>
              </THEN>
              <ELSE>
                <SET Var="whereCondition" FromValue="{concat('(',$columnValue,' IN (SELECT NODE_ID FROM ',$dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$relTblName_str,' WHERE PARENT_NODE_ID=',$quot,$pkVal,$quot,')) AND ')}"/>
              </ELSE>
            </IF_TEST>
          </THEN>
        </IF_TEST>
        <!-- END: Action: showChild -->
        <!-- START: Action: showSiblings -->
        <IF_TEST Test="$thisParam/PARAMS/HIERARCHY_ACTION/@Value='showSib'">
          <THEN>
            <SET Var="isShowChildSibling" FromValue="true"/>
            <GET_DOC_SMART Name="RelationalObjectMap" AssignToVar="trgtTblRo" ServiceName="BCM_MASTER">
              <SELECT>
                <TargetTableRelObjId/>
              </SELECT>
              <RomId Value="{$thisParam/PARAMS/ROM_ID/@Value}"/>
            </GET_DOC_SMART>
            <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
              <THEN>
                <GET_DOC_SMART Name="RelationalObject" AssignToVar="relTblName" ServiceName="BCM_MASTER">
                  <SELECT>
                    <PhysicalTableNameVersion/>
                  </SELECT>
                  <RoId Value="{$trgtTblRo/RelationalObjectMap/TargetTableRelObjId/@Value}"/>
                </GET_DOC_SMART>
                <SET Var="relTblName_str" FromValue="{$relTblName/RelationalObject/PhysicalTableNameVersion/@Value}"/>
              </THEN>
              <ELSE>
                <GET_DOC_SMART Name="RelationalObject" AssignToVar="relTblName" ServiceName="BCM_MASTER">
                  <SELECT>
                    <PhysicalTableName/>
                  </SELECT>
                  <RoId Value="{$trgtTblRo/RelationalObjectMap/TargetTableRelObjId/@Value}"/>
                </GET_DOC_SMART>
                <SET Var="relTblName_str" FromValue="{$relTblName/RelationalObject/PhysicalTableName/@Value}"/>
              </ELSE>
            </IF_TEST>
            <SET Var="quot" FromValue="'"/>
            <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
              <THEN>
                <EXECUTE_SQL_QUERY AssignToVar="dbName_rel" Value="LOCKING ROW FOR ACCESS SELECT PHYSICAL_DB FROM SYS_DB_MAP WHERE LOGICAL_DB='BCM_VERSION_STAGING'"/>
              </THEN>
              <ELSE>
                <EXECUTE_SQL_QUERY AssignToVar="dbName_rel" Value="LOCKING ROW FOR ACCESS SELECT PHYSICAL_DB FROM SYS_DB_MAP WHERE LOGICAL_DB='BCM_MASTER'"/>
              </ELSE>
            </IF_TEST>
            <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
              <THEN>
				<SET Var="pkVal" FromValue="{trim(substringBefore(substringAfter($thisParam/PARAMS/ID/@Value,'NODE_ID='),'#'))}"/>
                <SET Var="verIdRelVal" FromValue="{concat($dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$relTblName_str,'.','SYS_VER_ID')}"/>
                <!--SET Var="whereCondition" FromValue="{concat('(',$nodeIdVal,' IN (SELECT NODE_ID FROM ',$dbName_rel/SQL_RESULT/DatabaseName/@Value,'.',$relTblName_str,' WHERE PARENT_NODE_ID=',$quot,$thisParam/PARAMS/SELECTED_PARENT_NODE_ID/@Value,$quot,')) ')}"/-->
                <!--SET Var="whereCondition" FromValue="{concat('(',$nodeIdVal,' IN (SELECT NODE_ID FROM ',$dbName_rel/SQL_RESULT/DatabaseName/@Value,'.',$relTblName_str,' WHERE PARENT_NODE_ID=',$quot,$thisParam/PARAMS/SELECTED_PARENT_NODE_ID/@Value,$quot,') AND ',$verIdRelVal,' = ',$thisParam/PARAMS/VerId/@Value,') ')}"/-->
                <SET Var="whereCondition" FromValue="{concat('(',$nodeIdVal,' IN (SELECT NODE_ID FROM ',$dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$relTblName_str,' WHERE PARENT_NODE_ID=(SELECT PARENT_NODE_ID FROM ',$dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$relTblName_str,' WHERE NODE_ID = ',$quot,$pkVal,$quot,' AND ',$verIdRelVal,' = ',$thisParam/PARAMS/VerId/@Value, ') AND ',$verIdRelVal,' = ',$thisParam/PARAMS/VerId/@Value,') AND ',$verIdVal,' = ',$thisParam/PARAMS/VerId/@Value,') AND ')}"/>
              </THEN>
              <ELSE>
                <IF_TEST Test="$thisParam/PARAMS/ID/@Value != '' ">
                  <THEN>
                    <SET Var="whereCondition" FromValue="{concat('(',$columnValue,' IN (SELECT NODE_ID FROM ',$dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$relTblName_str,' WHERE PARENT_NODE_ID=(SELECT PARENT_NODE_ID FROM ',$dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$relTblName_str,' WHERE NODE_ID = ',$quot,$thisParam/PARAMS/ID/@Value,$quot,'))) AND ')}"/>
                  </THEN>
                </IF_TEST>
              </ELSE>
            </IF_TEST>
          </THEN>
          <ELSE>
            <IF_TEST Test="$thisParam/PARAMS/HIERARCHY_ACTION/@Value='showPeers'">
              <THEN>
                <EXECUTE_SQL_QUERY AssignToVar="tgtTable" Value="LOCKING ROW FOR ACCESS SELECT MST_TBL_PHY_NAME, VER_TBL_PHY_NAME FROM MST_RELATIONAL_OBJECT WHERE RO_ID = ( SEL TGT_TBL_RO_ID FROM MST_REL_OBJ_MAP WHERE ROM_ID = '{$thisParam/PARAMS/ROM_ID/@Value}')" ReturnRowCount="yes"/>
                <SET Var="phyTableName" FromValue="{$tgtTable/SQL_RESULT/MST_TBL_PHY_NAME/@Value}"/>
                <IF_TEST Test="$thisParam/PARAMS/VerId != null and $thisParam/PARAMS/VerId != ''">
                  <THEN>
                    <SET Var="phyTableName" FromValue="{$tgtTable/SQL_RESULT/VER_TBL_PHY_NAME/@Value}"/>
                    <EXECUTE_SQL_QUERY AssignToVar="dbName_rel" Value="LOCKING ROW FOR ACCESS SELECT PHYSICAL_DB FROM SYS_DB_MAP WHERE LOGICAL_DB='BCM_VERSION_STAGING'"/>
                    <SET Var="verQuery" FromValue=" WHERE {$dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value}.{$phyTableName}.SYS_VER_ID='{$thisParam/PARAMS/VerId/@Value}'" />
                  </THEN>
                  <ELSE>
                    <SET Var="phyTableName" FromValue="{$tgtTable/SQL_RESULT/MST_TBL_PHY_NAME/@Value}"/>
                    <EXECUTE_SQL_QUERY AssignToVar="dbName_rel" Value="LOCKING ROW FOR ACCESS SELECT PHYSICAL_DB FROM SYS_DB_MAP WHERE LOGICAL_DB='BCM_MASTER'"/>
                    <SET Var="verQuery" FromValue="" />
                  </ELSE>
                </IF_TEST>
                <IF_TEST Test="$thisParam/PARAMS/H_ID/@Value != null">
                  <THEN>
                    <EXECUTE_SQL_QUERY AssignToVar="roLevel" Value="LOCKING ROW FOR ACCESS SELECT LVL FROM HIERARCHY_RO_LVL WHERE HIERARCHY_ID={$thisParam/PARAMS/H_ID/@Value} AND RO_ID={$thisParam/PARAMS/RO_ID/@Value}"/>
                    <IF_TEST Test="$roLevel/SQL_RESULT/LVL/@Value = '1'">
                      <THEN>
                        <SET Var="whereCondition" FromValue="{concat('(',$columnValue,' IN (SELECT DISTINCT PARENT_NODE_ID FROM ',$dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$phyTableName,$verQuery,')) AND ')}"/>
                      </THEN>
                      <ELSE>
                        <SET Var="whereCondition" FromValue="{concat('(',$columnValue,' IN (SELECT DISTINCT NODE_ID FROM ',$dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$phyTableName,$verQuery,'))  AND ')}"/>
                      </ELSE>
                    </IF_TEST>
                  </THEN>
                  <ELSE>
                    <SET Var="whereCondition" FromValue="{concat('(',$columnValue,' IN (SELECT DISTINCT NODE_ID FROM ',$dbName_rel/SQL_RESULT/PHYSICAL_DB/@Value,'.',$phyTableName,$verQuery,')) AND ')}"/>
                  </ELSE>
                </IF_TEST>
              </THEN>
            </IF_TEST>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="strlen($filExp/*/@Value)>0">
          <THEN>
            <SET Var="filAnd" FromValue="{ifElse(strlen($filterCondition) > 1,'AND','')}"/>
            <SET Var="filterCondition" FromValue="{$filterCondition} {$filAnd} {$filExp/*/@Value}"/>
          </THEN>
        </IF_TEST>
        <!--filtering/ serch-->
        <IF_TEST Test="(strlen($filterCondition) > 1)">
          <THEN>
            <IF_TEST Test="($whereCondition/@Value!=null and (strlen($joinValue) > 1)) or $isShowChildSibling ='true'">
              <THEN>
                <SET Var="queryString" FromValue="{$queryString} where {$whereCondition} {$filterCondition} {$SYS_ENT_STATE} {$OrderB}"/>
              </THEN>
              <ELSE>
                <SET Var="queryString" FromValue="{$queryString} where {$filterCondition} {$SYS_ENT_STATE} {$OrderB}"/>
              </ELSE>
            </IF_TEST>
          </THEN>
          <ELSE>
            <SET Var="SYS_ENT_STATE" FromValue="{substringAfter($SYS_ENT_STATE,'AND')}"/>
            <IF_TEST Test="$whereCondition/@Value!=null">
              <THEN>
                <IF_TEST Test="strlen($SYS_ENT_STATE)=0 and ends-with($whereCondition,'and ')">
                  <THEN>
                    <SET Var="whereCondition" FromValue="{subString($whereCondition,0,strlen($whereCondition)-4)} "/>
                  </THEN>
                </IF_TEST>
                <SET Var="queryString" FromValue="{$queryString} where {$whereCondition} {$SYS_ENT_STATE} {$OrderB}"/>
              </THEN>
              <ELSE>
                <IF_TEST Test="(strlen($SYS_ENT_STATE) > 1)">
                  <THEN>
                    <SET Var="queryString" FromValue="{$queryString} where {$SYS_ENT_STATE} {$OrderB}"/>
                  </THEN>
                  <ELSE>
                    <SET Var="queryString" FromValue="{$queryString} {$SYS_ENT_STATE} {$OrderB}"/>
                  </ELSE>
                </IF_TEST>
              </ELSE>
            </IF_TEST>
          </ELSE>
        </IF_TEST>
        <EXECUTE_SQL_QUERY StartAtRow="{$paginateStart} " Value="{$queryString}" AssignToVar="queryResult" ReturnRowCount="yes" MaxRows="{$thisParam/maxRows/@Value} "/>
        <XML_TO_STRING FromDocVar="queryResult" DocVar="queryResultString"/>
        <SET FromValue="0" Var="T"/>
        <!--FOR_EACH SelectList="$thisParam/PARAMS/cwSearchResultsTables/RESPONSE/*" CurrentElement="curElem">
          <SET FromValue="{int(sum($T+1))}" Var="T"/>
          <SET FromValue="{$curElem/dbName/@Value}.{$curElem/tableNamePhy/@Value}." Var="TName"/>
          <SET FromValue="T{$T}_" Var="replaceString"/>
          <SET FromValue="{strReplaceAll($queryResultString,$replaceString,$TName)}" Var="queryResultString"/>
        </FOR_EACH-->
        <FOR_EACH SelectList="$colAliasRel/Column" CurrentElement="curElem">
          <SET Var="toReplace" FromValue="&lt;{$curElem/@Value} "/>
          <SET Var="replaceWith" FromValue="&lt;{$curElem/@NewValue} "/>
          <SET FromValue="{strReplaceAll($queryResultString,$toReplace,$replaceWith)}" Var="queryResultString"/>
        </FOR_EACH>
        <STRING_TO_XML FromDocVar="queryResultString" DocVar="responseXML"/>
        <ADD_CHILDREN DocVar="thisReturn" FromSelectList="$responseXML/*"/>
        <!--pagination-->
        <SET DocVar="thisReturn" Attribute="StartRowCount" FromValue="{$paginateStart}"/>
        <SET DocVar="thisReturn" Attribute="TotalRowCount" FromValue="{$queryResult/@TotalRowCount}"/>
        <!--pagination-->
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getReqAsTableDotColumnName">
    <RULE>
      <ACTION>
        <SET FromValue="&lt;{$thisParam/*/name()}/>" Var="tableRowstring"/>
        <STRING_TO_XML FromValue="{string($tableRowstring/@Value)}" DocVar="tableRow"/>
        <FOR_EACH SelectList="$thisParam/*/*" CurrentElement="props">
          <SET FromValue="{$props/@Value}" Var="propValue"/>
          <IF_TEST Test="strlen(trim($propValue/@Value)) > 0 and ($propValue/@Value != null or $propValue/@Value != 'null')">
            <THEN>
              <SET FromValue="{strReplaceAll(string($props/@Value),'\'','&amp;apos;')}" Var="propValue"/>
              <SET FromValue="&lt;{$thisParam/*/name()}.{$props/name()} Value='{$propValue}'/>" Var="propName12"/>
              <STRING_TO_XML FromValue="{string($propName12/@Value)}" DocVar="propXML12"/>
              <ADD_CHILDREN FromVar="propXML12" DocVar="tableRow"/>
            </THEN>
            <ELSE/>
          </IF_TEST>
        </FOR_EACH>
        <ADD_CHILDREN FromVar="tableRow" DocVar="thisReturn"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getLookupData">
    <RULE>
      <ACTION>
        <GET_DOCUMENT AssignToVar="allValidLookup" Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true" Distinct="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <container Value="search"/>
          <fieldType Value="column"/>
          <propName Value="lookupID"/>
          <propValue Value="" MatchBy="NOT_EQUAL"/>
          <SELECT>
            <workflowId/>
            <propValue/>
          </SELECT>
        </GET_DOCUMENT>
        <TO_DOCVAR AssignToVar="tableData">
          <ROOT/>
        </TO_DOCVAR>
        <FOR_EACH SelectList="$allValidLookup/cwSearchResultsConfigAttr" CurrentElement="lookupValue">
          <SET Var="lookupName" FromValue="&lt;T-_-{$lookupValue/propValue/@Value}/>"/>
          <SET Var="lookupName" FromValue="{strReplaceAll($lookupName,' ','')}"/>
          <STRING_TO_XML DocVar="lookupRootXML" FromValue="{string($lookupName/@Value)}"/>
          <REQUEST Name="getCodeMasterValue" ServiceName="USER_SECURITY" AssignToVar="Reference_Code">
            <TYPE_ID Value="{$lookupValue/propValue/@Value}"/>
          </REQUEST>
          <FOR_EACH CurrentElement="curAtr" SelectList="$Reference_Code/*">
            <TO_DOCVAR AssignToVar="dummy">
              <OPTION Value="{$curAtr/VALUE_ID/@Value}" Title="{$curAtr/DESCRIPTION/@Value}" Parent="{$curAtr/PARENT_VALUE_ID/@Value}"/>
            </TO_DOCVAR>
            <ADD_CHILDREN DocVar="lookupRootXML" FromDocVar="dummy"/>
          </FOR_EACH>
          <ADD_CHILDREN DocVar="tableData" FromVar="lookupRootXML"/>
        </FOR_EACH>
        <ADD_CHILDREN DocVar="thisReturn" FromDocVar="tableData"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="checkIsRegistered">
    <RULE>
      <ACTION>
        <SET Var="registred" FromValue="true"/>
        <GET_DOCUMENT AssignToVar="cwSearchResultsTables" Name="cwSearchResultsTables" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <serviceName Value="nonMDM"/>
        </GET_DOCUMENT>
        <FOR_EACH SelectList="$cwSearchResultsTables/cwSearchResultsTables" CurrentElement="tableValue">
          <REQUEST Name="isDocumentRegistered" DbName="{$tableValue/dbName/@Value}" Document="{$tableValue/tableNamePhy/@Value}" AssignToVar="result" ServiceName="BPE_META"/>
          <SET Var="registred1" FromValue="{$result/DOCUMENT_REGISTERED/@Value}"/>
          <IF_TEST Test="$result/DOCUMENT_REGISTERED/@Value='false'">
            <THEN>
              <SET Var="registred" FromValue="false"/>
              <SET Var="tableName" FromValue="{$tableValue/dbName/@Value}.{$tableValue/tableNamePhy/@Value}, {$tableName}"/>
            </THEN>
            <ELSE/>
          </IF_TEST>
        </FOR_EACH>
        <IF_TEST Test="strlen($tableName)>0">
          <THEN>
            <SET Var="tableName" FromValue="{strReplaceAll($tableName,', null','')}"/>
          </THEN>
        </IF_TEST>
        <TO_DOCVAR AssignToVar="thisReturn">
          <ROOT>
            <DOCUMENTS_REGISTERED Value="{$registred}"/>
            <tableName Value="{$tableName}"/>
          </ROOT>
        </TO_DOCVAR>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="checkIsTemporal">
    <RULE>
      <ACTION>
        <SET Var="IsTemporalTable" FromValue="false"/>
        <SET Var="IsValidTimeTemporalTable" FromValue="false"/>
        <SET Var="IsTransactionTimeTemporalTable" FromValue="false"/>
        <GET_DOCUMENT AssignToVar="cwSearchResultsTables" Name="cwSearchResultsTables" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
        </GET_DOCUMENT>
        <FOR_EACH SelectList="$cwSearchResultsTables/cwSearchResultsTables" CurrentElement="tableValue">
          <IF_TEST Test="$tableValue/serviceName/@Value='BCM_MASTER' or $tableValue/serviceName/@Value='BCM_INPUT_STAGING'">
            <THEN>
              <GET_DOC_PROPERTIES ServiceName="{$tableValue/serviceName/@Value}" TableName="{$tableValue/tableName/@Value}" AssignToVar="DocPropertiesVar"/>
            </THEN>
            <ELSE>
              <REQUEST Name="getNonMDMDocumentProperties" AssignToVar="DocPropertiesVar1" ServiceName="BPE_META">
                <NonMDMDocument Value="{$tableValue/tableName/@Value}" DbName="{$tableValue/dbName/@Value}"/>
              </REQUEST>
              <TO_DOCVAR AssignToVar="DocPropertiesVar">
                <RESPONSE>
                  <TO_XML SelectList="$DocPropertiesVar1/NON_MDM_DOCUMENTS/*"/>
                </RESPONSE>
              </TO_DOCVAR>
            </ELSE>
          </IF_TEST>
          <IF_TEST Test="$DocPropertiesVar/DOCUMENT/@IsTemporalTable='true'">
            <THEN>
              <SET Var="IsTemporalTable" FromValue="true"/>
              <IF_TEST Test="$DocPropertiesVar/DOCUMENT/@IsValidTimeTemporalTable='true'">
                <THEN>
                  <SET Var="IsValidTimeTemporalTable" FromValue="true"/>
                </THEN>
              </IF_TEST>
              <IF_TEST Test="$DocPropertiesVar/DOCUMENT/@IsTransactionTimeTemporalTable='true'">
                <THEN>
                  <SET Var="IsTransactionTimeTemporalTable" FromValue="true"/>
                </THEN>
              </IF_TEST>
            </THEN>
            <ELSE>
              <SET Var="IsTemporalTable" FromValue="false"/>
              <SET Var="IsValidTimeTemporalTable" FromValue="false"/>
              <SET Var="IsTransactionTimeTemporalTable" FromValue="false"/>
              <BREAK/>
            </ELSE>
          </IF_TEST>
        </FOR_EACH>
        <TO_DOCVAR AssignToVar="thisReturn">
          <ROOT>
            <IsTemporalTable Value="{$IsTemporalTable}"/>
            <IsValidTimeTemporalTable Value="{$IsValidTimeTemporalTable}"/>
            <IsTransactionTimeTemporalTable Value="{$IsTransactionTimeTemporalTable}"/>
          </ROOT>
        </TO_DOCVAR>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getValidValue">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="lookUpTableData">
          <ROOT/>
        </TO_DOCVAR>
        <GET_VALID_VALUES AssignToVar="validValues" ServiceName="{$thisParam/SRVC_NAME/@Value}">
          <DOCUMENT Name="{$thisParam/tabName/@Value}"/>
        </GET_VALID_VALUES>
        <FOR_EACH CurrentElement="validValue" SelectList="$validValues/*">
          <SET Var="propName" FromValue="&lt;{$validValue/@Document}.{$validValue/@Name}/>"/>
          <STRING_TO_XML DocVar="propXML" FromValue="{string($propName/@Value)}"/>
          <ADD_CHILDREN DocVar="propXML" FromSelectList="$validValue/*"/>
          <ADD_CHILDREN DocVar="thisReturn" FromVar="propXML"/>
        </FOR_EACH>
        <GET_DOC_PROPERTIES ServiceName="{$thisParam/SRVC_NAME/@Value}" TableName="{$thisParam/tabName/@Value}" AssignToVar="DocPropertiesVar"/>
        <FOR_EACH SelectList="$DocPropertiesVar/*/*" CurrentElement="currProp">
          <TO_DOCVAR AssignToVar="fieldValidValues">
            <ValidValues/>
          </TO_DOCVAR>
          <SET_NAME DocVar="fieldValidValues" FromValue="{$DocPropertiesVar/DOCUMENT/@Name}.{$currProp/@Name}"/>
          <IF_TEST Test="strlen($currProp/@ValidValues)!=0">
            <THEN>
              <SET Var="propValidValues" FromValue="{$currProp/@ValidValues}"/>
              <WHILE Condition="contains($propValidValues,'|')">
                <THEN>
                  <TO_DOCVAR AssignToVar="validValueVar">
                    <VALID_VALUE/>
                  </TO_DOCVAR>
                  <SET Var="eachValidValue" FromValue="{substringBefore($propValidValues,'|')}"/>
                  <SET Attribute="Value" DocVar="validValueVar" FromValue="{$eachValidValue}"/>
                  <SET Attribute="Description" DocVar="validValueVar" FromValue="{$eachValidValue}"/>
                  <ADD_CHILDREN DocVar="fieldValidValues" FromDocVar="validValueVar"/>
                  <SET Var="propValidValues" FromValue="{substringAfter($propValidValues,'|')}"/>
                </THEN>
              </WHILE>
              <TO_DOCVAR AssignToVar="validValueVar">
                <Value/>
              </TO_DOCVAR>
              <SET Attribute="Value" DocVar="validValueVar" FromValue="{$propValidValues}"/>
              <SET Attribute="Description" DocVar="validValueVar" FromValue="{$propValidValues}"/>
              <ADD_CHILDREN DocVar="fieldValidValues" FromDocVar="validValueVar"/>
              <ADD_CHILDREN DocVar="thisReturn" FromDocVar="fieldValidValues"/>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="stringToXML">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="tempVar">
          <tempVar/>
        </TO_DOCVAR>
        <SET Property="{$thisParam/tagName/@Value}" DocVar="tempVar" FromValue="{$thisParam/propValue/@Value}"/>
        <ADD_CHILDREN DocVar="thisReturn" FromSelectList="$tempVar/*"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getTableButtonConfig">
    <RULE>
      <ACTION>
        <GET_DOCUMENT AssignToVar="tableConfig" Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <container Value="result"/>
          <fieldType Value="table"/>
          <propName Value="{$thisParam/propName/@Value}-" MatchBy="LIKE"/>
          <SELECT>
            <propName/>
            <propValue/>
          </SELECT>
        </GET_DOCUMENT>
        <TO_DOCVAR AssignToVar="button">
          <ui:button xmlns:ui="http://www.teradata.com/ui" id="{$thisParam/propName/@Value}" name="{$thisParam/propName/@Value}" displayCondition="{$thisParam/customButton/@Value}"/>
        </TO_DOCVAR>
        <FOR_EACH SelectList="$tableConfig/cwSearchResultsConfigAttr" CurrentElement="currElement">
          <IF_TEST Test="$currElement/propValue/@Value != 'NavigateDone'">
            <THEN>
              <IF_TEST Test="substringAfter($currElement/propName/@Value,'-')='submitTo'">
                <THEN>
                  <GET_DOCUMENT Name="LEFT_NAV_URL" ServiceName="USER_SECURITY" HandleException="true" AssignToVar="pages" ReturnRowCount="yes" DirtyRead="true">
                    <PAGE_NAME Value="{$currElement/propValue/@Value}"/>
                    <PAGE_TYPE Value="PAGES"/>
                    <SELECT>
                      <PAGE_URL/>
                    </SELECT>
                  </GET_DOCUMENT>
                  <ADD_ATTRIBUTE DocVar="button" Name="onClick" Value="javascript:onCallCustomButton('{concat($webuiContextPath,$pages/LEFT_NAV_URL/PAGE_URL/@Value)}','{$thisParam/propName/@Value}');"/>
                </THEN>
                <ELSE>
                  <ADD_ATTRIBUTE DocVar="button" Name="{substringAfter($currElement/propName/@Value,'-')}" Value="{$currElement/propValue/@Value}"/>
                </ELSE>
              </IF_TEST>
            </THEN>
            <ELSE>
              <ADD_ATTRIBUTE DocVar="button" Name="onClick" Value="javascript:onCustomDone({$thisParam/propName/@Value});"/>
            </ELSE>
          </IF_TEST>
        </FOR_EACH>
        <TO_DOCVAR AssignToVar="thisReturn">
          <ROOT>
            <TO_XML SelectList="$button"/>
          </ROOT>
        </TO_DOCVAR>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getCustomButtons">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="customButtons">
          <SAMPLE_XML/>
        </TO_DOCVAR>
        <GET_DOCUMENT DirtyRead="true" Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="cButton" ReturnRowCount="yes">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <attributeName Value="resultTable"/>
          <container Value="result"/>
          <fieldType Value="table"/>
          <propName Value="customButton"/>
        </GET_DOCUMENT>
        <FOR_EACH SelectList="$thisParam/tableConfig/customButton-Name" CurrentElement="params">
          <SET Var="buttonName" FromValue="{$params/@Value}"/>
          <REQUEST Name="getTableButtonConfig" ServiceName="UI_WORKFLOW" AssignToVar="tableButtonConfig" HandleException="true">
            <workflowId Value="{$thisParam/workflowId/@Value}"/>
            <propName Value="{$buttonName}"/>
            <customButton Value="{ifElse(strlen($cButton/cwSearchResultsConfigAttr/propValue/@Value)!=0,'true','false')}"/>
          </REQUEST>
          <ADD_CHILDREN DocVar="customButtons" FromSelectList="$tableButtonConfig/*"/>
        </FOR_EACH>
        <TO_DOCVAR AssignToVar="thisReturn">
          <TO_XML SelectList="$customButtons"/>
        </TO_DOCVAR>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <!-- This is used for populating CW_Attb Table-->
  <DEFINE_METHOD Name="populateAttribValues">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="tDetails">
          <ROOT/>
        </TO_DOCVAR>
        <SET Var="attName" FromValue=" "/>
        <IF_TEST Test="$thisParam/ServiceName/@Value!='nonMDM'">
          <THEN>
            <SET Var="attName" FromValue="{$thisParam/resultColumn/@Value}"/>
            <SET Var="tableNameV" FromValue="{ifElse($thisParam/joinCondition/@Value='Explicit Join',substringAfter($thisParam/TableName/@Value,'.'),$thisParam/TableName/@Value)}"/>
            <GET_DOC_PROPERTIES ServiceName="{$thisParam/ServiceName/@Value}" TableName="{$tableNameV}" AssignToVar="tDetails"/>
          </THEN>
          <ELSE>
            <SET Var="attName" FromValue="{$thisParam/resultColumn/@Value}"/>
            <REQUEST Name="getNonMDMDocumentProperties" ServiceName="BPE_META" AssignToVar="DocPropTemp" HandleException="true">
              <NonMDMDocument Value="{$thisParam/tableNamePhy/@Value}" DbName="{$thisParam/dbName/@Value}"/>
            </REQUEST>
            <TO_DOCVAR AssignToVar="tDetails">
              <RESPONSE Status="Success"/>
            </TO_DOCVAR>
            <FOR_EACH SelectList="$DocPropTemp/NON_MDM_DOCUMENTS" CurrentElement="tempCurr">
              <APPEND_CHILDREN FromDocVar="tempCurr" DocVar="tDetails"/>
            </FOR_EACH>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="indexOf($attName,'Master.')>=0 or indexOf($attName,'Input.')>=0">
          <THEN>
            <SET Var="attName" FromValue="{concat($thisParam/dbName/@Value,'.',$thisParam/tableNamePhy/@Value,'.',$thisParam/columnNamePhy/@Value)}"/>
          </THEN>
          <ELSE>
            <SET Var="attName" FromValue="{$attName}"/>
          </ELSE>
        </IF_TEST>
        <FOR_EACH SelectList="$tDetails/DOCUMENT/*" CurrentElement="currElem">
          <SET Var="checkVar" FromValue="{ifElse($thisParam/ServiceName/@Value='nonMDM',$currElem/@Name,$currElem/@ColumnName)}"/>
          <IF_TEST Test="$thisParam/columnNamePhy/@Value=$checkVar">
            <THEN>
              <IF_TEST Test="strlen($currElem/@Refers)!=0">
                <THEN>
                  <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                    <workflowId Value="{$thisParam/workflowId/@Value}"/>
                    <attributeName Value="{$attName}"/>
                    <container Value="create_edit"/>
                    <fieldType Value="column"/>
                    <propName Value="Refers"/>
                    <propValue Value="{$currElem/@Refers}"/>
                  </ADD_DOCUMENT>
                  <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                    <workflowId Value="{$thisParam/workflowId/@Value}"/>
                    <attributeName Value="{$attName}"/>
                    <container Value="create_edit"/>
                    <fieldType Value="column"/>
                    <propName Value="ToProperty"/>
                    <propValue Value="{$currElem/@ToProperty}"/>
                  </ADD_DOCUMENT>
                  <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                    <workflowId Value="{$thisParam/workflowId/@Value}"/>
                    <attributeName Value="{$attName}"/>
                    <container Value="create_edit"/>
                    <fieldType Value="column"/>
                    <propName Value="LinkName"/>
                    <propValue Value="{$currElem/@LinkName}"/>
                  </ADD_DOCUMENT>
                </THEN>
              </IF_TEST>
              <SET Var="PrimaryKey" FromValue="{$currElem/@PrimaryKey}"/>
              <SET Var="Required" FromValue="{$currElem/@Required}"/>
              <SET Var="IsValidValue" FromValue="{$currElem/@IsValidValue}"/>
              <SET Var="DefaultValue" FromValue="{$currElem/@DefaultValue}"/>
              <SET Var="ValidVar" FromValue=" "/>
              <IF_TEST Test="$currElem/@IsValidValue='true'">
                <THEN>
                  <SET Var="ValidVar" FromValue="{$currElem/DATASOURCE/*/@CodeType}"/>
                </THEN>
              </IF_TEST>
              <IF_TEST Test="$ValidVar=null or $ValidVar=''">
                <THEN>
                  <SET Var="ValidVar" FromValue="true"/>
                </THEN>
              </IF_TEST>
              <IF_TEST Test="$PrimaryKey!=null">
                <THEN>
                  <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                    <workflowId Value="{$thisParam/workflowId/@Value}"/>
                    <attributeName Value="{$attName}"/>
                    <container Value="create_edit"/>
                    <fieldType Value="column"/>
                    <propName Value="PrimaryKey"/>
                    <propValue Value="{$PrimaryKey}"/>
                  </ADD_DOCUMENT>
                  <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                    <workflowId Value="{$thisParam/workflowId/@Value}"/>
                    <attributeName Value="{$attName}"/>
                    <container Value="create_edit"/>
                    <fieldType Value="column"/>
                    <propName Value="Editable"/>
                    <propValue Value="false"/>
                  </ADD_DOCUMENT>
                  <SET Var="Required" FromValue="true"/>
                </THEN>
                <ELSE>
                  <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                    <workflowId Value="{$thisParam/workflowId/@Value}"/>
                    <attributeName Value="{$attName}"/>
                    <container Value="create_edit"/>
                    <fieldType Value="column"/>
                    <propName Value="Editable"/>
                    <propValue Value="{$thisParam/Editable/@Value}"/>
                  </ADD_DOCUMENT>
                </ELSE>
              </IF_TEST>
              <IF_TEST Test="$Required!=null">
                <THEN>
                  <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                    <workflowId Value="{$thisParam/workflowId/@Value}"/>
                    <attributeName Value="{$attName}"/>
                    <container Value="create_edit"/>
                    <fieldType Value="column"/>
                    <propName Value="Required"/>
                    <propValue Value="{$Required}"/>
                  </ADD_DOCUMENT>
                </THEN>
              </IF_TEST>
              <IF_TEST Test="$IsValidValue='true'">
                <THEN>
                  <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                    <workflowId Value="{$thisParam/workflowId/@Value}"/>
                    <attributeName Value="{$attName}"/>
                    <container Value="create_edit"/>
                    <fieldType Value="column"/>
                    <propName Value="IsValidValue"/>
                    <propValue Value="{$ValidVar}"/>
                  </ADD_DOCUMENT>
                </THEN>
              </IF_TEST>
              <!--IF_TEST Test="$DefaultValue!=null">
                <THEN>
                  <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                    <workflowId Value="{$thisParam/workflowId/@Value}"/>
                    <attributeName Value="{$attName}"/>
                    <container Value="create_edit"/>
                    <fieldType Value="column"/>
                    <propName Value="DefaultValue"/>
                    <propValue Value="{$DefaultValue}"/>
                  </ADD_DOCUMENT>
                </THEN>
              </IF_TEST-->
              <BREAK/>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="raiseEvent">
    <RULE>
      <ACTION>
        <RAISE_EVENT Name="TaskInboxEvent" ServiceName="BCM_MASTER">
          <WorkflowInstanceId Value="{$thisParam/EVENT_ID/@Value}"/>
        </RAISE_EVENT>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <!-- This rule is used to convet tabbed config ui to non tabbed config ui-->
  <DEFINE_METHOD Name="convertConfigUITabbedToNonTabbed">
    <RULE>
      <ACTION>
        <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SELECT WORKFLOW_ID as WF_ID,JOIN_MECHANISM,PAGE_NAME FROM CONFIGURABLE_WORKFLOWS WHERE TEMPLATE_TYPE='Tabbed'" AssignToVar="wfID"/>
        <FOR_EACH SelectList="$wfID/SQL_RESULT" CurrentElement="sWID">
          <EXECUTE_SQL_QUERY Value="DELETE FROM CW_SEARCH_RESULTS_CFG_ATTR WHERE CONTAINER='create_edit' AND WORKFLOW_ID={$sWID/WF_ID/@Value}"/>
          <EXECUTE_SQL_QUERY Value="DELETE FROM CW_SEARCH_RESULTS_COLUMNS WHERE CONTAINER='create_edit' AND WORKFLOW_ID={$sWID/WF_ID/@Value}"/>
          <SET Var="URL" FromValue="/start.x2ps?START_WORKFLOW=ConfigurableWorkflows_RT_T1&amp;SERVICE_NAME=UI_WORKFLOW&amp;SOLUTION_NAME=MDM&amp;workflowId={$sWID/WF_ID/@Value}"/>
          <EXECUTE_SQL_QUERY Value="UPDATE CONFIGURABLE_WORKFLOWS SET TEMPLATE_TYPE='Non Tabbed' WHERE WORKFLOW_ID={$sWID/WF_ID/@Value}"/>
          <EXECUTE_SQL_QUERY Value="UPDATE LEFT_NAV_URL SET PAGE_URL='{$URL}' WHERE PAGE_NAME='{$sWID/PAGE_NAME/@Value}'"/>
          <EXECUTE_SQL_QUERY Value="INSERT INTO CW_SEARCH_RESULTS_COLUMNS ( WORKFLOW_ID, DB_NAME, TABLE_NAME, TABLE_NAME_PHY, COLUMN_NAME, COLUMN_NAME_PHY, CONTAINER, DATA_TYPE, MAX_LENGTH, COLUMN_ORDER ) SELECT {$sWID/WF_ID/@Value}, DB_NAME, TABLE_NAME, TABLE_NAME_PHY, COLUMN_NAME, COLUMN_NAME_PHY, 'create_edit', DATA_TYPE, MAX_LENGTH, COLUMN_ORDER FROM CW_SEARCH_RESULTS_COLUMNS WHERE WORKFLOW_ID={$sWID/WF_ID/@Value} and CONTAINER='result';"/>
          <EXECUTE_SQL_QUERY Value="INSERT INTO CW_SEARCH_RESULTS_CFG_ATTR ( WORKFLOW_ID, ATTRIBUTE_NAME, CONTAINER, FIELD_TYPE, PROP_NAME, PROP_VALUE ) SELECT {$sWID/WF_ID/@Value}, ATTRIBUTE_NAME, 'create_edit', FIELD_TYPE, PROP_NAME, PROP_VALUE FROM CW_SEARCH_RESULTS_CFG_ATTR WHERE WORKFLOW_ID={$sWID/WF_ID/@Value} and CONTAINER='result' and PROP_NAME='displayName'"/>
          <EXECUTE_SQL_QUERY Value="INSERT INTO CW_SEARCH_RESULTS_CFG_ATTR ( WORKFLOW_ID, ATTRIBUTE_NAME, CONTAINER, FIELD_TYPE, PROP_NAME, PROP_VALUE ) SELECT {$sWID/WF_ID/@Value}, ATTRIBUTE_NAME, 'create_edit', FIELD_TYPE, PROP_NAME, PROP_VALUE FROM CW_SEARCH_RESULTS_CFG_ATTR WHERE WORKFLOW_ID={$sWID/WF_ID/@Value} and CONTAINER='result' and PROP_NAME='hoverText'"/>
          <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS sel ATTRIBUTE_NAME from CW_SEARCH_RESULTS_CFG_ATTR WHERE WORKFLOW_ID={$sWID/WF_ID/@Value} and CONTAINER='result' and PROP_NAME='displayName'" AssignToVar="selectedColumns"/>
          <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS Select * from cw_search_results_tables where WORKFLOW_ID={$sWID/WF_ID/@Value}" AssignToVar="tabResultV"/>
          <FOR_EACH SelectList="$selectedColumns/SQL_RESULT" CurrentElement="selCol">
            <FOR_EACH SelectList="$tabResultV/*" CurrentElement="currTableDetails1">
              <SET Var="tableName" FromValue="{ifElse($sWID/JOIN_MECHANISM/@Value='Explicit Join',concat($currTableDetails1/DB_NAME/@Value,'.',$currTableDetails1/TABLE_NAME/@Value,'.'),concat($currTableDetails1/TABLE_NAME/@Value,'.'))}"/>
              <IF_TEST Test="indexOf($selCol/ATTRIBUTE_NAME/@Value,$tableName)!='-1'">
                <THEN>
                  <IF_TEST Test="$currTableDetails1/SERVICE_NAME/@Value!='nonMDM'">
                    <THEN>
                      <GET_DOC_PROPERTIES ServiceName="{$currTableDetails1/SERVICE_NAME/@Value}" TableName="{$currTableDetails1/TABLE_NAME/@Value}" AssignToVar="tDetails"/>
                    </THEN>
                    <ELSE>
                      <REQUEST Name="getNonMDMDocumentProperties" ServiceName="BPE_META" AssignToVar="DocPropTemp" HandleException="true">
                        <NonMDMDocument Value="{$currTableDetails1/TABLE_NAME/@Value}" DbName="{$currTableDetails1/DB_NAME/@Value}"/>
                      </REQUEST>
                      <TO_DOCVAR AssignToVar="tDetails">
                        <RESPONSE Status="Success"/>
                      </TO_DOCVAR>
                      <FOR_EACH SelectList="$DocPropTemp/NON_MDM_DOCUMENTS" CurrentElement="tempCurr">
                        <APPEND_CHILDREN FromDocVar="tempCurr" DocVar="tDetails"/>
                      </FOR_EACH>
                    </ELSE>
                  </IF_TEST>
                  <SET Var="attName" FromValue="{$selCol/ATTRIBUTE_NAME/@Value}"/>
                  <FOR_EACH SelectList="$tDetails/DOCUMENT/*" CurrentElement="currElem">
                    <SET Var="checkVar" FromValue="{ifElse($currTableDetails1/SERVICE_NAME/@Value='nonMDM',concat($tDetails/DOCUMENT/@Value,'.',$currElem/@Name),concat($tDetails/DOCUMENT/@Name,'.',$currElem/@Name))}"/>
                    <IF_TEST Test="indexOf($attName,$checkVar)!='-1'">
                      <THEN>
                        <SET Var="PrimaryKey" FromValue="{$currElem/@PrimaryKey}"/>
                        <SET Var="Required" FromValue="{$currElem/@Required}"/>
                        <SET Var="IsValidValue" FromValue="{$currElem/@IsValidValue}"/>
                        <SET Var="DefaultValue" FromValue="{$currElem/@DefaultValue}"/>
                        <SET Var="ValidVar" FromValue=" "/>
                        <IF_TEST Test="$currElem/@IsValidValue='true'">
                          <THEN>
                            <SET Var="ValidVar" FromValue="{$currElem/DATASOURCE/*/@CodeType}"/>
                          </THEN>
                        </IF_TEST>
                        <IF_TEST Test="$ValidVar=null or $ValidVar=''">
                          <THEN>
                            <SET Var="ValidVar" FromValue="true"/>
                          </THEN>
                        </IF_TEST>
                        <IF_TEST Test="$PrimaryKey!=null">
                          <THEN>
                            <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                              <workflowId Value="{$sWID/WF_ID/@Value}"/>
                              <attributeName Value="{$attName}"/>
                              <container Value="create_edit"/>
                              <fieldType Value="column"/>
                              <propName Value="PrimaryKey"/>
                              <propValue Value="{$PrimaryKey}"/>
                            </ADD_DOCUMENT>
                            <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                              <workflowId Value="{$sWID/WF_ID/@Value}"/>
                              <attributeName Value="{$attName}"/>
                              <container Value="create_edit"/>
                              <fieldType Value="column"/>
                              <propName Value="Editable"/>
                              <propValue Value="false"/>
                            </ADD_DOCUMENT>
                          </THEN>
                          <ELSE>
                            <SET Var="Editable" FromValue="{ifElse($currElem/PRESENTATION/EDITABLE/@Value='no' or $currElem/@ColumnName='SYS_TARGET_ID','false','true')}"/>
                            <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                              <workflowId Value="{$thisParam/workflowId/@Value}"/>
                              <attributeName Value="{$attName}"/>
                              <container Value="create_edit"/>
                              <fieldType Value="column"/>
                              <propName Value="Editable"/>
                              <propValue Value="{$Editable}"/>
                            </ADD_DOCUMENT>
                          </ELSE>
                        </IF_TEST>
                        <IF_TEST Test="$Required!=null">
                          <THEN>
                            <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                              <workflowId Value="{$sWID/WF_ID/@Value}"/>
                              <attributeName Value="{$attName}"/>
                              <container Value="create_edit"/>
                              <fieldType Value="column"/>
                              <propName Value="Required"/>
                              <propValue Value="{$Required}"/>
                            </ADD_DOCUMENT>
                          </THEN>
                        </IF_TEST>
                        <IF_TEST Test="$IsValidValue='true'">
                          <THEN>
                            <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                              <workflowId Value="{$sWID/WF_ID/@Value}"/>
                              <attributeName Value="{$attName}"/>
                              <container Value="create_edit"/>
                              <fieldType Value="column"/>
                              <propName Value="IsValidValue"/>
                              <propValue Value="{$ValidVar}"/>
                            </ADD_DOCUMENT>
                          </THEN>
                        </IF_TEST>
                        <BREAK/>
                      </THEN>
                    </IF_TEST>
                  </FOR_EACH>
                  <BREAK/>
                </THEN>
              </IF_TEST>
            </FOR_EACH>
          </FOR_EACH>
        </FOR_EACH>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="performMassUpdate">
    <RULE>
      <ACTION>
        <DO_TRANSACTION>
          <SET Var="alertGreen" FromValue=""/>
          <SET Var="alertRed" FromValue=""/>
          <TO_DOCVAR AssignToVar="sysColsToRemove">
            <ROOT>
              <SYS_TARGET_ID/>
              <SYS_AUTH_ID/>
              <SOURCE/>
              <CREATED_BY/>
              <CREATION_DATE/>
              <ENTITY_STATE/>
              <LAST_MODIFIED_BY/>
              <LAST_MODIFIED_DATE/>
              <SYS_TYPE/>
              <SYS_ERR_CODE/>
              <SYS_ERR_SEVERITY/>
              <!--TemporalValidTime/-->
            </ROOT>
          </TO_DOCVAR>
          <SET Var="workflowId" FromValue="{$thisParam/ROOT/PARAMETERS/wfIdValue/@Value}"/>
          <GET_DOCUMENT AssignToVar="DocProVar" Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
            <workflowId Value="{$workflowId}"/>
            <container Value="create_edit"/>
            <ORDER_BY>
              <columnOrder Sort="Ascending"/>
            </ORDER_BY>
          </GET_DOCUMENT>
          <GET_DOCUMENT AssignToVar="cwSearchResultsTables" Name="cwSearchResultsTables" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
            <workflowId Value="{$workflowId}"/>
            <ORDER_BY>
              <tableRank Sort="Ascending"/>
            </ORDER_BY>
          </GET_DOCUMENT>
          <SET Var="eName" FromValue="{$cwSearchResultsTables/cwSearchResultsTables[tableRank/@Value='1']/Entity_Name/@Value}"/>
          <TO_DOCVAR AssignToVar="depCommand">
            <DEP_COMMAND index="0" tableList=""/>
          </TO_DOCVAR>
          <FOR_EACH SelectList="$cwSearchResultsTables/*" CurrentElement="tableList">
            <SET FromValue="{ifElse($thisParam/ROOT/JOIN_MECHANISM/@Value='Explicit Join',concat($tableList/dbName/@Value,'.',$tableList/tableNamePhy/@Value),$tableList/tableName/@Value)}" Var="tabName"/>
            <IF_TEST Test="$tableList/serviceName/@Value!='nonMDM'">
              <THEN>
                <IF_TEST Test="$thisParam/ROOT/JOIN_MECHANISM/@Value='Explicit Join'">
                  <THEN>
                    <!--GET_DOC_PROPERTIES ServiceName="{$tableList/serviceName/@Value}" TableName="{$tableList/tableName/@Value}" AssignToVar="DocPropertiesVar"/-->
                    <SET FromValue="{concat($tableList/dbName/@Value,'.',$tableList/tableNamePhy/@Value,'.')}" Var="ifCheckVar"/>
                  </THEN>
                  <ELSE>
                    <SET FromValue="{concat($tableList/tableName/@Value,'.')}" Var="ifCheckVar"/>
                  </ELSE>
                </IF_TEST>
                <TO_DOCVAR AssignToVar="allUpdates">
                  <ROOT/>
                </TO_DOCVAR>
                <TO_DOCVAR AssignToVar="UPDATE_PROPERTIES">
                  <UPDATE_PROPERTIES/>
                </TO_DOCVAR>
                <SET Var="flag" FromValue="0"/>
                <FOR_EACH SelectList="$thisParam/ROOT/PARAMETERS/*" CurrentElement="currAttr">
                  <IF_TEST Test="indexOf($currAttr/name(),$ifCheckVar)='-1'">
                    <THEN>
                      <CONTINUE/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="indexOf($currAttr/name(),'checkBox_-_')!='-1' and strlen($currAttr/@Value)!=0">
                    <THEN>
                      <SET Var="flag" FromValue="1"/>
                      <SET Var="tagName" FromValue="{substringAfter($currAttr/name(),'checkBox_-_')}"/>
                      <SET Var="tagName" FromValue="{substringBefore($tagName,'_-_ter')}"/>
                      <SET Var="content" FromValue="{$thisParam/ROOT/PARAMETERS/*[name()=$tagName]/@Value}"/>
                      <TO_DOCVAR AssignToVar="tempDoc">
                        <ROOT Value="{$content}"/>
                      </TO_DOCVAR>
                      <IF_TEST Test="strlen($content)!=0">
                        <THEN>
                          <TO_DOCVAR AssignToVar="tempDoc">
                            <ROOT Value="{$content}"/>
                          </TO_DOCVAR>
                        </THEN>
                        <ELSE>
                          <TO_DOCVAR AssignToVar="tempDoc">
                            <ROOT/>
                          </TO_DOCVAR>
                        </ELSE>
                      </IF_TEST>
                      <SET Var="orgTagName" FromValue="{$tagName}"/>
                      <IF_TEST Test="$thisParam/ROOT/JOIN_MECHANISM/@Value='Explicit Join'">
                        <THEN>
                          <SET Var="tagName" FromValue="{trim(substringAfter($tagName,$ifCheckVar))}"/>
                          <FOR_EACH CurrentElement="tVal" SelectList="$DocProVar/*">
                            <IF_TEST Test="$tVal/tableName/@Value=$tableList/tableName/@Value and $tVal/tableNamePhy/@Value=$tableList/tableNamePhy/@Value and $tVal/columnNamePhy/@Value=$tagName">
                              <THEN>
                                <SET Var="tagName" FromValue="{$tVal/columnName/@Value}"/>
                                <BREAK/>
                              </THEN>
                            </IF_TEST>
                          </FOR_EACH>
                        </THEN>
                      </IF_TEST>
                      <SET_NAME DocVar="tempDoc" FromValue="{substringAfter($tagName,'.')}"/>
                      <SET Var="colType" FromValue="{$DocProVar/cwSearchResultsColumns[tableName/@Value=$tableList/tableName/@Value and tableNamePhy/@Value=$tableList/tableNamePhy/@Value and columnName/@Value= $tempDoc/name()]/dataType/@Value}"/>
                      <IF_TEST Test="$colType/@Value='periodDate' or $colType/@Value='periodTimestamp' or $colType/@Value ='periodTimestamp6'">
                        <THEN>
                          <SET Var="dbDotTableDotColumName" FromValue="{$tagName/@Value}"/>
                          <SET Var="columnName" FromValue="{substringAfter($tagName,concat($tabName,'.'))}"/>
                          <SET Var="columnPeriodStart" FromValue="{concat($columnName/@Value,'_PeriodStart')}"/>
                          <SET Var="columnPeriodEnd" FromValue="{concat($columnName/@Value,'_PeriodEnd')}"/>
                          <REQUEST Name="createPeriodDataTimeDocVar" ServiceName="UI_WORKFLOW" AssignToVar="periodDoc" HandleException="true">
                            <TO_XML SelectList="$thisParam/*/*"/>
                            <TABLE_DOT_COLUMN_NAME Value="{$dbDotTableDotColumName/@Value}"/>
                            <COLUMN_NAME Value="{$columnName/@Value}"/>
                          </REQUEST>
                          <SET DocVar="tempDoc" Attribute="Value" FromValue="{$periodDoc/*/@Value}"/>
                        </THEN>
                      </IF_TEST>
                      <IF_TEST Test="$colType = 'file'">
                        <THEN>
                          <SET Var="FileName" FromValue="{$content}"/>
                          <SET Var="fileColName" FromValue="{concat($orgTagName,'_FileContents')}"/>
                          <SET Var="FileContents" FromValue="{$thisParam/ROOT/PARAMETERS/*[trim(name()) = trim($fileColName)]/@Value}"/>
                          <SET Var="TargetTableName" FromValue="{$tableList/tableName/@Value}"/>
                          <SET Var="TargetColumnName" FromValue="{$tempDoc/name()}"/>
                          <REQUEST Name="insertFileDataType" ServiceName="BPE_META" AssignToVar="FileContentID">
                            <FileName Value="{$FileName}"/>
                            <FileContents Value="{$FileContents}"/>
                            <TargetTableName Value="{$TargetTableName}"/>
                            <TargetColumnName Value="{$TargetColumnName}"/>
                          </REQUEST>
                          <IF_TEST Test="($FileContentID/RESULT/@STATUS = 'SUCCESS')">
                            <THEN>
                              <REMOVE_ATTRIBUTE DocVar="tempDoc" Name="Value"/>
                              <SET Attribute="Value" DocVar="tempDoc" FromValue="{$FileContentID/RESULT/ID/@Value}"/>
                            </THEN>
                          </IF_TEST>
                        </THEN>
                      </IF_TEST>
                      <ADD_CHILDREN DocVar="UPDATE_PROPERTIES" FromDocVar="tempDoc"/>
                    </THEN>
                  </IF_TEST>
                </FOR_EACH>
                <IF_TEST Test="$flag='0'">
                  <THEN>
                    <CONTINUE/>
                  </THEN>
                  <ELSE>
                    <FOR_EACH CurrentElement="idCurr" SelectList="$thisParam/ROOT/ID_VAR/*">
                      <IF_TEST Test="contains(string($idCurr/@Value),concat($tableList/dbName/@Value,'.',$tableList/tableNamePhy/@Value)) = 'false' and  contains(string($idCurr/@Value),$tableList/tableName/@Value) = 'false' and contains(string($idCurr/@Value),'=')">
                        <THEN>
                          <CONTINUE/>
                        </THEN>
                      </IF_TEST>
                      <IF_TEST Test="(contains(string($idCurr/@Value),'#'))">
                        <ELSE>
                          <IF_TEST Test="$thisParam/ROOT/JOIN_MECHANISM/@Value!='Explicit Join'">
                            <THEN>
                              <GET_DOCUMENT AssignToVar="rowIDLogical" Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" ReturnRowCount="yes" DirtyRead="true">
                                <workflowId Value="{$workflowId}"/>
                                <container Value="result"/>
                                <fieldType Value="table"/>
                                <propName Value="rowId"/>
                              </GET_DOCUMENT>
                              <TO_DOCVAR AssignToVar="idCurr">
                                <ID Value="{$rowIDLogical/cwSearchResultsConfigAttr/propValue/@Value}={$idCurr/@Value}"/>
                              </TO_DOCVAR>
                            </THEN>
                          </IF_TEST>
                        </ELSE>
                      </IF_TEST>
                      <SET Var="tempRowId" FromValue="{strSplit($idCurr/@Value,'#')}"/>
                      <TO_DOCVAR AssignToVar="docContext">
                        <DOCUMENT_CONTEXT/>
                      </TO_DOCVAR>
					  <TO_DOCVAR AssignToVar="keyNameDoc">
                        <KEY_NAME/>
                      </TO_DOCVAR>
                      <TO_DOCVAR AssignToVar="tempDocUpdate">
                        <ROOT/>
                      </TO_DOCVAR>
                      <SET_NAME DocVar="tempDocUpdate" FromValue="{$tableList/tableName/@Value}"/>
                      <FOR_EACH CurrentElement="tokenVals" SelectList="$tempRowId/*">
                        <IF_TEST Test="indexOf($tokenVals/@Value,$ifCheckVar)!='-1'">
                          <THEN>
                            <IF_TEST Test="$thisParam/ROOT/JOIN_MECHANISM/@Value='Explicit Join'">
                              <THEN>
                                <SET Var="colName" FromValue="{substringAfter(substringAfter(substringBefore($tokenVals/@Value,'='),'.'),'.')}"/>
                                <!--SET Var="colName" FromValue="{$DocPropertiesVar/DOCUMENT/PROPERTY[@ColumnName=$colName]/@Name}"/-->
                                <FOR_EACH CurrentElement="tVal" SelectList="$DocProVar/*">
                                  <IF_TEST Test="$tVal/tableName/@Value=$tableList/tableName/@Value and $tVal/tableNamePhy/@Value=$tableList/tableNamePhy/@Value and $tVal/columnNamePhy/@Value=$colName">
                                    <THEN>
                                      <SET Var="colName" FromValue="{$tVal/columnName/@Value}"/>
                                      <BREAK/>
                                    </THEN>
                                  </IF_TEST>
                                </FOR_EACH>
                              </THEN>
                              <ELSE>
                                <SET Var="colName" FromValue="{substringAfter(substringBefore($tokenVals/@Value,'='),'.')}"/>
                              </ELSE>
                            </IF_TEST>
                            <SET FromValue="{$DocProVar/cwSearchResultsColumns[dbName/@Value = $tableList/dbName/@Value and tableNamePhy/@Value = $tableList/tableNamePhy/@Value and tableName/@Value = $tableList/tableName/@Value and  columnName/@Value=$colName]/dataType/@Value}" Var="ConfigDataType"/>
                            <SET Var="colVal1" FromValue="{substringAfter($tokenVals/@Value,'=')}"/>
                            <IF_TEST Test="$ConfigDataType = 'timestamp'">
                              <THEN>
                                <SET Var="dbFormat" FromValue="MM/dd/yyyy HH:mm:ss"/>
                                <SET Var="timeFormat" FromValue="MM/dd/yyyy HH:mm:ss"/>
                                <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="colVal1">
                                  <PARAM Var="colVal1" Caption="date"/>
                                  <PARAM Var="timeFormat" Caption="format"/>
                                  <PARAM Var="dbFormat" Caption="dbFormat"/>
                                </NATIVE_FUNCTION>
                              </THEN>
                              <ELSE>
                                <IF_TEST Test="$ConfigDataType = 'date'">
                                  <THEN>
                                    <SET Var="timeValue" FromValue="{trim($colVal1/@Value)}"/>
                                    <SET Var="dbFormat" FromValue="MM/dd/yyyy"/>
                                    <SET Var="dateFormat" FromValue="MM/dd/yyyy"/>
                                    <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="colVal1">
                                      <PARAM Var="timeValue" Caption="date"/>
                                      <PARAM Var="dateFormat" Caption="format"/>
                                      <PARAM Var="dbFormat" Caption="dbFormat"/>
                                    </NATIVE_FUNCTION>
                                  </THEN>
                                </IF_TEST>
                              </ELSE>
                            </IF_TEST>
                            <TO_DOCVAR AssignToVar="tempColV">
                              <ROOT Value="{$colVal1}"/>
                            </TO_DOCVAR>
                            <SET_NAME DocVar="tempColV" FromValue="{$colName}"/>
							<ADD_CHILDREN DocVar="keyNameDoc" FromDocVar="tempColV"/>
                            <ADD_CHILDREN DocVar="docContext" FromDocVar="tempColV"/>
                          </THEN>
                        </IF_TEST>
                      </FOR_EACH>
                      <ADD_CHILDREN DocVar="tempDocUpdate" FromDocVar="UPDATE_PROPERTIES"/>
                      <IF_TEST Test="($tableList/serviceName/@Value='BCM_MASTER' and starts-with($tableList/tableName/@Value,'error_')='false') or $tableList/serviceName/@Value='BCM_VERSION_STAGING'">
                        <THEN>
                          <IF_TEST Test="$thisParam/ROOT/ID_VAR/@totalRow!='0'">
                            <THEN>
                              <!--GET_DOC_SMART HandleException="true" AssignToVar="DocPropsValue" Name="{$tableList/tableName/@Value}" ServiceName="BCM_MASTER">
                                <TO_XML SelectList="$docContext/*"/>
                              </GET_DOC_SMART-->
                              <GET_DOCUMENT HandleException="true" AssignToVar="DocPropsValue" Name="{$tableList/tableName/@Value}" ServiceName="{$tableList/serviceName/@Value}" DirtyRead="true">
                                <TO_XML SelectList="$docContext/*"/>
                              </GET_DOCUMENT>
                              <FOR_EACH CurrentElement="curDocCon" SelectList="$DocPropsValue/*/*">
                                <SET Var="colNameDoc" FromValue="{$curDocCon/name()}"/>
                                <SET Var="orgVal" FromValue="{$docContext/*[name()=$colNameDoc]/@Value}"/>
                                <IF_TEST Test="strlen($orgVal)!=0">
                                  <THEN>
                                    <SET DocVar="curDocCon" Attribute="Value" FromValue="{$orgVal}"/>
                                  </THEN>
                                </IF_TEST>
                              </FOR_EACH>
                              <TO_DOCVAR AssignToVar="docContext">
                                <DOCUMENT_CONTEXT>
                                  <TO_XML SelectList="$DocPropsValue/*/*"/>
                                </DOCUMENT_CONTEXT>
                              </TO_DOCVAR>
                              <FOR_EACH SelectList="$UPDATE_PROPERTIES/*" CurrentElement="curRem">
                                <REMOVE_CHILDREN DocVar="docContext" ChildName="{$curRem/name()}"/>
                              </FOR_EACH>
                              <FOR_EACH SelectList="$sysColsToRemove/*" CurrentElement="curRem">
                                <REMOVE_CHILDREN DocVar="docContext" ChildName="{$curRem/name()}"/>
                              </FOR_EACH>
                              <ADD_CHILDREN DocVar="tempDocUpdate" FromDocVar="docContext"/>
                              <SET Var="isaddFlag" FromValue="true"/>
                              <IF_TEST Test="$thisParam/ROOT/JOIN_MECHANISM/@Value='Explicit Join'">
                                <THEN>
                                  <SET Var="keyCount" FromValue="{count($keyNameDoc/*)}"/>
                                  <FOR_EACH CurrentElement="currDocContext" SelectList="$allUpdates/*">
                                    <SET Var="count" FromValue="{int(1)}"/>
                                    <SET Var="keyCountTemp" FromValue="{int(0)}"/>
                                    <FOR_EACH CurrentElement="currProp" SelectList="$currDocContext/DOCUMENT_CONTEXT/*">
                                      <FOR_EACH CurrentElement="currKey" SelectList="$keyNameDoc/*">
                                        <IF_TEST Test="$currKey/name() = $currProp/name()">
                                          <THEN>
                                            <IF_TEST Test="string($currDocContext/DOCUMENT_CONTEXT/*[$count]/@Value)=string($docContext/*[$count]/@Value)">
                                              <THEN>
                                                <SET Var="keyCountTemp" FromValue="{int($keyCountTemp+1)}"/>
                                              </THEN>
                                            </IF_TEST>
                                          </THEN>
                                        </IF_TEST>
                                        <SET Var="count" FromValue="{int($count+1)}"/>
                                      </FOR_EACH>
                                      <IF_TEST Test="$keyCount/@Value = $keyCountTemp/@Value">
                                        <THEN>
                                          <SET Var="isaddFlag" FromValue="false"/>
                                          <BREAK/>
                                        </THEN>
                                      </IF_TEST>
                                    </FOR_EACH>
                                  </FOR_EACH>
                                </THEN>
                              </IF_TEST>
                              <IF_TEST Test="$isaddFlag/@Value = 'true'">
                                <THEN>
                                  <ADD_CHILDREN DocVar="allUpdates" FromDocVar="tempDocUpdate"/>
                                </THEN>
                              </IF_TEST>
                            </THEN>
                            <ELSE>
                              <ADD_CHILDREN DocVar="allUpdates" FromDocVar="UPDATE_PROPERTIES"/>
                              <ADD_CHILDREN DocVar="allUpdates" FromDocVar="docContext"/>
                            </ELSE>
                          </IF_TEST>
                        </THEN>
                        <ELSE>
                          <ADD_CHILDREN DocVar="tempDocUpdate" FromDocVar="docContext"/>
                          <MODIFY_DOCUMENT Name="{$tableList/tableName/@Value}" ServiceName="{$tableList/serviceName/@Value}" HandleException="true" AssignToVar="DDP_Result">
                            <TO_XML SelectList="$tempDocUpdate/*"/>
                          </MODIFY_DOCUMENT>
                          <IF_TEST Test="$DDP_Result/@Status='Success'">
                            <THEN>
                              <SET Var="alertGreen" FromValue="Record(s) submitted successfully."/>
                            </THEN>
                            <ELSE>
                              <SET Var="alertRed" FromValue="{$DDP_Result/@Description}"/>
                              <SET Var="alertGreen" FromValue=""/>
                              <TO_DOCVAR AssignToVar="thisReturn">
                                <ROOT>
                                  <alertGreen Value="{$alertGreen}"/>
                                  <alertRed Value="{$alertRed}"/>
                                </ROOT>
                              </TO_DOCVAR>
                              <RAISE_EXCEPTION Value="Error in DB transaction"/>
                            </ELSE>
                          </IF_TEST>
                        </ELSE>
                      </IF_TEST>
                    </FOR_EACH>
                  </ELSE>
                </IF_TEST>
                <IF_TEST Test="($tableList/serviceName/@Value='BCM_MASTER' and starts-with($tableList/tableName/@Value,'error_')='false') or $tableList/serviceName/@Value='BCM_VERSION_STAGING'">
                  <THEN>
                    <IF_TEST Test="strlen($eName)!=0">
                      <THEN>
                        <SET DocVar="depCommand" Attribute="index" FromValue="{int($depCommand/@index+1)}"/>
                        <SET DocVar="depCommand" Attribute="tableList" FromValue="{concat($depCommand/@tableList,$tableList/tableName/@Value,',')}"/>
                        <ADD_CHILDREN DocVar="depCommand" FromSelectList="$allUpdates/*"/>
                      </THEN>
                      <ELSE>
                        <DO_DB_PERSIST Source="EXTERNAL" isBulkRequest="false" DocumentName="{$tableList/tableName/@Value}" ServiceName="{$tableList/serviceName/@Value}" Action="MASS_UPDATE" AssignToVar="DDP_Result" HandleException="true">
                          <TO_XML SelectList="$allUpdates/*"/>
                        </DO_DB_PERSIST>
                        <IF_TEST Test="$DDP_Result/VALIDATION_RESULT/@Value='SUCCESS'">
                          <THEN>
                            <IF_TEST Test="$DDP_Result/@Description = 'DO_DB_PERSIST executed successfully, Record sent for approval'">
                              <THEN>
                                <SET FromValue="Record(s) updated successfully and sent for Approval." Var="alertGreen"/>
                              </THEN>
                              <ELSE>
                                <SET FromValue="Record(s) submitted successfully." Var="alertGreen"/>
                              </ELSE>
                            </IF_TEST>
                          </THEN>
                          <ELSE>
                            <IF_TEST Test="$DDP_Result/VALIDATION_RESULT/@Value='WARNING'">
                              <THEN>
                                <SET FromValue="Record(s) submitted successfully." Var="alertGreen"/>
                              </THEN>
                              <ELSE>
                                <IF_TEST Test="$DDP_Result/VALIDATION_RESULT/ERROR_CODE/@Value!=null">
                                  <THEN>
                                    <SET FromValue="{$DDP_Result/VALIDATION_RESULT/ERROR_CODE/@Value}" Var="alertRed"/>
                                    <SET Var="alertGreen" FromValue=" "/>
                                    <TO_DOCVAR AssignToVar="thisReturn">
                                      <ROOT>
                                        <alertGreen Value="{$alertGreen}"/>
                                        <alertRed Value="{$alertRed}"/>
                                      </ROOT>
                                    </TO_DOCVAR>
                                    <RAISE_EXCEPTION Value="Error in DB transaction"/>
                                  </THEN>
                                  <ELSE>
                                    <IF_TEST Test="$DDP_Result/@Status='Error'">
                                      <THEN>
                                        <SET Var="alertGreen" FromValue=""/>
                                        <SET Var="alertRed" FromValue="{$DDP_Result/@Description}"/>
                                      </THEN>
                                    </IF_TEST>
                                    <IF_TEST Test="$DDP_Result/VALIDATION_RESULT/@Value='ERROR'">
                                      <THEN>
                                        <SET Var="alertGreen" FromValue=" "/>
                                        <SET FromValue="{$DDP_Result/@Description} " Var="alertRed"/>
                                      </THEN>
                                      <ELSE/>
                                    </IF_TEST>
                                  </ELSE>
                                </IF_TEST>
                              </ELSE>
                            </IF_TEST>
                          </ELSE>
                        </IF_TEST>
                      </ELSE>
                    </IF_TEST>
                  </THEN>
                  <ELSE/>
                </IF_TEST>
              </THEN>
              <ELSE>
                <SET FromValue="0" Var="flag1"/>
                <GET_DOCUMENT Name="SYS_CUSTOM_MACRO_MAP" ServiceName="BPE_META" DirtyRead="true" AssignToVar="macroMap">
                  <Target_Table Value="{$tableList/tableName/@Value}"/>
                </GET_DOCUMENT>
                <IF_TEST Test="strlen($macroMap/SYS_CUSTOM_MACRO_MAP/Update_Macro/@Value)&lt;=0">
                  <THEN>
                    <SET FromValue="UPDATE {$tableList/dbName/@Value}.{$tableList/tableName/@Value} SET " Var="updateString"/>
                    <!--REQUEST Name="getNonMDMDocumentProperties" AssignToVar="DocPropertiesVar" ServiceName="BPE_META">
<NonMDMDocument Value="{$tableList/tableName/@Value}" DbName="{$tableList/dbName/@Value}"/>
</REQUEST-->
                    <SET FromValue="{$tableList/dbName/@Value}.{$tableList/tableName/@Value}." Var="ifCheckVar"/>
                    <FOR_EACH SelectList="$thisParam/ROOT/PARAMETERS/*" CurrentElement="currAttr">
                      <SET Var="temp" FromValue=" "/>
                      <IF_TEST Test="indexOf($currAttr/name(),$ifCheckVar)='-1'">
                        <THEN>
                          <CONTINUE/>
                        </THEN>
                        <ELSE/>
                      </IF_TEST>
                      <IF_TEST Test="indexOf($currAttr/name(),'checkBox_-_')!='-1' and strlen($currAttr/@Value)!='0'">
                        <THEN>
                          <SET FromValue="{substringAfter($currAttr/name(),'checkBox_-_')}" Var="tagName"/>
                          <SET FromValue="{substringBefore($tagName,'_-_ter')}" Var="tagName"/>
                          <SET FromValue="{trim($thisParam/ROOT/PARAMETERS/*[name()=$tagName]/@Value)}" Var="content"/>
                          <SET FromValue="{$thisParam/ROOT/PARAMETERS/*[name()=$tagName]/@Value}" Var="strContent"/>
                          <SET FromValue="1" Var="flag"/>
                          <SET FromValue="{substringAfter($tagName,$ifCheckVar)}" Var="phyColName"/>
                          <!--SET Var="phyColType" FromValue="{$DocPropertiesVar/NON_MDM_DOCUMENTS/DOCUMENT/PROPERTY[@Name=$phyColName]/@Type}"/-->
                          <FOR_EACH SelectList="$DocProVar/*" CurrentElement="tVal">
                            <IF_TEST Test="$tVal/tableName/@Value=$tableList/tableName/@Value and $tVal/tableNamePhy/@Value=$tableList/tableNamePhy/@Value and $tVal/columnNamePhy/@Value=$phyColName">
                              <THEN>
                                <SET FromValue="{$tVal/dataType/@Value}" Var="phyColType"/>
                                <BREAK/>
                              </THEN>
                              <ELSE/>
                            </IF_TEST>
                          </FOR_EACH>
                          <IF_TEST Test="$phyColType='int'">
                            <THEN>
                              <IF_TEST Test="strlen($content)!=0">
                                <THEN>
                                  <SET FromValue="{$phyColName}={$content}" Var="temp"/>
                                </THEN>
                                <ELSE>
                                  <SET FromValue="{$phyColName}=null" Var="temp"/>
                                </ELSE>
                              </IF_TEST>
                            </THEN>
                            <ELSE>
                              <IF_TEST Test="$phyColType='date'">
                                <THEN>
                                  <IF_TEST Test="strlen($content)!=0">
                                    <THEN>
                                      <SET FromValue="MM/dd/yyyy" Var="dbFormat"/>
                                      <SET FromValue="MM/dd/yyyy" Var="dateFormat"/>
                                      <NATIVE_FUNCTION MethodName="parseDate" ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" AssignToVar="nativeReturn">
                                        <PARAM Var="content" Caption="date"/>
                                        <PARAM Var="dateFormat" Caption="format"/>
                                        <PARAM Var="dbFormat" Caption="dbFormat"/>
                                      </NATIVE_FUNCTION>
                                      <SET FromValue="{$phyColName} = CAST('{trim($nativeReturn)}' AS DATE FORMAT 'MM/dd/yyyy')" Var="temp"/>
                                    </THEN>
                                    <ELSE>
                                      <SET FromValue="{$phyColName} = null" Var="temp"/>
                                    </ELSE>
                                  </IF_TEST>
                                </THEN>
                                <ELSE>
                                  <IF_TEST Test="$phyColType='timestamp'">
                                    <THEN>
                                      <IF_TEST Test="strlen($content)!=0">
                                        <THEN>
                                          <SET FromValue="MM/dd/yyyy HH:mm:ss" Var="dbFormat"/>
                                          <SET FromValue="MM/dd/yyyy HH:mm:ss" Var="timeFormat"/>
                                          <NATIVE_FUNCTION MethodName="parseDate" ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" AssignToVar="nativeReturn">
                                            <PARAM Var="content" Caption="date"/>
                                            <PARAM Var="timeFormat" Caption="format"/>
                                            <PARAM Var="dbFormat" Caption="dbFormat"/>
                                          </NATIVE_FUNCTION>
                                          <SET FromValue="{$phyColName} = '{trim($nativeReturn)}' (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS')" Var="temp"/>
                                        </THEN>
                                        <ELSE>
                                          <SET FromValue="{$phyColName} = null" Var="temp"/>
                                        </ELSE>
                                      </IF_TEST>
                                    </THEN>
                                    <ELSE>
                                      <IF_TEST Test="$phyColType='decimal' and strlen($content)=0">
                                        <THEN>
                                          <SET FromValue="{$phyColName}=null" Var="temp"/>
                                        </THEN>
                                        <ELSE>
                                          <IF_TEST Test="$phyColType='string'">
                                            <THEN>
                                              <SET Var="replace" FromValue="'"/>
                                              <IF_TEST Test="contains($strContent/@Value,$replace)">
                                                <THEN>
                                                  <SET Var="replaceWith" FromValue="''"/>
                                                  <SET Var="strContent" FromValue="{strReplaceAll($strContent/@Value,$replace,$replaceWith)}"/>
                                                </THEN>
                                              </IF_TEST>
                                              <SET FromValue="{$phyColName}='{$strContent}'" Var="temp"/>
                                            </THEN>
                                            <ELSE>
                                              <SET FromValue="{$phyColName}='{$content}'" Var="temp"/>
                                            </ELSE>
                                          </IF_TEST>
                                        </ELSE>
                                      </IF_TEST>
                                    </ELSE>
                                  </IF_TEST>
                                </ELSE>
                              </IF_TEST>
                            </ELSE>
                          </IF_TEST>
                          <IF_TEST Test="$temp!=null">
                            <THEN>
                              <SET FromValue="{$updateString} {$temp} ," Var="updateString"/>
                              <SET FromValue="1" Var="flag1"/>
                            </THEN>
                            <ELSE/>
                          </IF_TEST>
                        </THEN>
                        <ELSE/>
                      </IF_TEST>
                    </FOR_EACH>
                    <SET FromValue="{subString($updateString,0,strlen($updateString)-1)}" Var="updateString"/>
                    <SET FromValue="where " Var="whereCond"/>
                    <IF_TEST Test="$flag1='0'">
                      <THEN>
                        <CONTINUE/>
                      </THEN>
                      <ELSE/>
                    </IF_TEST>
                    <FOR_EACH SelectList="$thisParam/ROOT/ID_VAR/*" CurrentElement="idCurr">
                      <SET Var="replace" FromValue="'"/>
                      <IF_TEST Test="contains($idCurr/@Value,$replace)">
                        <THEN>
                          <SET Var="replaceWith" FromValue="''"/>
                          <SET DocVar="idCurr" FromValue="{strReplaceAll($idCurr/@Value,$replace,$replaceWith)}"/>
                        </THEN>
                      </IF_TEST>
                      <IF_TEST Test="contains($idCurr/@Value,concat($tableList/dbName/@Value,'.',$tableList/tableNamePhy/@Value)) = 'false' and  contains($idCurr/@Value,$tableList/tableName/@Value) = 'false' and contains($idCurr/@Value,'=')">
                        <THEN>
                          <CONTINUE/>
                        </THEN>
                      </IF_TEST>
                      <SET FromValue="{strSplit($idCurr/@Value,'#')}" Var="tempRowId"/>
                      <SET FromValue="{$whereCond} ( " Var="whereCond"/>
                      <FOR_EACH SelectList="$tempRowId/*" CurrentElement="tokenVals">
                        <IF_TEST Test="indexOf($tokenVals/@Value,$ifCheckVar)!='-1'">
                          <THEN>
                            <SET FromValue="{trim(substringBefore($tokenVals/@Value,'='))}" Var="colName1"/>
                            <SET FromValue="{$DocProVar/cwSearchResultsColumns[concat(dbName/@Value,'.',tableNamePhy/@Value,'.',columnNamePhy/@Value)=$colName1]/dataType/@Value}" Var="ConfigDataType"/>
                            <IF_TEST Test="$ConfigDataType='BIGINT'">
                              <THEN>
                                <SET FromValue="= {trim(substringAfter($tokenVals/@Value,'='))}" Var="colVal1"/>
                              </THEN>
                              <ELSE>
                                <SET FromValue="= '{trim(substringAfter($tokenVals/@Value,'='))}'" Var="colVal1"/>
                              </ELSE>
                            </IF_TEST>
                            <IF_TEST Test="$ConfigDataType='timestamp'">
                              <THEN>
                                <SET FromValue="{$whereCond} ({$colName1}  {$colVal1} (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS') ) and" Var="whereCond"/>
                              </THEN>
                              <ELSE>
                                <IF_TEST Test="$ConfigDataType='date'">
                                  <THEN>
                                    <SET FromValue="{trim(subString(substringAfter($colVal1,'='),2,strlen(substringAfter($colVal1,'='))-1))}" Var="dateValue1"/>
                                    <SET FromValue="MM/dd/yyyy" Var="dbFormat1"/>
                                    <SET FromValue="MM/dd/yyyy" Var="dateFormat1"/>
                                    <NATIVE_FUNCTION MethodName="parseDate" ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" AssignToVar="nativeReturnValue">
                                      <PARAM Var="dateValue1" Caption="date"/>
                                      <PARAM Var="dateFormat1" Caption="format"/>
                                      <PARAM Var="dbFormat1" Caption="dbFormat"/>
                                    </NATIVE_FUNCTION>
                                    <SET FromValue="{$whereCond} ({$colName1} = CAST('{trim($nativeReturnValue)}' AS DATE FORMAT 'MM/dd/yyyy')) and" Var="whereCond"/>
                                  </THEN>
                                  <ELSE>
                                    <SET FromValue="{concat($whereCond,' ',$colName1,$colVal1,' and')}" Var="whereCond"/>
                                  </ELSE>
                                </IF_TEST>
                              </ELSE>
                            </IF_TEST>
                          </THEN>
                          <ELSE/>
                        </IF_TEST>
                      </FOR_EACH>
                      <SET FromValue="{subString($whereCond,0,strlen($whereCond)-3)} ) or " Var="whereCond"/>
                    </FOR_EACH>
                    <SET FromValue="{subString($whereCond,0,strlen($whereCond)-5)} )" Var="whereCond"/>
                    <SET FromValue="{$updateString} {$whereCond}" Var="qSql"/>
                    <EXECUTE_SQL_QUERY Value="{$qSql}" HandleException="true" Mode="Write" AssignToVar="queryOut"/>
                    <IF_TEST Test="$queryOut/@Status='Success'">
                      <THEN>
                        <SET FromValue="Record(s) submitted successfully." Var="alertGreen"/>
                      </THEN>
                      <ELSE>
                        <SET FromValue="{$queryOut/@Description}" Var="alertRed"/>
                        <SET Var="alertGreen" FromValue=" "/>
                        <TO_DOCVAR AssignToVar="thisReturn">
                          <ROOT>
                            <alertGreen Value="{$alertGreen}"/>
                            <alertRed Value="{$alertRed}"/>
                          </ROOT>
                        </TO_DOCVAR>
                        <RAISE_EXCEPTION Value="Error in DB transaction"/>
                      </ELSE>
                    </IF_TEST>
                  </THEN>
                  <ELSE/>
                </IF_TEST>
              </ELSE>
            </IF_TEST>
          </FOR_EACH>
          <IF_TEST Test="strlen($eName)!=0">
            <THEN>
              <DO_ENTITY_PERSIST PersistTo="BCM_MASTER" AssignToVar="DDP_Result" ServiceName="BCM_MASTER" Source="EXTERNAL" DocumentName="{$eName}" Action="MASS_UPDATE" EntityName="{$eName}" EntityTables="{subString($depCommand/@tableList,0,strlen($depCommand/@tableList)-1)}">
                <TO_XML SelectList="$depCommand/*"/>
              </DO_ENTITY_PERSIST>
              <IF_TEST Test="$DDP_Result/VALIDATION_RESULT/@Value='SUCCESS'">
                <THEN>
                  <IF_TEST Test="$DDP_Result/@Description = 'DO_ENTITY_PERSIST executed successfully, Record sent for approval'">
                    <THEN>
                      <SET Var="alertGreen" FromValue="Record(s) submitted successfully."/>
                      <SET Var="alertRed" FromValue=""/>
                    </THEN>
                    <ELSE>
                      <SET Var="alertGreen" FromValue="Record(s) submitted successfully."/>
                      <SET Var="alertRed" FromValue=""/>
                    </ELSE>
                  </IF_TEST>
                </THEN>
                <ELSE>
                  <IF_TEST Test="$DDP_Result/VALIDATION_RESULT/@Value='WARNING'">
                    <THEN>
                      <SET Var="alertGreen" FromValue="Record(s) submitted successfully."/>
                      <SET Var="alertRed" FromValue=""/>
                    </THEN>
                    <ELSE>
                      <IF_TEST Test="$DDP_Result/VALIDATION_RESULT/ERROR_CODE/@Value!=null">
                        <THEN>
                          <SET FromValue="{$DDP_Result/VALIDATION_RESULT/ERROR_CODE/@Value}" Var="alertRed"/>
                          <SET Var="alertGreen" FromValue=" "/>
                          <TO_DOCVAR AssignToVar="thisReturn">
                            <ROOT>
                              <alertGreen Value="{$alertGreen}"/>
                              <alertRed Value="{$alertRed}"/>
                            </ROOT>
                          </TO_DOCVAR>
                          <RAISE_EXCEPTION Value="Error in DB transaction"/>
                        </THEN>
                      </IF_TEST>
                    </ELSE>
                  </IF_TEST>
                </ELSE>
              </IF_TEST>
              <IF_TEST Test="$DDP_Result/UI_MESSAGE/@Value='SUCCESS'">
                <THEN>
                  <SET Var="alertGreen" FromValue="Record(s) submitted successfully."/>
                  <SET Var="alertRed" FromValue=""/>
                </THEN>
              </IF_TEST>
              <IF_TEST Test="$DDP_Result/UI_MESSAGE/@Value='ERROR'">
                <THEN>
                  <SET Var="alertGreen" FromValue=""/>
                  <SET Var="alertRed" FromValue="Record(s) submitted successfully."/>
                </THEN>
              </IF_TEST>
              <IF_TEST Test="$DDP_Result/@Value='ERROR' or $DDP_Result/@Status='ERROR'">
                <THEN>
                  <SET Var="alertGreen" FromValue=""/>
                  <SET Var="alertRed" FromValue="Record(s) submission failed."/>
                </THEN>
              </IF_TEST>
            </THEN>
          </IF_TEST>
          <TO_DOCVAR AssignToVar="thisReturn">
            <ROOT>
              <alertGreen Value="{$alertGreen}"/>
              <alertRed Value="{$alertRed}"/>
            </ROOT>
          </TO_DOCVAR>
        </DO_TRANSACTION>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="createAdvancedFilterObject">
    <RULE>
      <ACTION>
        <REQUEST Name="formServiceDropDown" HandleException="true" AssignToVar="dropDownVal"/>
        <GET_DOCUMENT Name="cwSearchResultsTables" ServiceName="USER_SECURITY" AssignToVar="tabDet" DirtyRead="true">
          <workflowId Value="{$thisParam/WF_ID/@Value}"/>
        </GET_DOCUMENT>
        <SET Var="tableDetails" FromValue=""/>
        <SET Var="entireObj" FromValue=""/>
        <IF_TEST Test="$thisParam/JOIN_COND/@Value='Document Links' or $thisParam/JOIN_COND/@Value='No Link'">
          <THEN>
            <FOR_EACH CurrentElement="currAttr" SelectList="$tabDet/*">
              <SET Var="tableDetails" FromValue="{$tableDetails}['{$currAttr/tableName/@Value}',"/>
              <GET_DOC_PROPERTIES ServiceName="{$currAttr/serviceName/@Value}" TableName="{$currAttr/tableName/@Value}" AssignToVar="docProps"/>
              <IF_TEST Test="starts-with($currAttr/tableName/@Value,'error_')='true'">
                <THEN>
                  <SET Var="tableName" FromValue="{substringAfter($currAttr/tableName/@Value,'error_')}"/>
                  <GET_DOC_PROPERTIES ServiceName="{$currAttr/serviceName/@Value}" TableName="{$tableName}" AssignToVar="mstDocProps"/>
                  <FOR_EACH CurrentElement="currElem" SelectList="$docProps/DOCUMENT/*">
                    <IF_TEST Test="strlen($mstDocProps/DOCUMENT/PROPERTY[@Name=$currElem/@Name])!=0">
                      <THEN>
                        <SET DocVar="currElem" Attribute="Type" FromValue="{$mstDocProps/DOCUMENT/PROPERTY[@Name=$currElem/@Name]/@Type}"/>
                      </THEN>
                    </IF_TEST>
                  </FOR_EACH>
                </THEN>
              </IF_TEST>
              <GET_VALID_VALUES AssignToVar="validValues" ServiceName="{$currAttr/serviceName/@Value}">
                <DOCUMENT Name="{$currAttr/tableName/@Value}"/>
              </GET_VALID_VALUES>
              <FOR_EACH CurrentElement="docPropAttr" SelectList="$docProps/*/*">
                <IF_TEST Test="$docPropAttr/*/HIDDEN/@Value='yes'">
                  <THEN/>
                  <ELSE>
                    <SET Var="tableDetails" FromValue="{$tableDetails}'{$docPropAttr/@Name}',"/>
                    <TO_DOCVAR AssignToVar="AttrValidVal">
                      <ROOT/>
                    </TO_DOCVAR>
                    <TO_DOCVAR AssignToVar="AttrValidVal">
                      <TO_XML SelectList="$validValues/PROPERTY[@Name=$docPropAttr/@Name]"/>
                    </TO_DOCVAR>
                    <SET Var="validValVar" FromValue="|"/>
                    <FOR_EACH CurrentElement="vAttr" SelectList="$AttrValidVal/*">
                      <SET Var="validValVar" FromValue="{$validValVar}{$vAttr/@Value}|"/>
                    </FOR_EACH>
                    <SET Var="singleObj" FromValue="['{$currAttr/tableName/@Value}.{$docPropAttr/@Name}','p{$currAttr/tableRank/@Value}.{$docPropAttr/@Name}','{$docPropAttr/@Name}','{$docPropAttr/@ColumnName}','{$docPropAttr/@Type}','{$validValVar}']"/>
                    <SET Var="entireObj" FromValue="{$entireObj}{$singleObj},"/>
                  </ELSE>
                </IF_TEST>
              </FOR_EACH>
              <SET Var="tableDetails" FromValue="{subString($tableDetails,0,strlen($tableDetails)-1)}],"/>
            </FOR_EACH>
            <SET Var="tableDetails" FromValue="[{subString($tableDetails,0,strlen($tableDetails)-1)}]"/>
            <SET Var="entireObj" FromValue="[{subString($entireObj,0,strlen($entireObj)-1)}]"/>
          </THEN>
          <ELSE>
            <FOR_EACH CurrentElement="currAttr" SelectList="$tabDet/*">
              <IF_TEST Test="$currAttr/serviceName/@Value='nonMDM'">
                <THEN>
                  <SET Var="tabNameAr" FromValue="{$currAttr/dbName/@Value}.{$currAttr/tableName/@Value}"/>
                  <REQUEST Name="getNonMDMDocumentProperties" ServiceName="BPE_META" AssignToVar="nonMDMDocProps">
                    <NonMDMDocument Value="{$currAttr/tableName/@Value}" DbName="{$currAttr/dbName/@Value}"/>
                  </REQUEST>
                  <TO_DOCVAR AssignToVar="DocPropertiesVar">
                    <TO_XML SelectList="$nonMDMDocProps/*"/>
                  </TO_DOCVAR>
                </THEN>
                <ELSE>
                  <SET Var="serviceLogical" FromValue="{$dropDownVal/SERVICE_LIST/OPTION[@Id=$currAttr/serviceName/@Value]/@Value}"/>
                  <SET Var="tabNameAr" FromValue="{$serviceLogical}.{$currAttr/tableName/@Value}"/>
                  <GET_DOC_PROPERTIES ServiceName="{$currAttr/serviceName/@Value}" TableName="{$currAttr/tableName/@Value}" AssignToVar="DocPropertiesVar"/>
                  <IF_TEST Test="starts-with($currAttr/tableName/@Value,'error_')='true'">
                    <THEN>
                      <SET Var="tableName" FromValue="{substringAfter($currAttr/tableName/@Value,'error_')}"/>
                      <GET_DOC_PROPERTIES ServiceName="{$currAttr/serviceName/@Value}" TableName="{$tableName}" AssignToVar="mstDocProps"/>
                      <FOR_EACH CurrentElement="currElem" SelectList="$DocPropertiesVar/DOCUMENT/*">
                        <IF_TEST Test="strlen($mstDocProps/DOCUMENT/PROPERTY[@Name=$currElem/@Name])!=0">
                          <THEN>
                            <SET DocVar="currElem" Attribute="Type" FromValue="{$mstDocProps/DOCUMENT/PROPERTY[@Name=$currElem/@Name]/@Type}"/>
                          </THEN>
                        </IF_TEST>
                      </FOR_EACH>
                    </THEN>
                  </IF_TEST>
                  <GET_VALID_VALUES AssignToVar="validValues" ServiceName="{$currAttr/serviceName/@Value}">
                    <DOCUMENT Name="{$currAttr/tableName/@Value}"/>
                  </GET_VALID_VALUES>
                </ELSE>
              </IF_TEST>
              <SET Var="tableDetails" FromValue="{$tableDetails}['{$tabNameAr}',"/>
              <FOR_EACH CurrentElement="docPropAttr" SelectList="$DocPropertiesVar/*/*">
                <IF_TEST Test="$docPropAttr/*/HIDDEN/@Value='yes'">
                  <THEN/>
                  <ELSE>
                    <SET Var="tableDetails" FromValue="{$tableDetails}'{$docPropAttr/@Name}',"/>
                    <TO_DOCVAR AssignToVar="AttrValidVal">
                      <ROOT/>
                    </TO_DOCVAR>
                    <TO_DOCVAR AssignToVar="AttrValidVal">
                      <TO_XML SelectList="$validValues/PROPERTY[@Name=$docPropAttr/@Name]"/>
                    </TO_DOCVAR>
                    <SET Var="validValVar" FromValue="|"/>
                    <FOR_EACH CurrentElement="vAttr" SelectList="$AttrValidVal/*">
                      <SET Var="validValVar" FromValue="{$validValVar}{$vAttr/@Value}|"/>
                    </FOR_EACH>
                    <IF_TEST Test="$currAttr/serviceName/@Value='nonMDM'">
                      <THEN>
                        <SET Var="tabNamePhyAr" FromValue="{$currAttr/dbName/@Value}.{$currAttr/tableNamePhy/@Value}.{$docPropAttr/@Name}"/>
                        <SET Var="phyColName" FromValue="{$docPropAttr/@Name}"/>
                      </THEN>
                      <ELSE>
                        <SET Var="tabNamePhyAr" FromValue="{$currAttr/dbName/@Value}.{$currAttr/tableNamePhy/@Value}.{$docPropAttr/@ColumnName}"/>
                        <SET Var="phyColName" FromValue="{$docPropAttr/@ColumnName}"/>
                      </ELSE>
                    </IF_TEST>
                    <SET Var="singleObj" FromValue="['{$tabNameAr}.{$docPropAttr/@Name}','{$tabNamePhyAr}','{$docPropAttr/@Name}','{$phyColName}','{$docPropAttr/@Type}','{$validValVar}']"/>
                    <SET Var="entireObj" FromValue="{$entireObj}{$singleObj},"/>
                  </ELSE>
                </IF_TEST>
              </FOR_EACH>
              <SET Var="tableDetails" FromValue="{subString($tableDetails,0,strlen($tableDetails)-1)}],"/>
            </FOR_EACH>
            <SET Var="tableDetails" FromValue="[{subString($tableDetails,0,strlen($tableDetails)-1)}]"/>
            <SET Var="entireObj" FromValue="[{subString($entireObj,0,strlen($entireObj)-1)}]"/>
          </ELSE>
        </IF_TEST>
        <TO_DOCVAR AssignToVar="thisReturn">
          <RESPONSE>
            <TABLE_DETAILS Value="{$tableDetails}"/>
            <ENTIRE_DETAILS Value="{$entireObj}"/>
          </RESPONSE>
        </TO_DOCVAR>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getAdvancedFilterExpression">
    <RULE>
      <ACTION>
        <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS sel * from cw_advanced_filter where workflowid = {$thisParam/workflowId/@Value}; " AssignToVar="filterExp"/>
        <SET Var="expression" FromValue="{strReplaceAll($filterExp/SQL_RESULT/EXECUTABLE_EXPRESSION/@Value,'-_-',' ')}"/>
        <SET DocVar="thisReturn" Property="Advanced_Exp" FromValue="{$expression}"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="formatTableData">
    <RULE>
      <ACTION>
        <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="formatTableData" AssignToVar="thisReturn">
          <PARAM Var="thisParam" Caption="thisParam"/>
          <PARAM Var="thisContext" Caption="thisContext"/>
        </NATIVE_FUNCTION>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="upgradeConfigUI">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="sysColsToRemove">
          <ROOT>
            <SYS_TARGET_ID/>
            <SYS_AUTH_ID/>
            <SOURCE/>
            <CREATED_BY/>
            <CREATION_DATE/>
            <ENTITY_STATE/>
            <LAST_MODIFIED_BY/>
            <LAST_MODIFIED_DATE/>
            <SYS_TYPE/>
            <SYS_ERR_CODE/>
            <SYS_ERR_SEVERITY/>
            <!--TemporalValidTime/-->
          </ROOT>
        </TO_DOCVAR>
        <GET_DOCUMENT Name="configurableWorkflow" ServiceName="USER_SECURITY" AssignToVar="wfDetails" DirtyRead="true"/>
        <FOR_EACH CurrentElement="currAttrWf" SelectList="$wfDetails/*">
          <TO_DOCVAR AssignToVar="wkflwDet">
            <RESPONSE>
              <TO_XML DocVar="currAttrWf"/>
            </RESPONSE>
          </TO_DOCVAR>
          <MODIFY_DOCUMENT Name="configurableWorkflow" ServiceName="USER_SECURITY" AssignToVar="addResult">
            <DOCUMENT_CONTEXT>
              <workflowId Value="{$wkflwDet/*/workflowId/@Value}"/>
            </DOCUMENT_CONTEXT>
            <UPDATE_PROPERTIES>
              <templateType Value="Non Tabbed"/>
            </UPDATE_PROPERTIES>
          </MODIFY_DOCUMENT>
          <SET Var="templateUrl" FromValue="/start.x2ps?START_WORKFLOW=ConfigurableWorkflows_RT_T1&amp;SERVICE_NAME=UI_WORKFLOW&amp;SOLUTION_NAME=MDM&amp;workflowId={$wkflwDet/*/workflowId/@Value}"/>
          <MODIFY_DOC_SMART Name="LEFT_NAV_URL" ServiceName="USER_SECURITY">
            <DOCUMENT_CONTEXT>
              <PAGE_NAME Value="{$wkflwDet/*/pageName/@Value}"/>
              <PAGE_TYPE Value="PAGES"/>
            </DOCUMENT_CONTEXT>
            <UPDATE_PROPERTIES>
              <PAGE_URL Value="{$templateUrl}"/>
            </UPDATE_PROPERTIES>
          </MODIFY_DOC_SMART>
          <EXECUTE_SQL_QUERY AssignToVar="allColumns" Value="locking row for access select distinct attribute_Name as attributeName from CW_SEARCH_RESULTS_CFG_ATTR where ( container='create_edit' or  container='result') and prop_name='displayName' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value} "/>
          <EXECUTE_SQL_QUERY AssignToVar="resultColumns" Value="locking row for access select distinct attribute_Name as attributeName from CW_SEARCH_RESULTS_CFG_ATTR where container='result' and prop_name='displayName' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value} "/>
          <EXECUTE_SQL_QUERY AssignToVar="createEditDiplayName" Value="locking row for access select distinct * from CW_SEARCH_RESULTS_CFG_ATTR where container='create_edit' and prop_name='displayName' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value} "/>
          <EXECUTE_SQL_QUERY AssignToVar="createEditHoverText" Value="locking row for access select distinct * from CW_SEARCH_RESULTS_CFG_ATTR where container='create_edit' and prop_name='hoverText' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value} "/>
          <EXECUTE_SQL_QUERY Value=" INSERT INTO CW_SEARCH_RESULTS_COLUMNS ( WORKFLOW_ID, DB_NAME, TABLE_NAME, TABLE_NAME_PHY, COLUMN_NAME, COLUMN_NAME_PHY, CONTAINER, DATA_TYPE, MAX_LENGTH, COLUMN_ORDER ) sel WORKFLOW_ID, DB_NAME, TABLE_NAME, TABLE_NAME_PHY, COLUMN_NAME, COLUMN_NAME_PHY, 'result', DATA_TYPE, MAX_LENGTH, COLUMN_ORDER from CW_SEARCH_RESULTS_COLUMNS  Cr_edit where (TABLE_NAME, TABLE_NAME_PHY, COLUMN_NAME, COLUMN_NAME_PHY ) NOT IN (SELECT TABLE_NAME, TABLE_NAME_PHY, COLUMN_NAME, COLUMN_NAME_PHY FROM CW_SEARCH_RESULTS_COLUMNS WHERE Container = 'result' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value} ) AND   Container = 'create_edit' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value}" AssignToVar="val"/>
          <FOR_EACH CurrentElement="curRes" SelectList="$allColumns/SQL_RESULT/*">
            <IF_TEST Test="strlen($resultColumns/SQL_RESULT/attributeName[@Value=$curRes/@Value]/@Value)!=0">
              <THEN>
                <CONTINUE/>
              </THEN>
            </IF_TEST>
            <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
              <workflowId Value="{$wkflwDet/*/workflowId/@Value}"/>
              <attributeName Value="{$curRes/@Value}"/>
              <container Value="result"/>
              <fieldType Value="column"/>
              <propName Value="displayName"/>
              <propValue Value="{$createEditDiplayName/SQL_RESULT[ATTRIBUTE_NAME/@Value=$curRes/@Value]/PROP_VALUE/@Value}"/>
            </ADD_DOCUMENT>
            <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
              <workflowId Value="{$wkflwDet/*/workflowId/@Value}"/>
              <attributeName Value="{$curRes/@Value}"/>
              <container Value="result"/>
              <fieldType Value="column"/>
              <propName Value="hoverText"/>
              <propValue Value="{$createEditHoverText/SQL_RESULT[ATTRIBUTE_NAME/@Value=$curRes/@Value]/PROP_VALUE/@Value}"/>
            </ADD_DOCUMENT>
            <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
              <workflowId Value="{$wkflwDet/*/workflowId/@Value}"/>
              <attributeName Value="{$curRes/@Value}"/>
              <container Value="result"/>
              <fieldType Value="column"/>
              <propName Value="fieldType"/>
              <propValue Value="displayField"/>
            </ADD_DOCUMENT>
          </FOR_EACH>
          <EXECUTE_SQL_QUERY Value="DEL FROM CW_SEARCH_RESULTS_COLUMNS WHERE CONTAINER='create_edit' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value}"/>
          <EXECUTE_SQL_QUERY Value="INSERT INTO CW_SEARCH_RESULTS_COLUMNS ( WORKFLOW_ID, DB_NAME, TABLE_NAME, TABLE_NAME_PHY, COLUMN_NAME, COLUMN_NAME_PHY, CONTAINER, DATA_TYPE, MAX_LENGTH, COLUMN_ORDER ) SELECT WORKFLOW_ID, DB_NAME, TABLE_NAME, TABLE_NAME_PHY, COLUMN_NAME, COLUMN_NAME_PHY, 'create_edit', DATA_TYPE, MAX_LENGTH, COLUMN_ORDER FROM CW_SEARCH_RESULTS_COLUMNS  WHERE container='result' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value} "/>
          <EXECUTE_SQL_QUERY Value="DEL FROM CW_SEARCH_RESULTS_CFG_ATTR WHERE CONTAINER='create_edit' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value}"/>
          <EXECUTE_SQL_QUERY Value="INSERT INTO CW_SEARCH_RESULTS_CFG_ATTR         (         WORKFLOW_ID,         ATTRIBUTE_NAME,         CONTAINER,         FIELD_TYPE,         PROP_NAME,         PROP_VALUE         )         SELECT         WORKFLOW_ID,         ATTRIBUTE_NAME,         'create_edit',         FIELD_TYPE,         PROP_NAME,         PROP_VALUE         FROM CW_SEARCH_RESULTS_CFG_ATTR WHERE CONTAINER='result' and PROP_NAME='displayName' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value} "/>
          <EXECUTE_SQL_QUERY Value="INSERT INTO CW_SEARCH_RESULTS_CFG_ATTR         (         WORKFLOW_ID,         ATTRIBUTE_NAME,         CONTAINER,         FIELD_TYPE,         PROP_NAME,         PROP_VALUE         )         SELECT         WORKFLOW_ID,         ATTRIBUTE_NAME,         'create_edit',         FIELD_TYPE,         PROP_NAME,         PROP_VALUE         FROM CW_SEARCH_RESULTS_CFG_ATTR WHERE CONTAINER='result' and PROP_NAME='hoverText' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value} "/>
          <EXECUTE_SQL_QUERY Value="Locking row for access sel * from  CW_SEARCH_RESULTS_CFG_ATTR  where prop_name='ColorCode' and Container='result' and WORKFLOW_ID={$wkflwDet/*/workflowId/@Value}  " AssignToVar="colorCode" ReturnRowCount="yes"/>
          <GET_DOCUMENT Name="cwSearchResultsTables" ServiceName="USER_SECURITY" AssignToVar="tabDet" DirtyRead="true">
            <workflowId Value="{$wkflwDet/*/workflowId/@Value}"/>
          </GET_DOCUMENT>
          <GET_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="allAttributes" DirtyRead="true">
            <SELECT>
              <attributeName/>
            </SELECT>
            <workflowId Value="{$wkflwDet/*/workflowId/@Value}"/>
            <propName Value="displayName"/>
            <container Value="create_edit"/>
          </GET_DOCUMENT>
          <FOR_EACH CurrentElement="attName" SelectList="$allAttributes/cwSearchResultsConfigAttr/attributeName">
            <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
              <workflowId Value="{$wkflwDet/*/workflowId/@Value}"/>
              <attributeName Value="{$attName/@Value}"/>
              <container Value="create_edit"/>
              <fieldType Value="column"/>
              <propName Value="DefaultValue"/>
              <propValue Value=""/>
            </ADD_DOCUMENT>
            <IF_TEST Test="$colorCode/@TotalRowCount&lt;1">
              <THEN>
                <ADD_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="addAttrResult">
                  <workflowId Value="{$wkflwDet/*/workflowId/@Value}"/>
                  <attributeName Value="{$attName/@Value}"/>
                  <container Value="result"/>
                  <fieldType Value="column"/>
                  <propName Value="ColorCode"/>
                  <propValue Value=""/>
                </ADD_DOCUMENT>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
          <FOR_EACH CurrentElement="curAttr" SelectList="$tabDet/*">
            <IF_TEST Test="$wkflwDet/*/joinMechanism/@Value='Explicit Join'">
              <THEN>
                <IF_TEST Test="$curAttr/serviceName/@Value='BCM_MASTER'">
                  <THEN>
                    <SET Var="prefix" FromValue="Master."/>
                  </THEN>
                </IF_TEST>
                <IF_TEST Test="$curAttr/serviceName/@Value='BCM_INPUT_STAGING'">
                  <THEN>
                    <SET Var="prefix" FromValue="Input."/>
                  </THEN>
                </IF_TEST>
                <IF_TEST Test="$curAttr/serviceName/@Value='nonMDM'">
                  <THEN>
                    <SET Var="prefix" FromValue="{$curAttr/dbName/@Value}."/>
                  </THEN>
                </IF_TEST>
                <SET Var="tableName" FromValue="{$prefix}{$curAttr/tableName/@Value}"/>
                <SET Var="tableNameToCheck" FromValue="{$curAttr/dbName/@Value}.{$curAttr/tableNamePhy/@Value}."/>
              </THEN>
              <ELSE>
                <SET Var="tableName" FromValue="{$curAttr/tableName/@Value}"/>
                <SET Var="tableNameToCheck" FromValue="{$curAttr/tableName/@Value}."/>
              </ELSE>
            </IF_TEST>
            <IF_TEST Test="$curAttr/serviceName/@Value='nonMDM'">
              <THEN>
                <REQUEST Name="getNonMDMDocumentProperties" ServiceName="BPE_META" AssignToVar="nonMDMDocProps">
                  <NonMDMDocument Value="{$curAttr/tableName/@Value}" DbName="{$curAttr/dbName/@Value}"/>
                </REQUEST>
                <TO_DOCVAR AssignToVar="DocPropertiesVar">
                  <TO_XML SelectList="$nonMDMDocProps/*"/>
                </TO_DOCVAR>
              </THEN>
              <ELSE>
                <GET_DOC_PROPERTIES ServiceName="{$curAttr/serviceName/@Value}" TableName="{$curAttr/tableName/@Value}" AssignToVar="DocPropertiesVar"/>
              </ELSE>
            </IF_TEST>
            <FOR_EACH CurrentElement="curIter" SelectList="$DocPropertiesVar/*/*">
              <IF_TEST Test="$wkflwDet/*/joinMechanism/@Value='Explicit Join'">
                <THEN>
                  <IF_TEST Test="$curAttr/serviceName/@Value='nonMDM'">
                    <THEN>
                      <SET Var="colNameToCheck" FromValue="{$curIter/@Name}"/>
                    </THEN>
                    <ELSE>
                      <SET Var="colNameToCheck" FromValue="{$curIter/@ColumnName}"/>
                    </ELSE>
                  </IF_TEST>
                </THEN>
                <ELSE>
                  <SET Var="colNameToCheck" FromValue="{$curIter/@Name}"/>
                </ELSE>
              </IF_TEST>
              <SET Var="finalTableNameToCheck" FromValue="{$tableNameToCheck}{$colNameToCheck}"/>
              <IF_TEST Test="strlen($allAttributes/cwSearchResultsConfigAttr/attributeName[@Value=$finalTableNameToCheck]/@Value)=0">
                <THEN>
                  <CONTINUE/>
                </THEN>
              </IF_TEST>
              <SET Var="editable" FromValue="true"/>
              <IF_TEST Test="$curAttr/serviceName/@Value!='nonMDM'">
                <THEN>
                  <IF_TEST Test="strlen($sysColsToRemove/*[name()=$curIter/@Name]/name())!=0">
                    <THEN>
                      <SET Var="editable" FromValue="false"/>
                    </THEN>
                  </IF_TEST>
                </THEN>
              </IF_TEST>
              <IF_TEST Test="$curIter/@IsTemporal='true'">
                <THEN>
                  <SET Var="editable" FromValue="false"/>
                </THEN>
              </IF_TEST>
              <REQUEST Name="populateAttribValues" AssignToVar="test" HandleException="true" ServiceName="UI_WORKFLOW">
                <ServiceName Value="{$curAttr/serviceName/@Value}"/>
                <TableName Value="{$tableName}"/>
                <resultColumn Value="{$tableName}.{$curIter/@Name}"/>
                <dbName Value="{$curAttr/dbName/@Value}"/>
                <tableNamePhy Value="{$curAttr/tableNamePhy/@Value}"/>
                <columnNamePhy Value="{ifElse($wkflwDet/*/joinMechanism/@Value='Explicit Join',$colNameToCheck,$curIter/@ColumnName)}"/>
                <workflowId Value="{$wkflwDet/*/workflowId/@Value}"/>
                <joinCondition Value="{$wkflwDet/*/joinMechanism/@Value}"/>
                <Editable Value="{$editable}"/>
              </REQUEST>
            </FOR_EACH>
          </FOR_EACH>
        </FOR_EACH>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="CheckUserActivity">
    <RULE>
      <ACTION>
        <REQUEST Name="getDocumentAccessControlList" AssignToVar="docAccesControlList" ServiceName="USER_SECURITY">
          <USER_ID Value="{$UserId}"/>
        </REQUEST>
        <SET Var="canCreate" FromValue="true"/>
        <SET Var="canView" FromValue="true"/>
        <SET Var="canDelete" FromValue="true"/>
        <SET Var="canEdit" FromValue="true"/>
        <FOR_EACH CurrentElement="curAttr" SelectList="$thisParam/TABLE_DETAILS/*/cwSearchResultsTables">
          <IF_TEST Test="$curAttr/serviceName/@Value!='nonMDM'">
            <THEN>
              <SET Var="docActivityName" FromValue="{concat( $curAttr/serviceName/@Value , ':' , $curAttr/tableName/@Value )}"/>
              <SET Var="allDocActivityName" FromValue="{concat( $curAttr/serviceName/@Value , ':' , 'All' )}"/>
              <SET Var="docActivityValue" FromValue="NULL"/>
              <IF_TEST Test="$docAccesControlList/UIFORM_ACTIVITIES/UIFORM_ACTIVITY[@Value = $docActivityName] != null">
                <THEN>
                  <SET Var="docActivityValue" FromValue="{$docAccesControlList/UIFORM_ACTIVITIES/UIFORM_ACTIVITY[@Value = $docActivityName]/@AccessLevel}"/>
                </THEN>
                <ELSE>
                  <IF_TEST Test="$docAccesControlList/UIFORM_ACTIVITIES/UIFORM_ACTIVITY[@Value = $allDocActivityName] !=null">
                    <THEN>
                      <SET Var="docActivityValue" FromValue="{$docAccesControlList/UIFORM_ACTIVITIES/UIFORM_ACTIVITY[@Value = $allDocActivityName]/@AccessLevel}"/>
                    </THEN>
                  </IF_TEST>
                </ELSE>
              </IF_TEST>
              <IF_TEST Test="$docActivityValue='NULL'">
                <THEN>
                  <CONTINUE/>
                </THEN>
              </IF_TEST>
              <IF_TEST Test="contains($docActivityValue,'View') and $canView='true'">
                <THEN>
                  <SET Var="canView" FromValue="true"/>
                </THEN>
                <ELSE>
                  <SET Var="canView" FromValue="false"/>
                </ELSE>
              </IF_TEST>
              <IF_TEST Test="contains($docActivityValue,'Add') and $canCreate='true'">
                <THEN>
                  <SET Var="canCreate" FromValue="true"/>
                </THEN>
                <ELSE>
                  <SET Var="canCreate" FromValue="false"/>
                </ELSE>
              </IF_TEST>
              <IF_TEST Test="contains($docActivityValue,'Update') and $canEdit='true'">
                <THEN>
                  <SET Var="canEdit" FromValue="true"/>
                </THEN>
                <ELSE>
                  <SET Var="canEdit" FromValue="false"/>
                </ELSE>
              </IF_TEST>
              <IF_TEST Test="contains($docActivityValue,'Remove') and $canDelete='true'">
                <THEN>
                  <SET Var="canDelete" FromValue="true"/>
                </THEN>
                <ELSE>
                  <SET Var="canDelete" FromValue="false"/>
                </ELSE>
              </IF_TEST>
            </THEN>
          </IF_TEST>
        </FOR_EACH>
        <TO_DOCVAR AssignToVar="thisReturn">
          <ACTIVITIES>
            <canView Value="{$canView}"/>
            <canCreate Value="{$canCreate}"/>
            <canDelete Value="{$canDelete}"/>
            <canEdit Value="{$canEdit}"/>
          </ACTIVITIES>
        </TO_DOCVAR>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getFilterExpressionSingleTable">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="tempThisParam">
          <PARAMETERS>
            <TO_XML SelectList="$thisParam/PARAMS/*"/>
          </PARAMETERS>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="formTags">
          <FORM_TAGS/>
        </TO_DOCVAR>
        <GET_DOCUMENT Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" AssignToVar="workflowCols" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <container Value="result"/>
        </GET_DOCUMENT>
        <FOR_EACH CurrentElement="curAttr" SelectList="$workflowCols/*">
          <SET Var="colName" FromValue="{$curAttr/tableName/@Value}.{$curAttr/columnName/@Value}"/>
          <TO_DOCVAR AssignToVar="tempCols">
            <Temp/>
          </TO_DOCVAR>
          <IF_TEST Test="$curAttr/dataType/@Value='int' or $curAttr/dataType/@Value='bigint' or lowerCase($curAttr/dataType/@Value)='periodtimestamp6' or lowerCase($curAttr/dataType/@Value)='periodtimestamp' or lowerCase($curAttr/dataType/@Value)='perioddate'">
            <THEN>
              <SET DocVar="tempCols" Attribute="Operator" FromValue="true"/>
            </THEN>
          </IF_TEST>
          <IF_TEST Test="$curAttr/dataType/@Value='date' or $curAttr/dataType/@Value='datetime' or $curAttr/dataType/@Value='timestamp'">
            <THEN>
              <SET DocVar="tempCols" Attribute="Range" FromValue="true"/>
              <SET DocVar="tempCols" Attribute="IsFilter" FromValue="true"/>
            </THEN>
            <ELSE>
              <SET Var="colName" FromValue="FILTER_{$colName}"/>
            </ELSE>
          </IF_TEST>
          <SET_NAME DocVar="tempCols" FromValue="{$colName}"/>
          <ADD_CHILDREN DocVar="formTags" FromDocVar="tempCols"/>
        </FOR_EACH>
        <SET Var="filt_EntityState" FromValue="{'FILTER_'}{$curAttr/tableName/@Value}{'.ENTITY_STATE'}"/>
        <FORM_SEARCH_FILTER Value="{$tempThisParam}" AssignToVar="filterXml">
          <TO_XML SelectList="$formTags/*"/>
        </FORM_SEARCH_FILTER>
        <FOR_EACH SelectList="$filterXml/*/*" CurrentElement="currentSearchColumn">
          <SET_NAME DocVar="currentSearchColumn" FromValue="{substringAfter($currentSearchColumn/name(),'FILTER_')}"/>
          <SET_NAME DocVar="currentSearchColumn" FromValue="{substringAfter($currentSearchColumn/name(),'.')}"/>
        </FOR_EACH>
        <IF_TEST Test="($thisParam/PARAMS/SRVC_NAME/@Value='BCM_MASTER' or $thisParam/PARAMS/SRVC_NAME/@Value='BCM_VERSION_STAGING') and starts-with($curAttr/tableName/@Value,'error_')='false'">
          <THEN>
            <SET Var="count" FromValue="0"/>
            <FOR_EACH CurrentElement="currElem" SelectList="$thisParam/PARAMS/*">
              <IF_TEST Test="$currElem/name() = $filt_EntityState/@Value and $currElem/@Value = ''">
                <THEN>
                  <SET Var="count" FromValue="1"/>
                  <BREAK/>
                </THEN>
              </IF_TEST>
            </FOR_EACH>
            <IF_TEST Test="$count/@Value = '1'">
              <THEN>
                <TO_DOCVAR AssignToVar="selAllDoc">
                  <FILTER Name="{$filt_EntityState/@Value}">
                    <ENTITY_STATE Value="SELECT_ALL" MatchBy="EQUAL"/>
                  </FILTER>
                </TO_DOCVAR>
                <ADD_CHILDREN DocVar="filterXml" FromDocVar="selAllDoc"/>
              </THEN>
            </IF_TEST>
          </THEN>
        </IF_TEST>
        <TO_DOCVAR AssignToVar="thisReturn">
          <RESPONSE>
            <TO_XML DocVar="filterXml"/>
          </RESPONSE>
        </TO_DOCVAR>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getFilterExpressionMultipleTable">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="tempThisParam">
          <PARAMETERS>
            <TO_XML SelectList="$thisParam/PARAMS/*"/>
          </PARAMETERS>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="thisReturn">
          <RESPONSE/>
        </TO_DOCVAR>
        <GET_DOCUMENT Name="cwSearchResultsTables" ServiceName="USER_SECURITY" HandleException="true" AssignToVar="tabDetails" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <ORDER_BY>
            <tableRank/>
          </ORDER_BY>
        </GET_DOCUMENT>
        <FOR_EACH CurrentElement="curAttr1" SelectList="$tabDetails/*">
          <GET_DOCUMENT Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" AssignToVar="workflowCols" DirtyRead="true">
            <workflowId Value="{$thisParam/workflowId/@Value}"/>
            <container Value="result"/>
            <tableName Value="{$curAttr1/tableName/@Value}"/>
            <tableNamePhy Value="{$curAttr1/tableNamePhy/@Value}"/>
            <dbName Value="{$curAttr1/dbName/@Value}"/>
            <ORDER_BY>
              <columnOrder/>
            </ORDER_BY>
          </GET_DOCUMENT>
          <TO_DOCVAR AssignToVar="formTags">
            <FORM_TAGS/>
          </TO_DOCVAR>
          <FOR_EACH CurrentElement="curAttr" SelectList="$workflowCols/*">
            <SET Var="colName" FromValue="{$curAttr/tableName/@Value}.{$curAttr/columnName/@Value}"/>
            <TO_DOCVAR AssignToVar="tempCols">
              <Temp/>
            </TO_DOCVAR>
            <IF_TEST Test="$curAttr/dataType/@Value='int' or $curAttr/dataType/@Value='bigint'">
              <THEN>
                <SET DocVar="tempCols" Attribute="Operator" FromValue="true"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="$curAttr/dataType/@Value='date' or $curAttr/dataType/@Value='perioddate' or $curAttr/dataType/@Value='datetime' or $curAttr/dataType/@Value='timestamp' or $curAttr/dataType/@Value='periodtimestamp6' or $curAttr/dataType/@Value='periodtimedtamp'">
              <THEN>
                <SET DocVar="tempCols" Attribute="Range" FromValue="true"/>
                <SET DocVar="tempCols" Attribute="IsFilter" FromValue="true"/>
              </THEN>
              <ELSE>
                <SET Var="colName" FromValue="FILTER_{$colName}"/>
              </ELSE>
            </IF_TEST>
            <SET_NAME DocVar="tempCols" FromValue="{$colName}"/>
            <ADD_CHILDREN DocVar="formTags" FromDocVar="tempCols"/>
          </FOR_EACH>
          <FORM_SEARCH_FILTER Value="{$tempThisParam}" AssignToVar="filterXml">
            <TO_XML SelectList="$formTags/*"/>
          </FORM_SEARCH_FILTER>
          <FOR_EACH SelectList="$filterXml/*/*" CurrentElement="currentSearchColumn">
            <SET_NAME DocVar="currentSearchColumn" FromValue="{substringAfter($currentSearchColumn/name(),'FILTER_')}"/>
            <SET_NAME DocVar="currentSearchColumn" FromValue="{substringAfter($currentSearchColumn/name(),'.')}"/>
          </FOR_EACH>
          <TO_DOCVAR AssignToVar="filterVal">
            <RESPONSE>
              <TO_XML DocVar="filterXml"/>
            </RESPONSE>
          </TO_DOCVAR>
          <SET_NAME DocVar="filterVal" FromValue="{concat('TABLE_',$curAttr1/tableRank/@Value)}"/>
          <ADD_CHILDREN DocVar="thisReturn" FromDocVar="filterVal"/>
        </FOR_EACH>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getFilterExpressionExpJoinData">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="matchByDet">
          <ROOT>
            <OPTION Id="=" Value="EQUAL"/>
            <OPTION Id="&lt;>" Value="NOT_EQUAL"/>
            <OPTION Id=">" Value="GREATER"/>
            <OPTION Id="&lt;" Value="LESS"/>
            <OPTION Id=">=" Value="GREATER_EQUAL"/>
            <OPTION Id="&lt;=" Value="LESS_EQUAL"/>
          </ROOT>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="tempThisParam">
          <PARAMETERS>
            <TO_XML SelectList="$thisParam/PARAMS/*"/>
          </PARAMETERS>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="formTags">
          <FORM_TAGS/>
        </TO_DOCVAR>
        <GET_DOCUMENT Name="cwSearchResultsColumns" ServiceName="USER_SECURITY" AssignToVar="workflowCols" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <container Value="result"/>
        </GET_DOCUMENT>
        <SET Var="finalVar" FromValue=""/>
        <FOR_EACH CurrentElement="curAttr" SelectList="$workflowCols/*">
          <SET Var="colName" FromValue="{$curAttr/dbName/@Value}.{$curAttr/tableNamePhy/@Value}.{$curAttr/columnNamePhy/@Value}"/>
          <IF_TEST Test="$curAttr/dataType/@Value='int' or $curAttr/dataType/@Value='bigint'">
            <THEN>
              <SET Var="valVar" FromValue="{$tempThisParam/*[name()=concat('FILTER_',$colName)]/@Value}"/>
              <SET Var="matchBy" FromValue="{$tempThisParam/*[name()=concat('FILTER_',$colName,'_MATCH_BY')]/@Value}"/>
              <SET Var="matchByOp" FromValue="{$matchByDet/*[@Value=$matchBy]/@Id}"/>
              <IF_TEST Test="strlen($valVar)!=0">
                <THEN>
                  <SET Var="finalVar" FromValue="{$colName} {$matchByOp} {$valVar} AND {$finalVar}"/>
                </THEN>
                <ELSE>
                  <CONTINUE/>
                </ELSE>
              </IF_TEST>
            </THEN>
            <ELSE>
              <IF_TEST Test="$curAttr/dataType/@Value='date'">
                <THEN>
                  <SET Var="toDate" FromValue="{$tempThisParam/*[name()=concat('FILTER_TO_',$colName)]/@Value}"/>
                  <SET Var="endDate" FromValue="{$tempThisParam/*[name()=concat('FILTER_FROM_',$colName)]/@Value}"/>
                  <IF_TEST Test="strlen($toDate)!=0">
                    <THEN>
                      <SET Var="dbFormat" FromValue="MM/dd/yyyy"/>
                      <SET Var="dateFormat" FromValue="MM/dd/yyyy"/>
                      <SET Var="dateValue" FromValue="{trim($toDate/@Value)}"/>
                      <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="nativeReturnTo">
                        <PARAM Var="dateValue" Caption="date"/>
                        <PARAM Var="dateFormat" Caption="format"/>
                        <PARAM Var="dbFormat" Caption="dbFormat"/>
                      </NATIVE_FUNCTION>
                      <SET Var="dateValue" FromValue="{trim($endDate/@Value)}"/>
                      <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="nativeReturnEnd">
                        <PARAM Var="dateValue" Caption="date"/>
                        <PARAM Var="dateFormat" Caption="format"/>
                        <PARAM Var="dbFormat" Caption="dbFormat"/>
                      </NATIVE_FUNCTION>
                      <SET Var="finalVar" FromValue="{$colName} &lt;= CAST('{trim($nativeReturnTo)}' AS DATE FORMAT 'MM/dd/yyyy') AND {$colName} >= CAST('{trim($nativeReturnEnd)}' AS DATE FORMAT 'MM/dd/yyyy') AND {$finalVar}"/>
                    </THEN>
                    <ELSE>
                      <CONTINUE/>
                    </ELSE>
                  </IF_TEST>
                </THEN>
                <ELSE>
                  <IF_TEST Test="$curAttr/dataType/@Value='datetime' or $curAttr/dataType/@Value='timestamp'">
                    <THEN>
                      <SET Var="toDate" FromValue="{$tempThisParam/*[name()=concat('FILTER_TO_',$colName)]/@Value}"/>
                      <SET Var="endDate" FromValue="{$tempThisParam/*[name()=concat('FILTER_FROM_',$colName)]/@Value}"/>
                      <IF_TEST Test="strlen($toDate)!=0">
                        <THEN>
                          <SET Var="timeValue" FromValue="{trim($toDate/@Value)}"/>
                          <SET Var="timeFormat" FromValue="MM/dd/yyyy HH:mm:ss"/>
                          <SET Var="dbFormat" FromValue="MM/dd/yyyy HH:mm:ss"/>
                          <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="nativeReturnTo">
                            <PARAM Var="timeValue" Caption="date"/>
                            <PARAM Var="timeFormat" Caption="format"/>
                            <PARAM Var="dbFormat" Caption="dbFormat"/>
                          </NATIVE_FUNCTION>
                          <SET Var="timeValue" FromValue="{trim($endDate/@Value)}"/>
                          <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="parseDate" AssignToVar="nativeReturnFrom">
                            <PARAM Var="timeValue" Caption="date"/>
                            <PARAM Var="timeFormat" Caption="format"/>
                            <PARAM Var="dbFormat" Caption="dbFormat"/>
                          </NATIVE_FUNCTION>
                          <SET Var="finalVar" FromValue="{$colName} &lt;= '{trim($nativeReturnTo)}' (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS')  AND {$colName} >= '{trim($nativeReturnEnd)}' (timestamp(0), format 'MM/DD/YYYYBHH:MI:SS') AND {$finalVar}"/>
                        </THEN>
                        <ELSE>
                          <CONTINUE/>
                        </ELSE>
                      </IF_TEST>
                    </THEN>
                    <ELSE>
                      <SET Var="valVar" FromValue="{$tempThisParam/*[name()=concat('FILTER_',$colName)]/@Value}"/>
                      <SET Var="toReplace" FromValue="\*"/>
                      <SET Var="replaceWith" FromValue="\%"/>
                      <IF_TEST Test="strlen($valVar)!=0">
                        <THEN>
                          <SET Var="replacedString" FromValue="{strReplaceAll($valVar,$toReplace,$replaceWith)}"/>
                          <SET Var="finalVar" FromValue=" {$colName} like '{$replacedString}' AND {$finalVar}"/>
                        </THEN>
                        <ELSE>
                          <CONTINUE/>
                        </ELSE>
                      </IF_TEST>
                    </ELSE>
                  </IF_TEST>
                </ELSE>
              </IF_TEST>
            </ELSE>
          </IF_TEST>
        </FOR_EACH>
        <SET Var="finalVar" FromValue="{subString($finalVar,0,strlen($finalVar/@Value)-4)}"/>
        <TO_DOCVAR AssignToVar="thisReturn">
          <RESPONSE>
            <FILTER Value="{$finalVar}"/>
          </RESPONSE>
        </TO_DOCVAR>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getTemplateXML">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="fields">
          <FIELDS/>
        </TO_DOCVAR>
        <REQUEST Name="getDocumentProperties" ServiceName="UI_WORKFLOW" AssignToVar="DocPropertiesVar">
          <serviceName Value="{$thisParam/serviceName/@Value}"/>
          <tableName Value="{$thisParam/tableName/@Value}"/>
          <dbName Value="{$thisParam/dbName/@Value}"/>
        </REQUEST>
        <REQUEST Name="cwSearchResultsColumn" ServiceName="UI_WORKFLOW" HandleException="true" AssignToVar="serchResultColums">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
		  <container Value="result"/>
        </REQUEST>
        <FOR_EACH CurrentElement="curAttr" SelectList="$DocPropertiesVar/DOCUMENT/PROPERTY">
          <SET Var="test" FromValue="0"/>
          <FOR_EACH CurrentElement="curAttr1" SelectList="$serchResultColums/cwSearchResultsColumns">
            <IF_TEST Test="$curAttr/@Name = $curAttr1/columnName/@Value">
              <THEN>
                <SET Var="test" FromValue="1"/>
                <BREAK/>
              </THEN>
            </IF_TEST>
          </FOR_EACH>
          <IF_TEST Test="$test = 0">
            <THEN>
              <CONTINUE/>
            </THEN>
            <ELSE>
              <IF_TEST Test="$curAttr/*/HIDDEN/@Value='yes'">
                <THEN/>
                <ELSE>
                  <SET Var="type" FromValue="Text"/>
                  <IF_TEST Test="$curAttr/@Type='string'">
                    <THEN>
                      <SET Var="type" FromValue="Text"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$curAttr/@Type='boolean'">
                    <THEN>
                      <SET Var="type" FromValue="Boolean"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$curAttr/@Type='LongString' or $curAttr/@Type='Clob'">
                    <THEN>
                      <SET Var="type" FromValue="textarea"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$curAttr/@Type='datetime' or $curAttr/@Type='timestamp'">
                    <THEN>
                      <SET Var="type" FromValue="DateTime"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$curAttr/@Type='date'">
                    <THEN>
                      <SET Var="type" FromValue="Date"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$curAttr/@Type='int' or $curAttr/@Type='bigint'">
                    <THEN>
                      <SET Var="type" FromValue="Number"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$curAttr/@Type='float' or $curAttr/@Type='double' or $curAttr/@Type='decimal'">
                    <THEN>
                      <SET Var="type" FromValue="Number"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$curAttr/@Type='periodTimestamp' or $curAttr/@Type='periodTimestamp6'">
                    <THEN>
                      <SET Var="type" FromValue="PeriodTimeStamp"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$curAttr/@Type='periodDate'">
                    <THEN>
                      <SET Var="type" FromValue="PeriodDate"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="$curAttr/@Type='file'">
                    <THEN>
                      <SET Var="type" FromValue="File"/>
                    </THEN>
                  </IF_TEST>
                  <IF_TEST Test="strlen($curAttr/@DisplayName)!=0">
                    <THEN>
                      <SET Var="displayName" FromValue="{$curAttr/@DisplayName}"/>
                    </THEN>
                    <ELSE>
                      <SET Var="displayName" FromValue="{$curAttr/PRESENTATION/DISPLAY_NAME/@Value}"/>
                    </ELSE>
                  </IF_TEST>
                  <IF_TEST Test="strlen($displayName)=0">
                    <THEN>
                      <SET Var="displayName" FromValue="{$curAttr/@Name}"/>
                    </THEN>
                  </IF_TEST>
                  <TO_DOCVAR AssignToVar="temp">
                    <FIELD Name="{$curAttr/@Name}" DisplayType="{$type}" DisplayText="{$displayName}"/>
                  </TO_DOCVAR>
                  <ADD_CHILDREN DocVar="fields" FromDocVar="temp"/>
                </ELSE>
              </IF_TEST>
            </ELSE>
          </IF_TEST>
        </FOR_EACH>
        <TO_DOCVAR AssignToVar="thisReturn">
          <RESPONSE>
            <ROOT>
              <REPORT>
                <TO_XML DocVar="fields"/>
              </REPORT>
              <RESPONSE/>
            </ROOT>
          </RESPONSE>
        </TO_DOCVAR>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getCustomizeConfigTemplate">
    <RULE>
      <ACTION>
        <GET_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="selAttrResult" DirtyRead="true">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
          <container Value="result"/>
          <propName Value="displayName"/>
          <fieldType Value="column"/>
          <SELECT>
            <attributeName/>
            <propValue/>
          </SELECT>
        </GET_DOCUMENT>
        <REQUEST Name="cwSearchResultsColumn" ServiceName="UI_WORKFLOW" HandleException="true" AssignToVar="cwSearchResultsColumns">
          <workflowId Value="{$thisParam/workflowId/@Value}"/>
		  <container Value="result"/>
        </REQUEST>
        <TO_DOCVAR AssignToVar="fields">
          <FIELDS/>
        </TO_DOCVAR>
        <FOR_EACH CurrentElement="currColumn" SelectList="$cwSearchResultsColumns/cwSearchResultsColumns">
          <SET Var="currColumnName" FromValue="{$currColumn/columnName/@Value}"/>
          <SET Var="tableColumnName" FromValue="{$thisParam/tableName/@Value}{'.'}{$currColumnName/@Value}"/>
          <SET Var="displayName" FromValue="{$selAttrResult/cwSearchResultsConfigAttr[attributeName/@Value = $tableColumnName/@Value]/propValue/@Value}"/>
          <IF_TEST Test="strlen($displayName/@Value) = '0'">
            <THEN>
              <SET Var="displayName" FromValue="{$currColumnName}"/>
            </THEN>
          </IF_TEST>
          <TO_DOCVAR AssignToVar="temp">
            <FIELD Name="{$currColumnName/@Value}" DisplayText="{$displayName}"/>
          </TO_DOCVAR>
          <ADD_CHILDREN DocVar="fields" FromDocVar="temp"/>
        </FOR_EACH>
        <TO_DOCVAR AssignToVar="thisReturn">
          <RESPONSE>
            <ROOT>
              <REPORT>
                <TO_XML DocVar="fields"/>
              </REPORT>
              <RESPONSE/>
            </ROOT>
          </RESPONSE>
        </TO_DOCVAR>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="ConfigurableUITrigger">
    <RULE>
      <ACTION>
        <!-- This rule will be executed after the CRUD Operations -->
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="getNonSysDocPropertiesConfig">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="tempSort">
          <DOCUMENT/>
        </TO_DOCVAR>
        <SET Var="ServName" FromValue="{$thisParam/Service_Name/@Value}"/>
        <IF_TEST Test="($ServName != '') and ($ServName != null) ">
          <THEN>
            <IF_TEST Test="($ServName = 'NON_MDM')">
              <THEN>
                <REQUEST Name="getNonMDMDocumentProperties" ServiceName="BPE_META" AssignToVar="nonMDMDocProps">
                  <NonMDMDocument Value="{$thisParam/TableName/@Value}" DbName="{$thisParam/Source_Db/@Value}"/>
                </REQUEST>
                <FOR_EACH SelectList="$nonMDMDocProps/NON_MDM_DOCUMENTS/DOCUMENT/*" CurrentElement="currNonMdmProp">
                  <SET Attribute="ColumnName" DocVar="currNonMdmProp" FromValue="{$currNonMdmProp/@Name}"/>
                </FOR_EACH>
                <ADD_CHILDREN DocVar="tempSort" FromSelectList="$nonMDMDocProps/NON_MDM_DOCUMENTS/*"/>
              </THEN>
              <ELSE>
                <GET_DOC_PROPERTIES TableName="{$thisParam/TableName/@Value}" ServiceName="{$ServName}" AssignToVar="docProperties"/>
                <TO_DOCVAR AssignToVar="SysProps">
                  <SYS_PROPS>
                    <SYS_PROP Value="SYS_TARGET_ID"/>
                    <SYS_PROP Value="SYS_AUTH_ID"/>
                    <SYS_PROP Value="SOURCE"/>
                    <SYS_PROP Value="CREATED_BY"/>
                    <SYS_PROP Value="CREATION_DATE"/>
                    <SYS_PROP Value="ENTITY_STATE"/>
                    <SYS_PROP Value="LAST_MODIFIED_BY"/>
                    <SYS_PROP Value="LAST_MODIFIED_DATE"/>
                    <SYS_PROP Value="SYS_TYPE"/>
                    <SYS_PROP Value="SYS_ERR_CODE"/>
                    <SYS_PROP Value="SYS_ERR_SEVERITY"/>
                    <SYS_PROP Value="SYS_FILTER"/>
                    <SYS_PROP Value="WORKFLOW_ID"/>
                  </SYS_PROPS>
                </TO_DOCVAR>
                <FOR_EACH SelectList="$docProperties/DOCUMENT/*" CurrentElement="currProp">
                  <IF_TEST Test="($SysProps/SYS_PROP[@Value=$currProp/@Name]/@Value!=null) or (starts-with ($currProp/@Name, 'EXT_ATTRB_') or ($currProp/@IsTemporal='true') or ($currProp/*/HIDDEN/@Value='yes'))">
                    <THEN>
                      <SET_NAME DocVar="currProp" FromValue="DUMMY_REMOVE"/>
                    </THEN>
                  </IF_TEST>
                </FOR_EACH>
                <REMOVE_CHILDREN SelectList="$docProperties/*" ChildName="DUMMY_REMOVE" DocVar="docProperties"/>
                <ADD_CHILDREN DocVar="tempSort" FromSelectList="$docProperties/*"/>
              </ELSE>
            </IF_TEST>
          </THEN>
        </IF_TEST>
        <TO_DOCVAR AssignToVar="sortedResult">
          <DOCUMENT/>
        </TO_DOCVAR>
        <IF_TEST Test="$thisParam/Sort/@Value!='false'">
          <THEN>
            <XML_SORT DataType="string" SortOrder="Ascending" SortKey="@Name" AssignToVar="tempSort">
              <TO_XML SelectList="$tempSort/DOCUMENT/*"/>
            </XML_SORT>
          </THEN>
        </IF_TEST>
        <ADD_CHILDREN DocVar="sortedResult" FromSelectList="$tempSort/*"/>
        <ADD_CHILDREN DocVar="thisReturn" FromDocVar="sortedResult"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="createPeriodDataTimeDocVar">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="editProp">
          <ROOT/>
        </TO_DOCVAR>
        <SET Var="dbDotTableDotColumName" FromValue="{$thisParam/TABLE_DOT_COLUMN_NAME/@Value}"/>
        <SET Var="PeriodStart" FromValue="{$thisParam/*/*[name()=concat($dbDotTableDotColumName,'_PeriodStart')]/@Value}"/>
        <IF_TEST Test="$thisParam/*/*[name()=concat($dbDotTableDotColumName,'_PeriodEnd')]/@Value != ''">
          <THEN>
            <SET Var="PeriodEnd" FromValue="{$thisParam/*/*[name()=concat($dbDotTableDotColumName,'_PeriodEnd')]/@Value}"/>
          </THEN>
          <ELSE>
            <SET Var="PeriodEnd" FromValue="UNTIL_CHANGED"/>
          </ELSE>
        </IF_TEST>
        <SET Var="PeriodValue" FromValue="{concat($PeriodStart,' - ',$PeriodEnd)}"/>
        <SET Attribute="Value" DocVar="editProp" FromValue="{$PeriodValue}"/>
        <SET_NAME DocVar="editProp" FromValue="{$thisParam/COLUMN_NAME/@Value}"/>
        <ADD_CHILDREN DocVar="thisReturn" FromDocVar="editProp"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="fetchTableIds">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="IDDoc">
          <IDS/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="selectDoc">
          <SELECT/>
        </TO_DOCVAR>
        <SET Var="CountRowId" FromValue="0"/>
        <SET Var="DocTableName" FromValue="{$thisParam/cwSearchResultsTables/tableName/@Value}"/>
        <SET Var="DocServiceName" FromValue="{$thisParam/cwSearchResultsTables/serviceName/@Value}"/>
        <IF_TEST Test="$thisParam/joinMechanism/@Value='Explicit Join'">
          <THEN>
            <SET Var="nonMDMStr" FromValue=""/>
            <FOR_EACH SelectList="$thisParam/tableConfig/rowId" CurrentElement="currElem">
              <SET Var="CountRowId" FromValue="{int($CountRowId+1)}"/>
              <IF_TEST Test="$nonMDMStr/@Value=''">
                <THEN>
                  <SET Var="nonMDMStr" FromValue="{concat($nonMDMStr,trim($currElem/@Value))}"/>
                </THEN>
                <ELSE>
                  <SET Var="nonMDMStr" FromValue="{concat($nonMDMStr,',',trim($currElem/@Value))}"/>
                </ELSE>
              </IF_TEST>
            </FOR_EACH>
            <APPEND_TO_XML DocVar="selectDoc">
              <ID Value="{$nonMDMStr}"/>
            </APPEND_TO_XML>
            <REQUEST Name="getExplicitJoinTableData" ServiceName="UI_WORKFLOW" AssignToVar="tableData" HandleException="true">
              <maxRows Value="100000"/>
              <workflowId Value="{$workflowId}"/>
              <actionButton Value="searchRecord"/>
              <PARAMS>
                <parentRowId Value="{$DocTableName/@Value}"/>
                <TO_XML SelectList="$thisParam/*"/>
                <TO_XML SelectList="$thisParam/tableConfig/*"/>
                <cwSearchResultsTables>
                  <TO_XML SelectList="$thisParam/cwSearchResultsTables"/>
                </cwSearchResultsTables>
              </PARAMS>
              <TEST>
                <TO_XML DocVar="selectDoc"/>
              </TEST>
              <TO_XML DocVar="filterDetails"/>
            </REQUEST>
            <FOR_EACH SelectList="$tableData/*" CurrentElement="curElement">
              <SET Var="IdVar" FromValue=""/>
              <FOR_EACH SelectList="$curElement/*" CurrentElement="curId">
                <IF_TEST Test="$CountRowId=1">
                  <THEN>
                    <SET Var="IdVar" FromValue="{concat($IdVar,$curId/name(),'=',trim($curId/@Value))}"/>
                  </THEN>
                  <ELSE>
                    <IF_TEST Test="$IdVar/@value=''">
                      <THEN>
                        <SET Var="IdVar" FromValue="{concat($IdVar,$curId/name(),'=',trim($curId/@Value))}"/>
                      </THEN>
                      <ELSE>
                        <SET Var="IdVar" FromValue="{concat($IdVar,'#',$curId/name(),'=',trim($curId/@Value))}"/>
                      </ELSE>
                    </IF_TEST>
                  </ELSE>
                </IF_TEST>
              </FOR_EACH>
              <APPEND_TO_XML DocVar="IDDoc">
                <ID Value="{$IdVar}"/>
              </APPEND_TO_XML>
            </FOR_EACH>
          </THEN>
          <ELSE>
            <FOR_EACH SelectList="$thisParam/tableConfig/rowId" CurrentElement="currElem">
              <SET Var="CountRowId" FromValue="{int($CountRowId+1)}"/>
              <TO_DOCVAR AssignToVar="testVar">
                <Id1/>
              </TO_DOCVAR>
              <SET_NAME DocVar="testVar" FromValue="{substringAfter($currElem/@Value,'.')}"/>
              <ADD_CHILDREN DocVar="selectDoc" FromDocVar="testVar"/>
            </FOR_EACH>
            <REQUEST Name="getTableData" ServiceName="UI_WORKFLOW" AssignToVar="tableData" HandleException="true">
              <workflowId Value="{$thisParam/workflowId/@Value}"/>
              <maxRows Value="100000"/>
              <actionButton Value="searchRecord"/>
              <PARAMS>
                <TO_XML SelectList="$thisParam/*"/>
                <TO_XML SelectList="$thisParam/tableConfig/*"/>
                <SRVC_NAME Value="{$thisParam/cwSearchResultsTables/serviceName/@Value}"/>
              </PARAMS>
              <TEST>
                <TO_XML DocVar="selectDoc"/>
              </TEST>
              <TO_XML DocVar="filterDetails"/>
            </REQUEST>
            <FOR_EACH SelectList="$tableData/*" CurrentElement="curElement">
              <SET Var="IdVar" FromValue=""/>
              <FOR_EACH SelectList="$curElement/*" CurrentElement="curId">
                <IF_TEST Test="$CountRowId=1">
                  <THEN>
                    <SET Var="IdVar" FromValue="{trim($curId/@Value)}"/>
                  </THEN>
                  <ELSE>
                    <IF_TEST Test="$IdVar/@value=''">
                      <THEN>
                        <SET Var="IdVar" FromValue="{concat($IdVar,$curId/name(),'=',trim($curId/@Value))}"/>
                      </THEN>
                      <ELSE>
                        <SET Var="IdVar" FromValue="{concat($IdVar,'#',$curId/name(),'=',trim($curId/@Value))}"/>
                      </ELSE>
                    </IF_TEST>
                  </ELSE>
                </IF_TEST>
              </FOR_EACH>
              <APPEND_TO_XML DocVar="IDDoc">
                <ID Value="{$IdVar}"/>
              </APPEND_TO_XML>
            </FOR_EACH>
            <ADD_CHILDREN DocVar="thisReturn" FromDocVar="IDDoc"/>
          </ELSE>
        </IF_TEST>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="checkSelectedIdInPendingApproval">
    <RULE>
      <ACTION>
        <TO_DOCVAR AssignToVar="completeColVals">
          <Column/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="idNotSentForApproval">
          <NOT_SEND_APPROVAL_IDs/>
        </TO_DOCVAR>
        <TO_DOCVAR AssignToVar="idSentForApproval">
          <SEND_APPROVAL_IDs/>
        </TO_DOCVAR>
        <GET_DOCUMENT Name="DocumentInstance" ServiceName="APPROVAL" DirtyRead="true" ReturnRowCount="true" AssignToVar="isApprovalEnable">
          <DocumentType Value="{$thisParam/cwSearchResultsTables/tableName/@Value}"/>
          <Status Value="UnderApproval"/>
          <SELECT>
            <DocumentType/>
          </SELECT>
        </GET_DOCUMENT>
        <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SELECT PHY_NAME FROM SYS_TABLE_MAP WHERE LOG_NAME='{$thisParam/cwSearchResultsTables/tableName/@Value}'" AssignToVar="tabPhysicalName"/>
        <SET Var="loadTableName" FromValue="{concat('LD_',$tabPhysicalName/SQL_RESULT/PHY_NAME/@Value)}"/>
        <EXECUTE_SQL_QUERY Value="LOCKING ROW FOR ACCESS SELECT COUNT(*) FROM {$loadTableName/@Value}" AssignToVar="loadTableCount" HandleException="true"/>
        <IF_TEST Test="$isApprovalEnable/@TotalRowCount!='0' or ($loadTableCount/@Status !='Error' and  $loadTableCount/SQL_RESULT/*/@Value != '0')">
          <THEN>
            <SET Var="checkPendingApprovalFlag" FromValue="true"/>
          </THEN>
          <ELSE>
            <SET Var="checkPendingApprovalFlag" FromValue="false"/>
          </ELSE>
        </IF_TEST>
        <IF_TEST Test="$checkPendingApprovalFlag ='true'">
          <THEN>
            <FOR_EACH CurrentElement="curAttr" SelectList="$thisParam/ID">
              <TO_DOCVAR AssignToVar="keyColVals">
                <RECORD/>
              </TO_DOCVAR>
              <IF_TEST Test="contains(string($curAttr/@Value),'#')">
                <THEN>
                  <SET Var="rowCols" FromValue="{strSplit($curAttr/@Value,'#')}"/>
                  <FOR_EACH CurrentElement="curRow" SelectList="$rowCols/*">
                    <SET DocVar="keyColVals" FromValue="{substringAfter($curRow/@Value,'=')}" Property="{substringAfter(substringBefore($curRow/@Value,'='),'.')}"/>
                  </FOR_EACH>
                </THEN>
                <ELSE>
                  <IF_TEST Test="$rowCols/cwSearchResultsConfigAttr/attributeName/@Value = null">
                    <THEN>
                      <GET_DOCUMENT Name="cwSearchResultsConfigAttr" ServiceName="USER_SECURITY" AssignToVar="rowCols" DirtyRead="true" ReturnRowCount="yes">
                        <workflowId Value="{$thisParam/workflowId/@Value}"/>
                        <container Value="result"/>
                        <fieldType Value="table"/>
                        <propName Value="rowId"/>
                        <SELECT>
                          <attributeName/>
                        </SELECT>
                      </GET_DOCUMENT>
                    </THEN>
                  </IF_TEST>
                  <SET DocVar="keyColVals" FromValue="{$curAttr/@Value}" Property="{substringAfter($rowCols/cwSearchResultsConfigAttr/attributeName/@Value,'.')}"/>
                </ELSE>
              </IF_TEST>
              <REMOVE_CHILDREN ChildName="RECORD" DocVar="completeColVals"/>
              <ADD_CHILDREN DocVar="completeColVals" FromDocVar="keyColVals"/>
              <REQUEST Name="CheckPendingApproval" ServiceName="ADMIN_UI" HandleException="true" AssignToVar="appStatus">
                <TO_XML DocVar="completeColVals"/>
                <DocumentName>
                  <TABLE_NAME Value="{$thisParam/cwSearchResultsTables/tableName/@Value}"/>
                  <SERVICE_NAME Value="{$thisParam/cwSearchResultsTables/serviceName/@Value}"/>
                </DocumentName>
                <DocumentOperation Value="{$thisParam/DocumentOperation/@Value}"/>
              </REQUEST>
              <IF_TEST Test="$appStatus/@Value='0'">
                <THEN>
                  <ADD_CHILDREN DocVar="idNotSentForApproval" FromDocVar="curAttr"/>
                </THEN>
                <ELSE>
                  <ADD_CHILDREN DocVar="idSentForApproval" FromDocVar="curAttr"/>
                </ELSE>
              </IF_TEST>
            </FOR_EACH>
            <IF_TEST Test="int(count($idSentForApproval/ID)) != 0">
              <THEN>
                <LOG Loglevel="Exception" Value="Selected Records is in Pending Approval {$idSentForApproval/*}"/>
                <ADD_CHILDREN DocVar="thisReturn" FromDocVar="idSentForApproval"/>
              </THEN>
            </IF_TEST>
            <IF_TEST Test="int(count($idNotSentForApproval/ID)) != 0">
              <THEN>
                <ADD_CHILDREN DocVar="thisReturn" FromDocVar="idNotSentForApproval"/>
              </THEN>
            </IF_TEST>
          </THEN>
        </IF_TEST>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
  <DEFINE_METHOD Name="cwSearchResultsColumn">
    <RULE>
      <ACTION>
        <NATIVE_FUNCTION ClassName="com.teradata.xservice.userSecurity.DynamicPGLGenerator" MethodName="searchResultColumn" AssignToVar="nativeReturn">
          <PARAM Var="thisParam" Caption="thisParam"/>
          <PARAM Var="thisContext" Caption="thisContext"/>
        </NATIVE_FUNCTION>
        <APPEND_CHILDREN DocVar="thisReturn" FromDocVar="nativeReturn"/>
      </ACTION>
    </RULE>
  </DEFINE_METHOD>
</DOCUMENTS>

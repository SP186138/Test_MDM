/***********************************************************************************************************
SCRIPT:               DPEND_TRT.BTEQ 
DESCRIPTION:          THIS SCRIPT LOADS EDW TABLES -- This scripts takes data friom trillium output tables 
                                                      and loads DPEND_TRT
DEPENDENCY:           
INPUT:                TRILLIUM OUTPUT CNTRY TABLES
OUTPUT:               EDW
ERRORS:
SPECIAL INSTRUCTIONS:

CHANGE LOG:
VERSION              DATE                 AUTHOR                          CHANGES
1.00                 10/31/2011           TERADATA                        INITIAL VERSION
4.00                 03/26/2012           TERADATA                        1. UPDATE NATIONAL ID INTO REGIS PRSNA 
                                                                          FROM PRSNA TRT.
                                                                          2. ADD STATE VALIDATION FOR US
									  3. ADD OPT OUT MODULE
R2O                  05/11/2012           TERADATA                        REMOVE ERROR PROCESSING
4.1                  06/13/2012           TERADATA                        MODULARIZE AND TUNING
5.7                  02/29/2015           TERADATA                        RELEASE 5.7 BR392 SET PRSNA_STATUS_CODE='WR'
                                                                          For Website Registrations
5.8                  08/23/2016           TERADATA                        Retain i2t traits
5.9                  02/06/2017           TERADATA                        Release 5.9 BR#591
                                                                          Merge i2 trait if i2t trait exist
***********************************************************************************************************/

.logon 10.36.32.8/MDMMerge,$tdwallet(mdmmerge)


.SET ERROROUT STDOUT;
.SET SESSION CHARSET 'UTF8';
.SET ERRORLEVEL 3624 SEVERITY 0
SET QUERY_BAND = 'WorkFlow=MDM;Interface=i2MDM;Country=DEU;Stage=Wrapper;Step=Step14;' FOR SESSION; 
DATABASE MDM;
CREATE VOLATILE TABLE RP1 AS (
SELECT 
TOUT.REGIS_PRSNA_ID,MKTNG_PGM_NBR
FROM
TSS_PRSNA_IDS_DEU TOUT
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR,REGIS_PRSNA_ID)
PARTITION BY MKTNG_PGM_NBR
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS RP1
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS RP1
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DELETE FROM DPEND_TRT WHERE
(REGIS_PRSNA_ID,MKTNG_PGM_NBR)
IN
(
SELECT 
TOUT.REGIS_PRSNA_ID,MKTNG_PGM_NBR
FROM
RP1 TOUT)
AND CAST(SYS_SOURCE AS INTEGER) MOD 100 <> 87;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE TABLE RP12 AS (
SEL A.MKTNG_PGM_NBR,B.REGIS_PRSNA_ID,A.TRT_NBR,A.DPEND_TRT_SEQ_NBR,A.DPEND_SEQ_NBR
FROM DPEND_TRT_STG A
INNER JOIN TSS_PRSNA_IDS_DEU B
	ON	A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR   
	AND	A.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
	AND	A.SYS_SOURCE=B.SYS_SOURCE
	AND	A.SYS_TARGET_ID=B.SYS_TARGET_ID
QUALIFY RANK() OVER (PARTITION BY B.REGIS_PRSNA_ID,A.DPEND_TRT_SEQ_NBR,A.TRT_NBR,A.DPEND_SEQ_NBR  
ORDER BY A.SYS_SOURCE DESC
,A.SYS_NC_TYPE DESC
) = 1	
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR,REGIS_PRSNA_ID)
PARTITION BY MKTNG_PGM_NBR
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS RP12
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS RP12
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

DELETE FROM DPEND_TRT WHERE
(REGIS_PRSNA_ID,MKTNG_PGM_NBR)
IN
( 
SELECT 
TOUT.REGIS_PRSNA_ID,MKTNG_PGM_NBR
FROM
RP1 TOUT)
AND (MKTNG_PGM_NBR,REGIS_PRSNA_ID,TRT_NBR,DPEND_TRT_SEQ_NBR,DPEND_SEQ_NBR)
IN (SEL MKTNG_PGM_NBR,REGIS_PRSNA_ID,TRT_NBR,DPEND_TRT_SEQ_NBR,DPEND_SEQ_NBR
FROM RP12);
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

INS DPEND_TRT 
(
      REGIS_PRSNA_ID ,
      DPEND_TRT_SEQ_NBR ,
      TRT_NBR ,
      DPEND_TRT_DATE ,
      DPEND_TRT_TXT ,
      MKTNG_PGM_NBR ,
      LEGAL_ENT_NBR ,
      DPEND_SEQ_NBR,
      SYS_SOURCE ,
      SYS_TARGET_ID ,
      SYS_AUTH_ID ,
      SYS_CREATED_BY ,
      SYS_CREATION_DATE ,
      SYS_LAST_MODIFIED_DATE ,
      SYS_ENT_STATE ,
      SYS_LAST_MODIFIED_BY ,
      SYS_NC_TYPE ,
      SYS_ERR_CODE ,
      SYS_ERR_SVRTY 
)
SELECT
      --B.REFERENCE_REGISTRATIONKEY,
      B.REGIS_PRSNA_ID,
      A.DPEND_TRT_SEQ_NBR,
      A.TRT_NBR,
      A.DPEND_TRT_DATE,
      A.DPEND_TRT_TXT,
      B.MKTNG_PGM_NBR,
      B.LEGAL_ENT_NBR,
      A.DPEND_SEQ_NBR,
      A.SYS_SOURCE,
      A.SYS_TARGET_ID,
      A.SYS_AUTH_ID,
      A.SYS_CREATED_BY ,
      CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)) SYS_CREATION_DATE,
      CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)) SYS_LAST_MODIFIED_DATE,
      A.SYS_ENT_STATE,
      A.SYS_LAST_MODIFIED_BY,
      A.SYS_NC_TYPE,
      A.SYS_ERR_CODE,
      A.SYS_ERR_SVRTY
FROM DPEND_TRT_STG A
INNER JOIN TSS_PRSNA_IDS_DEU B
	ON	A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR   
	AND	A.REGIS_CNSMR_ID_VAL=B.REGIS_CNSMR_ID_VAL
	AND	A.SYS_SOURCE=B.SYS_SOURCE
	AND	A.SYS_TARGET_ID=B.SYS_TARGET_ID
WHERE (B.MKTNG_PGM_NBR,B.REGIS_PRSNA_ID,A.TRT_NBR,A.DPEND_TRT_SEQ_NBR,A.DPEND_SEQ_NBR)
NOT IN (SEL MKTNG_PGM_NBR,REGIS_PRSNA_ID,TRT_NBR,DPEND_TRT_SEQ_NBR,DPEND_SEQ_NBR
FROM DPEND_TRT
WHERE MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM RP1 GROUP BY 1))		
QUALIFY RANK() OVER (PARTITION BY B.REGIS_PRSNA_ID,A.DPEND_TRT_SEQ_NBR,A.TRT_NBR,A.DPEND_SEQ_NBR  
ORDER BY A.SYS_SOURCE DESC
,A.SYS_NC_TYPE DESC
) = 1
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
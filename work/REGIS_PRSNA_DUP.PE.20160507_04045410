/***********************************************************************************************************
SCRIPT:               REGIS_PRSNA_DUP.BTEQ 
DESCRIPTION:          THIS SCRIPT LOADS EDW TABLES
DEPENDENCY:           
INPUT:                TRILLIUM OUTPUT CNTRY TABLES
OUTPUT:               EDW
ERRORS:
SPECIAL INSTRUCTIONS:

CHANGE LOG:
VERSION              DATE                 AUTHOR                          CHANGES
1.00                 10/31/2011           TERADATA                        INITIAL VERSION
4.00                 03/26/2012           TERADATA                        1. UPDATE NATIONAL ID INTO REGIS PRSNA 
                                                                          FROM PRSNA TRT.
                                                                          2. ADD STATE VALIDATION FOR US
									  3. ADD OPT OUT MODULE
R2O                  05/11/2012           TERADATA                        REMOVE ERROR PROCESSING
4.1                  06/13/2012           TERADATA                        MODULARIZE AND TUNING
4.2                  09/06/2012           TERADATA                        TUNING
4.2.1                01/14/2013           TERADATA                        INC0011026
4.4.5                10/25/2013           TERADATA                        PRB0040875
5.0.2                05/13/2014           TERADATA                        PRB0041035 Release 5.0.2
INC0020096           09/17/2014	          TERADATA                        INC0020096 
5.2.3                02/03/2015           TERADATA                        Release 5.2.3 BR#225
5.5                  08/24/2015           TERADATA                        Release 5.5 BR202
5.6                  11/13/2015           TERADATA                        Release 5.6 BR348
***********************************************************************************************************/

.logon 10.36.32.8/mdm,$tdwallet(mdm)


.SET ERROROUT STDOUT;
.SET SESSION CHARSET 'UTF8';
.SET ERRORLEVEL 3624 SEVERITY 0

SET QUERY_BAND = 'WorkFlow=MDM;Interface=i2MDM;Country=PE;Stage=Wrapper;Step=Step20;' FOR SESSION; 
DATABASE MDM;

CREATE VOLATILE TABLE CNTRY_CODE AS
 (SEL 'PE' AS CNTRY_CODE) 
 WITH DATA 
 ON COMMIT PRESERVE ROWS;
 .IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
 
SEL 1 FROM CNTRY_CODE WHERE CNTRY_CODE IN ('PE');
.IF ACTIVITYCOUNT > 0 THEN .GOTO PESKII

/****************************************************************************************************
ENTERING INTO MERGE PROCESS FOR SK-II
****************************************************************************************************/

SEL CAST(SYS_SOURCE AS INTEGER) FROM TRILLIUM_OUTPUT1_PE_TEMP 
WHERE MKTNG_PGM_NBR IN 
(
SELECT
       AV_CODE
  FROM ATTRIBUTE_VALUES
 WHERE AV_DESCRIPTION='Merge'
)
GROUP BY 1;

.IF ACTIVITYCOUNT > 0 THEN .GOTO SKII

.QUIT 0

.LABEL SKII

DELETE FROM PRSNA_DPLCT_MERGE_PE ALL;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

/***************************************************************************************************************
THIS UPDATE IS FOR SK-ii PROGRAMS THAT DO NOT USE LOYALTY BEFORE DEC 12/2011. After Dec 12, SK-II would identify 
duplicates based on LOYALTY ACCOUNT NUMBER.

Once the data is loaded into REGIS_PRSNA,LYLTY_ACCT_NUM in REGIS_PRSNA
would have the same value for two different consumer registrations.

Based on the above, we order it by registration date,etc to classify the latest record as duplicate.
***************************************************************************************************************/

--------------------------------------------------
--Start: Code changes for PRB0041182         :----
--------------------------------------------------_
CREATE VOLATILE TABLE TSS_LYLTY_ACCT_NUM_PE,
NO FALLBACK, NO JOURNAL, NO LOG
AS (
SELECT LYLTY_PGM_NBR,LYLTY_ACCT_NUM,RP.MKTNG_PGM_NBR,TSS.SYS_SOURCE 
FROM REGIS_PRSNA RP JOIN TSS_PRSNA_IDS_PE TSS 
ON RP.MKTNG_PGM_NBR=TSS.MKTNG_PGM_NBR  AND RP.REGIS_PRSNA_ID=TSS.REGIS_PRSNA_ID 
AND LYLTY_ACCT_NUM IS NOT NULL AND LYLTY_ACCT_NUM <> ''
) WITH DATA
PRIMARY INDEX (LYLTY_PGM_NBR,LYLTY_ACCT_NUM,MKTNG_PGM_NBR)
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
--------------------------------------------------
--End: Code changes for PRB0041182         :----
--------------------------------------------------_

CREATE VOLATILE SET TABLE MP_PRSNA AS
(
SELECT	
A.LEGAL_ENT_NBR,
A.MKTNG_PGM_NBR,
A.REGIS_PRSNA_ID,
A.REGIS_CNSMR_ID_VAL,
A.REGIS_DATE,
A.SYS_CREATION_DATE,
A.SYS_NC_TYPE,
A.SYS_SOURCE,
A.LYLTY_PGM_NBR,
A.LYLTY_ACCT_NUM,
CASE WHEN A.MKTNG_PGM_NBR=B.AV_CODE
THEN
RANK() OVER (PARTITION BY A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM 
             ORDER BY CASE WHEN A.DATA_SRCE_NBR=B2.AV_CODE
             THEN 1 ELSE 2 END ASC,A.REGIS_DATE ASC,A.LATST_ACTVY_DATE ASC,A.REGIS_PRSNA_ID ASC
            )
ELSE
RANK() OVER (PARTITION BY A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM 
             ORDER BY A.REGIS_DATE ASC,A.LATST_ACTVY_DATE ASC,A.REGIS_PRSNA_ID ASC
            )
END AS RNK 
,CASE WHEN RNK=1
      THEN 'AC'
      WHEN RNK<>1
      THEN 'DP'
  END AS STATUS_CODE            
FROM REGIS_PRSNA A

LEFT OUTER JOIN ATTRIBUTE_VALUES B
INNER JOIN ATTRIBUTE_TYPES_HIERARCHY B1
ON B.ATTRIBUTE_TYPE_ID=B1.ATTRIBUTE_TYPE_ID_PARENT 
INNER JOIN ATTRIBUTE_VALUES B2
ON B2.ATTRIBUTE_TYPE_ID=B1.ATTRIBUTE_TYPE_ID_CHILD 
ON A.MKTNG_PGM_NBR = B.AV_CODE
AND B.AV_DESCRIPTION='SK-II Counter Preference'

WHERE A.MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM TRILLIUM_OUTPUT1_PE_TEMP)
AND A.MKTNG_PGM_NBR IN (SEL AV_CODE
FROM ATTRIBUTE_VALUES
WHERE AV_DESCRIPTION='Merge')
AND (A.LYLTY_ACCT_NUM IS NOT NULL AND A.LYLTY_ACCT_NUM <> '')
AND (A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM) IN (SELECT MKTNG_PGM_NBR,LYLTY_PGM_NBR,LYLTY_ACCT_NUM FROM TSS_LYLTY_ACCT_NUM_PE) --Added :Code changes for PRB0041182
QUALIFY PRSNA_STATUS_CODE <> STATUS_CODE
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR,REGIS_PRSNA_ID)
PARTITION BY MKTNG_PGM_NBR
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS MP_PRSNA
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS MP_PRSNA
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

UPDATE REGIS_PRSNA 
FROM MP_PRSNA B 
SET PRSNA_STATUS_CODE = B.STATUS_CODE 
WHERE REGIS_PRSNA.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
  AND REGIS_PRSNA.REGIS_PRSNA_ID=B.REGIS_PRSNA_ID 
  AND REGIS_PRSNA.MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM TRILLIUM_OUTPUT1_PE_TEMP);
  
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;  


/***************************************************************************************************************
Using the above update logic, we insert the identified duplicate records into TRILLIUM_OUTPUT_DUP for
cross reference.

REFERENCE_REGISTRATIONKEY would have the actual REGIS_PRSNA_ID and DUP_REGIS_PRSNA_ID would have the REGIS_PRSNA_ID
of the record which is the active record of the duplicate record being inserted.
***************************************************************************************************************/

 INS TRILLIUM_OUTPUT_DUP
(
  MKTNG_PGM_NBR
 ,REGIS_CNSMR_ID_VAL
 ,REFERENCE_REGISTRATIONKEY
 ,LEGAL_ENT_NBR
 ,REGIS_DATE
 ,SYS_TARGET_ID
 ,SYS_SOURCE
 ,SYS_CREATION_DATE
 ,DUP_REGIS_PRSNA_ID
 ,WINDOW_KEY_01
)
SELECT DISTINCT 
A.MKTNG_PGM_NBR
,A.REGIS_CNSMR_ID_VAL
,A.REGIS_PRSNA_ID
,A.LEGAL_ENT_NBR 
,A.REGIS_DATE
,A.SYS_TARGET_ID
,A.SYS_SOURCE
,CAST(CAST(CURRENT_TIMESTAMP AS TIMESTAMP(6)) AS VARCHAR(19))
,B.REGIS_PRSNA_ID
,'LOYALTY'
 FROM
 (SELECT * 
FROM (
SELECT	
A.LEGAL_ENT_NBR,
A.MKTNG_PGM_NBR,
A.REGIS_PRSNA_ID,
A.REGIS_CNSMR_ID_VAL,
A.REGIS_DATE,
A.SYS_CREATION_DATE,
A.SYS_NC_TYPE,
A.SYS_TARGET_ID,
A.SYS_SOURCE,
A.LYLTY_PGM_NBR,
A.LYLTY_ACCT_NUM,
CASE WHEN A.MKTNG_PGM_NBR=B.AV_CODE
THEN
RANK() OVER (PARTITION BY A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM 
             ORDER BY CASE WHEN A.DATA_SRCE_NBR=B2.AV_CODE
             THEN 1 ELSE 2 END ASC,A.REGIS_DATE ASC,A.LATST_ACTVY_DATE ASC,A.REGIS_PRSNA_ID ASC
            )
ELSE
RANK() OVER (PARTITION BY A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM 
             ORDER BY A.REGIS_DATE ASC,A.LATST_ACTVY_DATE ASC,A.REGIS_PRSNA_ID ASC
            )
END AS RNK 
FROM REGIS_PRSNA A
LEFT OUTER JOIN ATTRIBUTE_VALUES B
INNER JOIN ATTRIBUTE_TYPES_HIERARCHY B1
ON B.ATTRIBUTE_TYPE_ID=B1.ATTRIBUTE_TYPE_ID_PARENT 
INNER JOIN ATTRIBUTE_VALUES B2
ON B2.ATTRIBUTE_TYPE_ID=B1.ATTRIBUTE_TYPE_ID_CHILD 
ON A.MKTNG_PGM_NBR = B.AV_CODE
AND B.AV_DESCRIPTION='SK-II Counter Preference'
INNER JOIN ATTRIBUTE_VALUES D
ON D.AV_CODE = A.MKTNG_PGM_NBR
AND D.AV_DESCRIPTION='Merge'
AND (A.LYLTY_ACCT_NUM IS NOT NULL AND A.LYLTY_ACCT_NUM <> '')
AND (A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM) IN (SELECT MKTNG_PGM_NBR,LYLTY_PGM_NBR,LYLTY_ACCT_NUM FROM TSS_LYLTY_ACCT_NUM_PE) --Added :Code changes for PRB0041182
--AND A.SYS_CREATION_DATE > D.SYS_CREATION_DATE
WHERE A.MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM TRILLIUM_OUTPUT1_PE_TEMP)
) B 
WHERE RNK <> 1
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12
) A
INNER JOIN
(SELECT * 
FROM (
SELECT	
A.LEGAL_ENT_NBR,
A.MKTNG_PGM_NBR,
A.REGIS_PRSNA_ID,
A.REGIS_CNSMR_ID_VAL,
A.REGIS_DATE,
A.SYS_CREATION_DATE,
A.SYS_NC_TYPE,
A.SYS_TARGET_ID,
A.SYS_SOURCE,
A.LYLTY_PGM_NBR,
A.LYLTY_ACCT_NUM,
CASE WHEN A.MKTNG_PGM_NBR=B.AV_CODE
THEN
RANK() OVER (PARTITION BY A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM 
             ORDER BY CASE WHEN A.DATA_SRCE_NBR=B2.AV_CODE
             THEN 1 ELSE 2 END ASC,A.REGIS_DATE ASC,A.LATST_ACTVY_DATE ASC,A.REGIS_PRSNA_ID ASC
            )
ELSE
RANK() OVER (PARTITION BY A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM 
             ORDER BY A.REGIS_DATE ASC,A.LATST_ACTVY_DATE ASC,A.REGIS_PRSNA_ID ASC
            )
END AS RNK 
FROM REGIS_PRSNA A
LEFT OUTER JOIN ATTRIBUTE_VALUES B
INNER JOIN ATTRIBUTE_TYPES_HIERARCHY B1
ON B.ATTRIBUTE_TYPE_ID=B1.ATTRIBUTE_TYPE_ID_PARENT 
INNER JOIN ATTRIBUTE_VALUES B2
ON B2.ATTRIBUTE_TYPE_ID=B1.ATTRIBUTE_TYPE_ID_CHILD 
ON A.MKTNG_PGM_NBR = B.AV_CODE
AND B.AV_DESCRIPTION='SK-II Counter Preference'

INNER JOIN ATTRIBUTE_VALUES D
ON D.AV_CODE = A.MKTNG_PGM_NBR
AND D.AV_DESCRIPTION='Merge'
AND (A.LYLTY_ACCT_NUM IS NOT NULL AND A.LYLTY_ACCT_NUM <> '')
AND (A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM) IN (SELECT MKTNG_PGM_NBR,LYLTY_PGM_NBR,LYLTY_ACCT_NUM FROM TSS_LYLTY_ACCT_NUM_PE) --Added :Code changes for PRB0041182
--AND A.SYS_CREATION_DATE > D.SYS_CREATION_DATE
WHERE A.MKTNG_PGM_NBR IN (SEL MKTNG_PGM_NBR FROM TRILLIUM_OUTPUT1_PE_TEMP)
) B 
WHERE RNK = 1
GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12
) B
ON A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND A.LYLTY_PGM_NBR = B.LYLTY_PGM_NBR
AND A.LYLTY_ACCT_NUM = B.LYLTY_ACCT_NUM
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

/***************************************************************************************************************
REFERENCE_REGISTRATIONKEY would have the actual REGIS_PRSNA_ID and DUP_REGIS_PRSNA_ID would have the REGIS_PRSNA_ID
of the record which is the active record of the duplicate record being inserted.

There can be more than one duplicate record for a given loyalty account number. Hence we consolidate the information
into PRSNA_DPLCT_MERGE_PE and ensure that the active record is tied to only the most recent duplicate record.
***************************************************************************************************************/

INSERT PRSNA_DPLCT_MERGE_PE
(
DUP_REGIS_PRSNA_ID,
LEGAL_ENT_NBR,
MKTNG_PGM_NBR,
REFERENCE_REGISTRATIONKEY
)
--SELECT MAX(DUP_REGIS_PRSNA_ID), --PRB0041035 Release R5.0.2 Commented
SELECT DUP_REGIS_PRSNA_ID,   --PRB0041035 Release R5.0.2 Added
LEGAL_ENT_NBR,
MKTNG_PGM_NBR,
REFERENCE_REGISTRATIONKEY
FROM
(
SELECT DISTINCT 
CASE WHEN C.REGIS_PRSNA_ID IS NOT NULL
     THEN C.REGIS_PRSNA_ID
     WHEN B.REGIS_PRSNA_ID IS NOT NULL
     THEN B.REGIS_PRSNA_ID
 END DUP_REGIS_PRSNA_ID,
A.LEGAL_ENT_NBR,
A.MKTNG_PGM_NBR,
CASE WHEN C.REGIS_PRSNA_ID IS NOT NULL
     THEN CAST(A.REFERENCE_REGISTRATIONKEY AS INTEGER)
     WHEN B.REGIS_PRSNA_ID IS NOT NULL
     THEN CAST(A.DUP_REGIS_PRSNA_ID AS INTEGER)     
END REFERENCE_REGISTRATIONKEY 
--PRB0041035 Release 5.0.2 Start--
,CASE WHEN C.REGIS_PRSNA_ID IS NOT NULL
     THEN C.REGIS_DATE
     WHEN B.REGIS_PRSNA_ID IS NOT NULL
     THEN B.REGIS_DATE 
END REGIS_DATE
,CASE WHEN C.REGIS_PRSNA_ID IS NOT NULL
     THEN C.LATST_ACTVY_DATE              
     WHEN B.REGIS_PRSNA_ID IS NOT NULL
     THEN B.LATST_ACTVY_DATE               
END LATST_ACTVY_DATE              
,CASE WHEN C.REGIS_PRSNA_ID IS NOT NULL
     THEN C.SYS_LAST_MODIFIED_DATE        
     WHEN B.REGIS_PRSNA_ID IS NOT NULL
     THEN B.SYS_LAST_MODIFIED_DATE         
END SYS_LAST_MODIFIED_DATE        
--PRB0041035 Release 5.0.2 End-- 
FROM
TRILLIUM_OUTPUT_DUP1 A

INNER JOIN (SEL MKTNG_PGM_NBR
FROM TRILLIUM_OUTPUT1_PE_TEMP
GROUP BY 1) C1
ON A.MKTNG_PGM_NBR = C1.MKTNG_PGM_NBR
AND CAST(A.SYS_CREATION_DATE AS DATE) = CURRENT_DATE
LEFT OUTER JOIN REGIS_PRSNA B
ON CAST(A.REFERENCE_REGISTRATIONKEY AS INTEGER) = B.REGIS_PRSNA_ID
AND A.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
--AND (A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM) IN (SELECT MKTNG_PGM_NBR,LYLTY_PGM_NBR,LYLTY_ACCT_NUM FROM TSS_LYLTY_ACCT_NUM_PE) --Added :Code changes for PRB0041182
AND B.PRSNA_STATUS_CODE = 'DP'
LEFT OUTER JOIN REGIS_PRSNA C
ON CAST(A.DUP_REGIS_PRSNA_ID AS INTEGER) = C.REGIS_PRSNA_ID
AND A.LEGAL_ENT_NBR = C.LEGAL_ENT_NBR
AND A.MKTNG_PGM_NBR = C.MKTNG_PGM_NBR
--AND (A.MKTNG_PGM_NBR,A.LYLTY_PGM_NBR,A.LYLTY_ACCT_NUM) IN (SELECT MKTNG_PGM_NBR,LYLTY_PGM_NBR,LYLTY_ACCT_NUM FROM TSS_LYLTY_ACCT_NUM_PE) --Added :Code changes for PRB0041182
AND C.PRSNA_STATUS_CODE = 'DP'
WHERE (B.PRSNA_STATUS_CODE = 'DP' OR C.PRSNA_STATUS_CODE = 'DP')
  AND A.MKTNG_PGM_NBR IN 
(
SELECT
       AV_CODE
  FROM ATTRIBUTE_VALUES
 WHERE AV_DESCRIPTION='Merge'
)
  AND A.STATUS IS NULL
  AND A.WINDOW_KEY_01 = 'LOYALTY'
) A
--GROUP BY 2,3,4 --PRB0041035 Release R5.0.2 Commented
QUALIFY RANK () OVER(PARTITION BY LEGAL_ENT_NBR,MKTNG_PGM_NBR,REFERENCE_REGISTRATIONKEY ORDER BY LATST_ACTVY_DATE DESC,REGIS_DATE DESC,DUP_REGIS_PRSNA_ID DESC)=1 --PRB0041035 Release R5.0.2 Added
;

.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

COLLECT STATS PRSNA_DPLCT_MERGE_PE;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

.GOTO SKIIUPD

.LABEL PESKII

DELETE FROM PRSNA_DPLCT_MERGE_PE ALL;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

CREATE VOLATILE TABLE MPN AS (
SELECT
       CAST(TRIM(AV_CODE) AS INTEGER) AS MKTNG_PGM_NBR
  FROM ATTRIBUTE_VALUES
 WHERE AV_DESCRIPTION='Merge'
)
WITH DATA
UNIQUE PRIMARY INDEX (MKTNG_PGM_NBR)
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS MPN
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE SET TABLE PESKII_PRSNA AS
(
SEL 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM REGIS_PRSNA B
WHERE B.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND ((B.SYS_LAST_MODIFIED_BY IS NOT NULL 
AND B.SYS_LAST_MODIFIED_BY IN 
(SEL ID FROM USER_PROFILE_T))
OR (B.SYS_CREATED_BY IS NOT NULL 
AND B.SYS_CREATED_BY IN 
(SEL ID FROM USER_PROFILE_T)))
AND B.SYS_LAST_MODIFIED_DATE >
(SEL MAX(LOADSTARTTS) FROM LOAD_CONTROL
WHERE FORMAT_ID=22
AND LOADSTATUS='Success')
UNION ALL
SEL 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM REGIS_PRSNA_POSTL_ADDR B
WHERE B.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND ((B.SYS_LAST_MODIFIED_BY IS NOT NULL 
AND B.SYS_LAST_MODIFIED_BY IN 
(SEL ID FROM USER_PROFILE_T))
OR (B.SYS_CREATED_BY IS NOT NULL 
AND B.SYS_CREATED_BY IN 
(SEL ID FROM USER_PROFILE_T)))
AND B.SYS_LAST_MODIFIED_DATE >
(SEL MAX(LOADSTARTTS) FROM LOAD_CONTROL
WHERE FORMAT_ID=22
AND LOADSTATUS='Success')
UNION ALL
SEL 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM REGIS_PRSNA_EMAIL_ADDR B
WHERE B.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND ((B.SYS_LAST_MODIFIED_BY IS NOT NULL 
AND B.SYS_LAST_MODIFIED_BY IN 
(SEL ID FROM USER_PROFILE_T))
OR (B.SYS_CREATED_BY IS NOT NULL 
AND B.SYS_CREATED_BY IN 
(SEL ID FROM USER_PROFILE_T)))
AND B.SYS_LAST_MODIFIED_DATE >
(SEL MAX(LOADSTARTTS) FROM LOAD_CONTROL
WHERE FORMAT_ID=22
AND LOADSTATUS='Success')
UNION ALL
SEL 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM REGIS_PRSNA_PHONE B
WHERE B.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND ((B.SYS_LAST_MODIFIED_BY IS NOT NULL 
AND B.SYS_LAST_MODIFIED_BY IN 
(SEL ID FROM USER_PROFILE_T))
OR (B.SYS_CREATED_BY IS NOT NULL 
AND B.SYS_CREATED_BY IN 
(SEL ID FROM USER_PROFILE_T)))
AND B.SYS_LAST_MODIFIED_DATE >
(SEL MAX(LOADSTARTTS) FROM LOAD_CONTROL
WHERE FORMAT_ID=22
AND LOADSTATUS='Success')
UNION ALL
SEL 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM REGIS_PRSNA_SOC_NET_ACCT B
WHERE B.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND ((B.SYS_LAST_MODIFIED_BY IS NOT NULL 
AND B.SYS_LAST_MODIFIED_BY IN 
(SEL ID FROM USER_PROFILE_T))
OR (B.SYS_CREATED_BY IS NOT NULL 
AND B.SYS_CREATED_BY IN 
(SEL ID FROM USER_PROFILE_T)))
AND B.SYS_LAST_MODIFIED_DATE >
(SEL MAX(LOADSTARTTS) FROM LOAD_CONTROL
WHERE FORMAT_ID=22
AND LOADSTATUS='Success')
UNION ALL
SEL 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM PRSNA_TRT B
WHERE B.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND ((B.SYS_LAST_MODIFIED_BY IS NOT NULL 
AND B.SYS_LAST_MODIFIED_BY IN 
(SEL ID FROM USER_PROFILE_T))
OR (B.SYS_CREATED_BY IS NOT NULL 
AND B.SYS_CREATED_BY IN 
(SEL ID FROM USER_PROFILE_T)))
AND B.SYS_LAST_MODIFIED_DATE >
(SEL MAX(LOADSTARTTS) FROM LOAD_CONTROL
WHERE FORMAT_ID=22
AND LOADSTATUS='Success')
UNION ALL
SEL 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM DPEND B
WHERE B.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND ((B.SYS_LAST_MODIFIED_BY IS NOT NULL 
AND B.SYS_LAST_MODIFIED_BY IN 
(SEL ID FROM USER_PROFILE_T))
OR (B.SYS_CREATED_BY IS NOT NULL 
AND B.SYS_CREATED_BY IN 
(SEL ID FROM USER_PROFILE_T)))
AND B.SYS_LAST_MODIFIED_DATE >
(SEL MAX(LOADSTARTTS) FROM LOAD_CONTROL
WHERE FORMAT_ID=22
AND LOADSTATUS='Success')
UNION ALL
SEL 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM DPEND_TRT B
WHERE B.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND ((B.SYS_LAST_MODIFIED_BY IS NOT NULL 
AND B.SYS_LAST_MODIFIED_BY IN 
(SEL ID FROM USER_PROFILE_T))
OR (B.SYS_CREATED_BY IS NOT NULL 
AND B.SYS_CREATED_BY IN 
(SEL ID FROM USER_PROFILE_T)))
AND B.SYS_LAST_MODIFIED_DATE >
(SEL MAX(LOADSTARTTS) FROM LOAD_CONTROL
WHERE FORMAT_ID=22
AND LOADSTATUS='Success')
UNION ALL
SEL 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM PET B
WHERE B.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND ((B.SYS_LAST_MODIFIED_BY IS NOT NULL 
AND B.SYS_LAST_MODIFIED_BY IN 
(SEL ID FROM USER_PROFILE_T))
OR (B.SYS_CREATED_BY IS NOT NULL 
AND B.SYS_CREATED_BY IN 
(SEL ID FROM USER_PROFILE_T)))
AND B.SYS_LAST_MODIFIED_DATE >
(SEL MAX(LOADSTARTTS) FROM LOAD_CONTROL
WHERE FORMAT_ID=22
AND LOADSTATUS='Success')
UNION ALL
SEL 
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM PET_TRT B
WHERE B.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND ((B.SYS_LAST_MODIFIED_BY IS NOT NULL 
AND B.SYS_LAST_MODIFIED_BY IN 
(SEL ID FROM USER_PROFILE_T))
OR (B.SYS_CREATED_BY IS NOT NULL 
AND B.SYS_CREATED_BY IN 
(SEL ID FROM USER_PROFILE_T)))
AND B.SYS_LAST_MODIFIED_DATE >
(SEL MAX(LOADSTARTTS) FROM LOAD_CONTROL
WHERE FORMAT_ID=22
AND LOADSTATUS='Success')
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR,REGIS_PRSNA_ID)
PARTITION BY MKTNG_PGM_NBR
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS PESKII_PRSNA
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS PESKII_PRSNA
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

CREATE VOLATILE SET TABLE MP_PESKII_PRSNA AS
(
SEL
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID,
A.LYLTY_PGM_NBR,
A.LYLTY_ACCT_NUM
FROM PESKII_PRSNA B
INNER JOIN REGIS_PRSNA A
ON A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.REGIS_PRSNA_ID=B.REGIS_PRSNA_ID
WHERE A.MKTNG_PGM_NBR IN 
(SEL MKTNG_PGM_NBR FROM MPN) 
AND A.PRSNA_STATUS_CODE='DP'
AND (A.LYLTY_ACCT_NUM IS NOT NULL AND A.LYLTY_ACCT_NUM <> '')
)
WITH DATA
PRIMARY INDEX (MKTNG_PGM_NBR,REGIS_PRSNA_ID)
PARTITION BY MKTNG_PGM_NBR
ON COMMIT PRESERVE ROWS;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

COLLECT STATS MP_PESKII_PRSNA
COLUMN MKTNG_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS MP_PESKII_PRSNA
COLUMN REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS MP_PESKII_PRSNA
COLUMN LYLTY_ACCT_NUM;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;
COLLECT STATS MP_PESKII_PRSNA
COLUMN LYLTY_PGM_NBR;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE;

SEL 1 FROM MP_PESKII_PRSNA 
GROUP BY 1;

.IF ACTIVITYCOUNT > 0 THEN .GOTO PESKIIINS

.QUIT 0

.LABEL PESKIIINS

INSERT PRSNA_DPLCT_MERGE_PE
(
DUP_REGIS_PRSNA_ID,
LEGAL_ENT_NBR,
MKTNG_PGM_NBR,
REFERENCE_REGISTRATIONKEY
)
SELECT A.REGIS_PRSNA_ID,   
B.LEGAL_ENT_NBR,
B.MKTNG_PGM_NBR,
B.REGIS_PRSNA_ID
FROM MP_PESKII_PRSNA A
INNER JOIN REGIS_PRSNA B
ON A.MKTNG_PGM_NBR=B.MKTNG_PGM_NBR
AND A.LYLTY_PGM_NBR=B.LYLTY_PGM_NBR
AND A.LYLTY_ACCT_NUM=B.LYLTY_ACCT_NUM
WHERE A.REGIS_PRSNA_ID<>B.REGIS_PRSNA_ID;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

.LABEL SKIIUPD

UPDATE REGIS_PRSNA
FROM
( 
SELECT DISTINCT 
B.REFERENCE_REGISTRATIONKEY REFERENCE_REGISTRATIONKEY1
,A.MKTNG_PGM_NBR
,A.LEGAL_ENT_NBR
--PRB0041035 Release 5.0.2 Added Start--
/*
,COALESCE(NULLIF(COALESCE(C.NAME_PREFX_TXT,''),''),A.NAME_PREFX_TXT) NAME_PREFX_TXT
,COALESCE(NULLIF(COALESCE(C.GVN_NAME,''),''),A.GVN_NAME) GVN_NAME
,COALESCE(NULLIF(COALESCE(C.MID_NAME,''),''),A.MID_NAME) MID_NAME
,COALESCE(NULLIF(COALESCE(C.FAMLY_NAME,''),''),A.FAMLY_NAME) FAMLY_NAME
,COALESCE(NULLIF(COALESCE(C.NAME_SUFFX_TXT,''),''),A.NAME_SUFFX_TXT) NAME_SUFFX_TXT
,COALESCE(NULLIF(COALESCE(C.FULL_NAME,''),''),A.FULL_NAME) FULL_NAME
,COALESCE(NULLIF(COALESCE(C.GENDR_IND,''),''),A.GENDR_IND) GENDR_IND
,COALESCE(C.BRTH_DATE,A.BRTH_DATE) BRTH_DATE
,COALESCE(NULLIF(COALESCE(C.LANG_CODE,''),''),A.LANG_CODE) LANG_CODE
*/
,COALESCE(NULLIF(COALESCE(a.NAME_PREFX_TXT,''),''),C.NAME_PREFX_TXT) NAME_PREFX_TXT
,COALESCE(NULLIF(COALESCE(A.GVN_NAME,''),''),C.GVN_NAME) GVN_NAME
,COALESCE(NULLIF(COALESCE(A.MID_NAME,''),''),C.MID_NAME) MID_NAME
,COALESCE(NULLIF(COALESCE(A.FAMLY_NAME,''),''),C.FAMLY_NAME) FAMLY_NAME
,COALESCE(NULLIF(COALESCE(A.NAME_SUFFX_TXT,''),''),C.NAME_SUFFX_TXT) NAME_SUFFX_TXT
,COALESCE(NULLIF(COALESCE(A.FULL_NAME,''),''),C.FULL_NAME) FULL_NAME
,COALESCE(NULLIF(COALESCE(A.GENDR_IND,''),''),C.GENDR_IND) GENDR_IND
,COALESCE(A.BRTH_DATE,C.BRTH_DATE) BRTH_DATE
,COALESCE(NULLIF(COALESCE(A.LANG_CODE,''),''),C.LANG_CODE) LANG_CODE
--PRB0041035 Release 5.0.2 Added End--
,COALESCE(NULLIF(COALESCE(A.GVN_NAME_ALIAS,''),''),C.GVN_NAME_ALIAS) GVN_NAME_ALIAS
,COALESCE(NULLIF(COALESCE(A.FAMLY_NAME_ALIAS,''),''),C.FAMLY_NAME_ALIAS) FAMLY_NAME_ALIAS
,COALESCE(NULLIF(COALESCE(A.DATA_ORIGIN_SRCE_NBR,''),''),C.DATA_ORIGIN_SRCE_NBR) DATA_ORIGIN_SRCE_NBR
,A.LATST_ACTVY_DATE
,A.SYS_SOURCE                    
,A.SYS_TARGET_ID                 
,A.SYS_AUTH_ID                   
,A.SYS_CREATED_BY                
,A.SYS_CREATION_DATE             
,A.SYS_LAST_MODIFIED_DATE        
,A.SYS_ENT_STATE                 
,A.SYS_LAST_MODIFIED_BY          
,A.SYS_NC_TYPE                   
,A.SYS_ERR_CODE                  
,A.SYS_ERR_SVRTY 
FROM PRSNA_DPLCT_MERGE_PE B
INNER JOIN REGIS_PRSNA A
ON A.REGIS_PRSNA_ID = B.DUP_REGIS_PRSNA_ID
AND A.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND A.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR
INNER JOIN REGIS_PRSNA C
ON B.REFERENCE_REGISTRATIONKEY = C.REGIS_PRSNA_ID
AND B.MKTNG_PGM_NBR = C.MKTNG_PGM_NBR
AND B.LEGAL_ENT_NBR = C.LEGAL_ENT_NBR
) B
SET 
 NAME_PREFX_TXT=B.NAME_PREFX_TXT
,GVN_NAME=B.GVN_NAME
,MID_NAME=B.MID_NAME
,FAMLY_NAME=B.FAMLY_NAME
,NAME_SUFFX_TXT=B.NAME_SUFFX_TXT
,FULL_NAME=B.FULL_NAME
,GENDR_IND=B.GENDR_IND
,BRTH_DATE=B.BRTH_DATE
,LANG_CODE=B.LANG_CODE
,LATST_ACTVY_DATE=B.LATST_ACTVY_DATE
,GVN_NAME_ALIAS=B.GVN_NAME_ALIAS
,FAMLY_NAME_ALIAS=B.FAMLY_NAME_ALIAS
,SYS_LAST_MODIFIED_DATE= CAST(CAST(CURRENT_TIMESTAMP AS VARCHAR(19)) AS TIMESTAMP(0)) --PRB0041035 Release 5.0.2 Added
,DATA_ORIGIN_SRCE_NBR=B.DATA_ORIGIN_SRCE_NBR -- Release 5.6 Added
,SYS_SOURCE=B.SYS_SOURCE -- Release 5.6 Added
WHERE REGIS_PRSNA.REGIS_PRSNA_ID = B.REFERENCE_REGISTRATIONKEY1
AND REGIS_PRSNA.MKTNG_PGM_NBR = B.MKTNG_PGM_NBR
AND REGIS_PRSNA.LEGAL_ENT_NBR = B.LEGAL_ENT_NBR
AND REGIS_PRSNA.LATST_ACTVY_DATE <= B.LATST_ACTVY_DATE
AND REGIS_PRSNA.PRSNA_STATUS_CODE='AC'
;
.IF ERRORLEVEL > 0 THEN .QUIT ERRORCODE; 

.exit